package Broadworks::OCIP::Methods;
use strict;
use warnings;
use Moose;

sub EnterpriseBroadWorksMobileManagerAddRequest {
    my $self                  = shift;
    my $serviceProviderId     = shift;
    my $informationFile       = shift;
    my $certificateFile       = shift;
    my $isActive              = shift;
    my $localToCarrier        = shift;
    my $maxTxPerSecondEnabled = shift;
    my @params                = @_;

    return $self->_send_command(
        'EnterpriseBroadWorksMobileManagerAddRequest',
        serviceProviderId     => $serviceProviderId,
        informationFile       => $informationFile,
        certificateFile       => $certificateFile,
        isActive              => $isActive,
        localToCarrier        => $localToCarrier,
        maxTxPerSecondEnabled => $maxTxPerSecondEnabled,
        @params
    );
}

sub EnterpriseBroadWorksMobileManagerGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseBroadWorksMobileManagerGetRequest', serviceProviderId => $serviceProviderId );
}

sub EnterpriseBroadWorksMobileManagerGetDomainListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseBroadWorksMobileManagerGetDomainListRequest',
        serviceProviderId => $serviceProviderId );
}

sub EnterpriseBroadWorksMobileManagerDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_command( 'EnterpriseBroadWorksMobileManagerDeleteRequest',
        serviceProviderId => $serviceProviderId );
}

sub EnterpriseBroadWorksMobileManagerModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseBroadWorksMobileManagerModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseBroadWorksMobileManagerActivationRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $isActive          = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseBroadWorksMobileManagerActivationRequest',
        serviceProviderId => $serviceProviderId,
        isActive          => $isActive,
        @params
    );
}

sub EnterpriseBroadWorksMobileManagerSendCarrierFilesRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $emailTo           = shift;

    return $self->_send_command(
        'EnterpriseBroadWorksMobileManagerSendCarrierFilesRequest',
        serviceProviderId => $serviceProviderId,
        emailTo           => $emailTo
    );
}

sub EnterpriseBroadWorksMobileManagerAddHomeZoneRequest {
    my $self               = shift;
    my $serviceProviderId  = shift;
    my $homeZoneDomainName = shift;
    my $mobileCountryCode  = shift;
    my $mobileNetworkCode  = shift;
    my $locationAreaCode   = shift;
    my $cellIdentity       = shift;

    return $self->_send_command(
        'EnterpriseBroadWorksMobileManagerAddHomeZoneRequest',
        serviceProviderId  => $serviceProviderId,
        homeZoneDomainName => $homeZoneDomainName,
        mobileCountryCode  => $mobileCountryCode,
        mobileNetworkCode  => $mobileNetworkCode,
        locationAreaCode   => $locationAreaCode,
        cellIdentity       => $cellIdentity
    );
}

sub EnterpriseBroadWorksMobileManagerGetHomeZoneListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseBroadWorksMobileManagerGetHomeZoneListRequest',
        serviceProviderId => $serviceProviderId );
}

sub EnterpriseBroadWorksMobileManagerGetHomeZoneRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $homeZoneId        = shift;

    return $self->_send_query(
        'EnterpriseBroadWorksMobileManagerGetHomeZoneRequest',
        serviceProviderId => $serviceProviderId,
        homeZoneId        => $homeZoneId
    );
}

sub EnterpriseBroadWorksMobileManagerDeleteHomeZoneRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $homeZoneId        = shift;

    return $self->_send_command(
        'EnterpriseBroadWorksMobileManagerDeleteHomeZoneRequest',
        serviceProviderId => $serviceProviderId,
        homeZoneId        => $homeZoneId
    );
}

sub EnterpriseBroadWorksMobileManagerDeleteHomeZoneListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $homeZoneId        = shift;

    return $self->_send_command(
        'EnterpriseBroadWorksMobileManagerDeleteHomeZoneListRequest',
        serviceProviderId => $serviceProviderId,
        homeZoneId        => $homeZoneId
    );
}

sub EnterpriseBroadWorksMobileManagerModifyHomeZoneRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $homeZoneId        = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseBroadWorksMobileManagerModifyHomeZoneRequest',
        serviceProviderId => $serviceProviderId,
        homeZoneId        => $homeZoneId,
        @params
    );
}

sub EnterpriseCommonPhoneListAddListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $entry             = shift;

    return $self->_send_command(
        'EnterpriseCommonPhoneListAddListRequest',
        serviceProviderId => $serviceProviderId,
        entry             => $entry
    );
}

sub EnterpriseCommonPhoneListDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $entryName         = shift;

    return $self->_send_command(
        'EnterpriseCommonPhoneListDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        entryName         => $entryName
    );
}

sub EnterpriseCommonPhoneListGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseCommonPhoneListGetListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseCommonPhoneListModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $entryName         = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCommonPhoneListModifyRequest',
        serviceProviderId => $serviceProviderId,
        entryName         => $entryName,
        @params
    );
}

sub EnterpriseDepartmentAddRequest {
    my $self           = shift;
    my $enterpriseId   = shift;
    my $departmentName = shift;
    my @params         = @_;

    return $self->_send_command(
        'EnterpriseDepartmentAddRequest',
        enterpriseId   => $enterpriseId,
        departmentName => $departmentName,
        @params
    );
}

sub EnterpriseDepartmentDeleteRequest {
    my $self           = shift;
    my $enterpriseId   = shift;
    my $departmentName = shift;

    return $self->_send_command(
        'EnterpriseDepartmentDeleteRequest',
        enterpriseId   => $enterpriseId,
        departmentName => $departmentName
    );
}

sub EnterpriseDepartmentGetAvailableParentListRequest {
    my $self           = shift;
    my $enterpriseId   = shift;
    my $departmentName = shift;

    return $self->_send_query(
        'EnterpriseDepartmentGetAvailableParentListRequest',
        enterpriseId   => $enterpriseId,
        departmentName => $departmentName
    );
}

sub EnterpriseDepartmentGetListRequest {
    my $self                    = shift;
    my $enterpriseId            = shift;
    my $includeGroupDepartments = shift;

    return $self->_send_query(
        'EnterpriseDepartmentGetListRequest',
        enterpriseId            => $enterpriseId,
        includeGroupDepartments => $includeGroupDepartments
    );
}

sub EnterpriseDepartmentModifyRequest {
    my $self           = shift;
    my $enterpriseId   = shift;
    my $departmentName = shift;
    my @params         = @_;

    return $self->_send_command(
        'EnterpriseDepartmentModifyRequest',
        enterpriseId   => $enterpriseId,
        departmentName => $departmentName,
        @params
    );
}

sub EnterprisePhoneDirectoryGetListRequest17 {
    my $self                    = shift;
    my $enterpriseId            = shift;
    my $isExtendedInfoRequested = shift;
    my @params                  = @_;

    return $self->_send_query(
        'EnterprisePhoneDirectoryGetListRequest17',
        enterpriseId            => $enterpriseId,
        isExtendedInfoRequested => $isExtendedInfoRequested,
        @params
    );
}

sub EnterpriseSessionAdmissionControlGetAvailableDeviceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseSessionAdmissionControlGetAvailableDeviceListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseSessionAdmissionControlGroupAddDeviceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseSessionAdmissionControlGroupAddDeviceListRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub EnterpriseSessionAdmissionControlGroupAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my $maxSession        = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseSessionAdmissionControlGroupAddRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        maxSession        => $maxSession,
        @params
    );
}

sub EnterpriseSessionAdmissionControlGroupDeleteDeviceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseSessionAdmissionControlGroupDeleteDeviceListRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub EnterpriseSessionAdmissionControlGroupDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseSessionAdmissionControlGroupDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseSessionAdmissionControlGroupGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseSessionAdmissionControlGroupGetListRequest',
        serviceProviderId => $serviceProviderId );
}

sub EnterpriseSessionAdmissionControlGroupGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_query(
        'EnterpriseSessionAdmissionControlGroupGetRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub EnterpriseSessionAdmissionControlGroupModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseSessionAdmissionControlGroupModifyRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub EnterpriseVoiceVPNAddPolicyRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $locationDialingCode = shift;
    my $minExtensionLength  = shift;
    my $maxExtensionLength  = shift;
    my @params              = @_;

    return $self->_send_command(
        'EnterpriseVoiceVPNAddPolicyRequest',
        serviceProviderId   => $serviceProviderId,
        locationDialingCode => $locationDialingCode,
        minExtensionLength  => $minExtensionLength,
        maxExtensionLength  => $maxExtensionLength,
        @params
    );
}

sub EnterpriseVoiceVPNDeletePolicyRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $locationDialingCode = shift;

    return $self->_send_command(
        'EnterpriseVoiceVPNDeletePolicyRequest',
        serviceProviderId   => $serviceProviderId,
        locationDialingCode => $locationDialingCode
    );
}

sub EnterpriseVoiceVPNGetDefaultRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseVoiceVPNGetDefaultRequest', serviceProviderId => $serviceProviderId );
}

sub EnterpriseVoiceVPNGetPolicyRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $locationDialingCode = shift;

    return $self->_send_query(
        'EnterpriseVoiceVPNGetPolicyRequest',
        serviceProviderId   => $serviceProviderId,
        locationDialingCode => $locationDialingCode
    );
}

sub EnterpriseVoiceVPNGetRequest14sp3 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseVoiceVPNGetRequest14sp3', serviceProviderId => $serviceProviderId );
}

sub EnterpriseVoiceVPNGetPolicyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseVoiceVPNGetPolicyListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseVoiceVPNModifyPolicyRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $locationDialingCode = shift;
    my @params              = @_;

    return $self->_send_command(
        'EnterpriseVoiceVPNModifyPolicyRequest',
        serviceProviderId   => $serviceProviderId,
        locationDialingCode => $locationDialingCode,
        @params
    );
}

sub EnterpriseVoiceVPNModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command( 'EnterpriseVoiceVPNModifyRequest', serviceProviderId => $serviceProviderId, @params );
}

sub GroupAccessDeviceAddRequest14 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;
    my $deviceType        = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupAccessDeviceAddRequest14',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName,
        deviceType        => $deviceType,
        @params
    );
}

sub GroupAccessDeviceCustomTagAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;
    my $tagName           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupAccessDeviceCustomTagAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName,
        tagName           => $tagName,
        @params
    );
}

sub GroupAccessDeviceCustomTagDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupAccessDeviceCustomTagDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName,
        @params
    );
}

sub GroupAccessDeviceCustomTagGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;

    return $self->_send_query(
        'GroupAccessDeviceCustomTagGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName
    );
}

sub GroupAccessDeviceCustomTagModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;
    my $tagName           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupAccessDeviceCustomTagModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName,
        tagName           => $tagName,
        @params
    );
}

sub GroupAccessDeviceDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;

    return $self->_send_command(
        'GroupAccessDeviceDeleteRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName
    );
}

sub GroupAccessDeviceFileGetListRequest14sp8 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;

    return $self->_send_query(
        'GroupAccessDeviceFileGetListRequest14sp8',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName
    );
}

sub GroupAccessDeviceFileGetRequest16sp1 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;
    my $fileFormat        = shift;

    return $self->_send_query(
        'GroupAccessDeviceFileGetRequest16sp1',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName,
        fileFormat        => $fileFormat
    );
}

sub GroupAccessDeviceFileModifyRequest14sp8 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;
    my $fileFormat        = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupAccessDeviceFileModifyRequest14sp8',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName,
        fileFormat        => $fileFormat,
        @params
    );
}

sub GroupAccessDeviceGetEnhancedConfigurationTypeListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupAccessDeviceGetEnhancedConfigurationTypeListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupAccessDeviceGetEnhancedConfigurationTypeRequest14 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceType        = shift;

    return $self->_send_query(
        'GroupAccessDeviceGetEnhancedConfigurationTypeRequest14',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceType        => $deviceType
    );
}

sub GroupAccessDeviceGetAvailableDetailListRequest14 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $isMusicOnHold     = shift;
    my $onlyVideoCapable  = shift;

    return $self->_send_query(
        'GroupAccessDeviceGetAvailableDetailListRequest14',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        isMusicOnHold     => $isMusicOnHold,
        onlyVideoCapable  => $onlyVideoCapable
    );
}

sub GroupAccessDeviceGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupAccessDeviceGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupAccessDeviceGetRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;

    return $self->_send_query(
        'GroupAccessDeviceGetRequest16',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName
    );
}

sub GroupAccessDeviceGetUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupAccessDeviceGetUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName,
        @params
    );
}

sub GroupAccessDeviceModifyRequest14 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupAccessDeviceModifyRequest14',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName,
        @params
    );
}

sub GroupAccessDeviceModifyUserRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;
    my $linePort          = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupAccessDeviceModifyUserRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName,
        linePort          => $linePort,
        @params
    );
}

sub GroupAccessDeviceResetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;

    return $self->_send_command(
        'GroupAccessDeviceResetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName
    );
}

sub GroupApplicationServerSetGetRequest {
    my $self              = shift;
    my $groupId           = shift;
    my $serviceProviderId = shift;

    return $self->_send_query(
        'GroupApplicationServerSetGetRequest',
        groupId           => $groupId,
        serviceProviderId => $serviceProviderId
    );
}

sub GroupApplicationServerSetModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'GroupApplicationServerSetModifyRequest', @params );
}

sub GroupDialableCallerIDCriteriaAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDialableCallerIDCriteriaAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupDialableCallerIDCriteriaDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_command(
        'GroupDialableCallerIDCriteriaDeleteRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupDialableCallerIDCriteriaGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_query(
        'GroupDialableCallerIDCriteriaGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupDialableCallerIDCriteriaModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDialableCallerIDCriteriaModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupDialableCallerIDGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupDialableCallerIDGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupDialableCallerIDModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDialableCallerIDModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $defaultDomain     = shift;
    my $userLimit         = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        defaultDomain     => $defaultDomain,
        userLimit         => $userLimit,
        @params
    );
}

sub GroupAdminAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $userId            = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupAdminAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        userId            => $userId,
        @params
    );
}

sub GroupAdminDeleteRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_command( 'GroupAdminDeleteRequest', userId => $userId );
}

sub GroupAdminGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query( 'GroupAdminGetListRequest', serviceProviderId => $serviceProviderId,
        groupId => $groupId );
}

sub GroupAdminGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'GroupAdminGetRequest', userId => $userId );
}

sub GroupAdminGetPolicyRequest17sp3 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'GroupAdminGetPolicyRequest17sp3', userId => $userId );
}

sub GroupAdminModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'GroupAdminModifyRequest', userId => $userId, @params );
}

sub GroupAdminModifyPolicyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'GroupAdminModifyPolicyRequest', userId => $userId, @params );
}

sub GroupBroadWorksMobileManagerAddRequest {
    my $self                  = shift;
    my $serviceProviderId     = shift;
    my $groupId               = shift;
    my $informationFile       = shift;
    my $certificateFile       = shift;
    my $isActive              = shift;
    my $localToCarrier        = shift;
    my $maxTxPerSecondEnabled = shift;
    my @params                = @_;

    return $self->_send_command(
        'GroupBroadWorksMobileManagerAddRequest',
        serviceProviderId     => $serviceProviderId,
        groupId               => $groupId,
        informationFile       => $informationFile,
        certificateFile       => $certificateFile,
        isActive              => $isActive,
        localToCarrier        => $localToCarrier,
        maxTxPerSecondEnabled => $maxTxPerSecondEnabled,
        @params
    );
}

sub GroupBroadWorksMobileManagerGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupBroadWorksMobileManagerGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupBroadWorksMobileManagerGetDomainListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupBroadWorksMobileManagerGetDomainListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupBroadWorksMobileManagerDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_command(
        'GroupBroadWorksMobileManagerDeleteRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupBroadWorksMobileManagerModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupBroadWorksMobileManagerModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupBroadWorksMobileManagerActivationRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $isActive          = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupBroadWorksMobileManagerActivationRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        isActive          => $isActive,
        @params
    );
}

sub GroupBroadWorksMobileManagerSendCarrierFilesRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $emailTo           = shift;

    return $self->_send_command(
        'GroupBroadWorksMobileManagerSendCarrierFilesRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        emailTo           => $emailTo
    );
}

sub GroupBroadWorksMobileManagerAddHomeZoneRequest {
    my $self               = shift;
    my $serviceProviderId  = shift;
    my $groupId            = shift;
    my $homeZoneDomainName = shift;
    my $mobileCountryCode  = shift;
    my $mobileNetworkCode  = shift;
    my $locationAreaCode   = shift;
    my $cellIdentity       = shift;

    return $self->_send_command(
        'GroupBroadWorksMobileManagerAddHomeZoneRequest',
        serviceProviderId  => $serviceProviderId,
        groupId            => $groupId,
        homeZoneDomainName => $homeZoneDomainName,
        mobileCountryCode  => $mobileCountryCode,
        mobileNetworkCode  => $mobileNetworkCode,
        locationAreaCode   => $locationAreaCode,
        cellIdentity       => $cellIdentity
    );
}

sub GroupBroadWorksMobileManagerGetHomeZoneListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupBroadWorksMobileManagerGetHomeZoneListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupBroadWorksMobileManagerGetHomeZoneRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $homeZoneId        = shift;

    return $self->_send_query(
        'GroupBroadWorksMobileManagerGetHomeZoneRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        homeZoneId        => $homeZoneId
    );
}

sub GroupBroadWorksMobileManagerDeleteHomeZoneRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $homeZoneId        = shift;

    return $self->_send_command(
        'GroupBroadWorksMobileManagerDeleteHomeZoneRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        homeZoneId        => $homeZoneId
    );
}

sub GroupBroadWorksMobileManagerDeleteHomeZoneListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $homeZoneId        = shift;

    return $self->_send_command(
        'GroupBroadWorksMobileManagerDeleteHomeZoneListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        homeZoneId        => $homeZoneId
    );
}

sub GroupBroadWorksMobileManagerModifyHomeZoneRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $homeZoneId        = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupBroadWorksMobileManagerModifyHomeZoneRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        homeZoneId        => $homeZoneId,
        @params
    );
}

sub GroupCallProcessingGetPolicyRequest17sp4 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallProcessingGetPolicyRequest17sp4',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallProcessingModifyPolicyRequest15sp2 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallProcessingModifyPolicyRequest15sp2',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCommonPhoneListAddListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $entry             = shift;

    return $self->_send_command(
        'GroupCommonPhoneListAddListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        entry             => $entry
    );
}

sub GroupCommonPhoneListDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $entryName         = shift;

    return $self->_send_command(
        'GroupCommonPhoneListDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        entryName         => $entryName
    );
}

sub GroupCommonPhoneListGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCommonPhoneListGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCommonPhoneListModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $entryName         = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCommonPhoneListModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        entryName         => $entryName,
        @params
    );
}

sub GroupCommunicationBarringAuthorizationCodeAddListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCommunicationBarringAuthorizationCodeAddListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCommunicationBarringAuthorizationCodeDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCommunicationBarringAuthorizationCodeDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCommunicationBarringAuthorizationCodeGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCommunicationBarringAuthorizationCodeGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCommunicationBarringGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCommunicationBarringGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCommunicationBarringModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCommunicationBarringModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCPEConfigRebuildConfigFileRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceType        = shift;

    return $self->_send_command(
        'GroupCPEConfigRebuildConfigFileRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceType        => $deviceType
    );
}

sub GroupCPEConfigRebuildDeviceConfigFileRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;

    return $self->_send_command(
        'GroupCPEConfigRebuildDeviceConfigFileRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName
    );
}

sub GroupCPEConfigReorderDeviceLinePortsRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCPEConfigReorderDeviceLinePortsRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName,
        @params
    );
}

sub GroupCPEConfigResetDeviceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceName        = shift;

    return $self->_send_command(
        'GroupCPEConfigResetDeviceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceName        => $deviceName
    );
}

sub GroupCPEConfigResetDeviceTypeRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceType        = shift;

    return $self->_send_command(
        'GroupCPEConfigResetDeviceTypeRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceType        => $deviceType
    );
}

sub GroupCPEConfigSetConfigFileRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceType        = shift;
    my $configFile        = shift;

    return $self->_send_command(
        'GroupCPEConfigSetConfigFileRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceType        => $deviceType,
        configFile        => $configFile
    );
}

sub GroupCustomContactDirectoryAddRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCustomContactDirectoryAddRequest17',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupCustomContactDirectoryDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_command(
        'GroupCustomContactDirectoryDeleteRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupCustomContactDirectoryGetAvailableUserListRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCustomContactDirectoryGetAvailableUserListRequest17',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCustomContactDirectoryGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCustomContactDirectoryGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCustomContactDirectoryGetRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCustomContactDirectoryGetRequest17',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupCustomContactDirectoryModifyRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCustomContactDirectoryModifyRequest17',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_command( 'GroupDeleteRequest', serviceProviderId => $serviceProviderId, groupId => $groupId );
}

sub GroupDepartmentAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $departmentName    = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDepartmentAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        departmentName    => $departmentName,
        @params
    );
}

sub GroupDepartmentAdminAddRequest {
    my $self          = shift;
    my $departmentKey = shift;
    my $userId        = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupDepartmentAdminAddRequest',
        departmentKey => $departmentKey,
        userId        => $userId,
        @params
    );
}

sub GroupDepartmentAdminDeleteRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_command( 'GroupDepartmentAdminDeleteRequest', userId => $userId );
}

sub GroupDepartmentAdminGetListRequest {
    my $self          = shift;
    my $departmentKey = shift;

    return $self->_send_query( 'GroupDepartmentAdminGetListRequest', departmentKey => $departmentKey );
}

sub GroupDepartmentAdminGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'GroupDepartmentAdminGetRequest', userId => $userId );
}

sub GroupDepartmentAdminModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'GroupDepartmentAdminModifyRequest', userId => $userId, @params );
}

sub GroupDepartmentDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $departmentName    = shift;

    return $self->_send_command(
        'GroupDepartmentDeleteRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        departmentName    => $departmentName
    );
}

sub GroupDepartmentGetAvailableParentListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $departmentName    = shift;

    return $self->_send_query(
        'GroupDepartmentGetAvailableParentListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        departmentName    => $departmentName
    );
}

sub GroupDepartmentGetListRequest {
    my $self                         = shift;
    my $serviceProviderId            = shift;
    my $groupId                      = shift;
    my $includeEnterpriseDepartments = shift;

    return $self->_send_query(
        'GroupDepartmentGetListRequest',
        serviceProviderId            => $serviceProviderId,
        groupId                      => $groupId,
        includeEnterpriseDepartments => $includeEnterpriseDepartments
    );
}

sub GroupDepartmentModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $departmentName    = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDepartmentModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        departmentName    => $departmentName,
        @params
    );
}

sub GroupDeviceTypeCustomTagAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceType        = shift;
    my $tagName           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDeviceTypeCustomTagAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceType        => $deviceType,
        tagName           => $tagName,
        @params
    );
}

sub GroupDeviceTypeCustomTagDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceType        = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDeviceTypeCustomTagDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceType        => $deviceType,
        @params
    );
}

sub GroupDeviceTypeCustomTagModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceType        = shift;
    my $tagName           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDeviceTypeCustomTagModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceType        => $deviceType,
        tagName           => $tagName,
        @params
    );
}

sub GroupDeviceTypeCustomTagGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceType        = shift;

    return $self->_send_query(
        'GroupDeviceTypeCustomTagGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceType        => $deviceType
    );
}

sub GroupDeviceTypeFileModifyRequest14sp8 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceType        = shift;
    my $fileFormat        = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDeviceTypeFileModifyRequest14sp8',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceType        => $deviceType,
        fileFormat        => $fileFormat,
        @params
    );
}

sub GroupDeviceTypeFileGetListRequest14sp8 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceType        = shift;

    return $self->_send_query(
        'GroupDeviceTypeFileGetListRequest14sp8',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceType        => $deviceType
    );
}

sub GroupDeviceTypeFileGetRequest16sp1 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $deviceType        = shift;
    my $fileFormat        = shift;

    return $self->_send_query(
        'GroupDeviceTypeFileGetRequest16sp1',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        deviceType        => $deviceType,
        fileFormat        => $fileFormat
    );
}

sub GroupDialPlanPolicyGetRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupDialPlanPolicyGetRequest17',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupDialPlanPolicyModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDialPlanPolicyModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupDialPlanPolicyGetAccessCodeListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupDialPlanPolicyGetAccessCodeListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupDialPlanPolicyGetAccessCodeRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $accessCode        = shift;

    return $self->_send_query(
        'GroupDialPlanPolicyGetAccessCodeRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        accessCode        => $accessCode
    );
}

sub GroupDialPlanPolicyAddAccessCodeRequest {
    my $self                                        = shift;
    my $serviceProviderId                           = shift;
    my $groupId                                     = shift;
    my $accessCode                                  = shift;
    my $includeCodeForNetworkTranslationsAndRouting = shift;
    my $includeCodeForScreeningServices             = shift;
    my $enableSecondaryDialTone                     = shift;
    my @params                                      = @_;

    return $self->_send_command(
        'GroupDialPlanPolicyAddAccessCodeRequest',
        serviceProviderId                           => $serviceProviderId,
        groupId                                     => $groupId,
        accessCode                                  => $accessCode,
        includeCodeForNetworkTranslationsAndRouting => $includeCodeForNetworkTranslationsAndRouting,
        includeCodeForScreeningServices             => $includeCodeForScreeningServices,
        enableSecondaryDialTone                     => $enableSecondaryDialTone,
        @params
    );
}

sub GroupDialPlanPolicyDeleteAccessCodeRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $accessCode        = shift;

    return $self->_send_command(
        'GroupDialPlanPolicyDeleteAccessCodeRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        accessCode        => $accessCode
    );
}

sub GroupDialPlanPolicyModifyAccessCodeRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $accessCode        = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDialPlanPolicyModifyAccessCodeRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        accessCode        => $accessCode,
        @params
    );
}

sub GroupDigitCollectionGetRequest13mp4 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupDigitCollectionGetRequest13mp4',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupDigitCollectionModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDigitCollectionModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupDnActivateListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDnActivateListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupDnAssignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDnAssignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupDnDeactivateListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDnDeactivateListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupDnGetActivationListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupDnGetActivationListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupDnGetAssignmentListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupDnGetAssignmentListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupDnGetDetailedAvailableListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupDnGetDetailedAvailableListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupDnGetAvailableListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupDnGetAvailableListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupDnGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query( 'GroupDnGetListRequest', serviceProviderId => $serviceProviderId, groupId => $groupId );
}

sub GroupDnGetSummaryListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupDnGetSummaryListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupDnListAssignDepartmentRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDnListAssignDepartmentRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupDnUnassignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupDnUnassignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupDomainAssignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $domain            = shift;

    return $self->_send_command(
        'GroupDomainAssignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        domain            => $domain
    );
}

sub GroupDomainGetAssignedUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $domain            = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupDomainGetAssignedUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        domain            => $domain,
        @params
    );
}

sub GroupDomainGetAssignedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupDomainGetAssignedListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupDomainUnassignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $domain            = shift;

    return $self->_send_command(
        'GroupDomainUnassignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        domain            => $domain
    );
}

sub GroupEndpointGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupEndpointGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupExistingUsersAssignUserServiceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupExistingUsersAssignUserServiceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupExistingUsersUnassignUserServiceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupExistingUsersUnassignUserServiceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupExtensionLengthGetRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupExtensionLengthGetRequest17',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupExtensionLengthModifyRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupExtensionLengthModifyRequest17',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupFeatureAccessCodeGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupFeatureAccessCodeGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupFeatureAccessCodeModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupFeatureAccessCodeModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupFileRepositoryDeviceUserAddRequest {
    my $self               = shift;
    my $serviceProviderId  = shift;
    my $groupId            = shift;
    my $fileRepositoryName = shift;
    my $userName           = shift;
    my $password           = shift;
    my $allowPut           = shift;
    my $allowDelete        = shift;
    my $allowGet           = shift;

    return $self->_send_command(
        'GroupFileRepositoryDeviceUserAddRequest',
        serviceProviderId  => $serviceProviderId,
        groupId            => $groupId,
        fileRepositoryName => $fileRepositoryName,
        userName           => $userName,
        password           => $password,
        allowPut           => $allowPut,
        allowDelete        => $allowDelete,
        allowGet           => $allowGet
    );
}

sub GroupFileRepositoryDeviceUserDeleteRequest {
    my $self               = shift;
    my $serviceProviderId  = shift;
    my $groupId            = shift;
    my $fileRepositoryName = shift;
    my $userName           = shift;

    return $self->_send_command(
        'GroupFileRepositoryDeviceUserDeleteRequest',
        serviceProviderId  => $serviceProviderId,
        groupId            => $groupId,
        fileRepositoryName => $fileRepositoryName,
        userName           => $userName
    );
}

sub GroupFileRepositoryDeviceUserModifyRequest {
    my $self               = shift;
    my $serviceProviderId  = shift;
    my $groupId            = shift;
    my $fileRepositoryName = shift;
    my $userName           = shift;
    my @params             = @_;

    return $self->_send_command(
        'GroupFileRepositoryDeviceUserModifyRequest',
        serviceProviderId  => $serviceProviderId,
        groupId            => $groupId,
        fileRepositoryName => $fileRepositoryName,
        userName           => $userName,
        @params
    );
}

sub GroupFileRepositoryDeviceUserGetListRequest {
    my $self               = shift;
    my $serviceProviderId  = shift;
    my $groupId            = shift;
    my $fileRepositoryName = shift;

    return $self->_send_query(
        'GroupFileRepositoryDeviceUserGetListRequest',
        serviceProviderId  => $serviceProviderId,
        groupId            => $groupId,
        fileRepositoryName => $fileRepositoryName
    );
}

sub GroupGetDefaultRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'GroupGetDefaultRequest', serviceProviderId => $serviceProviderId );
}

sub GroupGetListInServiceProviderRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query( 'GroupGetListInServiceProviderRequest', serviceProviderId => $serviceProviderId,
        @params );
}

sub GroupGetListInSystemRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'GroupGetListInSystemRequest', @params );
}

sub GroupGetRequest14sp7 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query( 'GroupGetRequest14sp7', serviceProviderId => $serviceProviderId, groupId => $groupId );
}

sub GroupGetUserServiceAssignedUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupGetUserServiceAssignedUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupNetworkClassOfServiceAssignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupNetworkClassOfServiceAssignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupNetworkClassOfServiceAssignToAllUsersRequest {
    my $self                  = shift;
    my $serviceProviderId     = shift;
    my $groupId               = shift;
    my $networkClassOfService = shift;

    return $self->_send_command(
        'GroupNetworkClassOfServiceAssignToAllUsersRequest',
        serviceProviderId     => $serviceProviderId,
        groupId               => $groupId,
        networkClassOfService => $networkClassOfService
    );
}

sub GroupNetworkClassOfServiceGetAssignedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupNetworkClassOfServiceGetAssignedListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupNetworkClassOfServiceGetAssignedUserListRequest {
    my $self                  = shift;
    my $serviceProviderId     = shift;
    my $groupId               = shift;
    my $networkClassOfService = shift;
    my @params                = @_;

    return $self->_send_query(
        'GroupNetworkClassOfServiceGetAssignedUserListRequest',
        serviceProviderId     => $serviceProviderId,
        groupId               => $groupId,
        networkClassOfService => $networkClassOfService,
        @params
    );
}

sub GroupNetworkClassOfServiceModifyDefaultRequest {
    my $self                  = shift;
    my $serviceProviderId     = shift;
    my $groupId               = shift;
    my $networkClassOfService = shift;

    return $self->_send_command(
        'GroupNetworkClassOfServiceModifyDefaultRequest',
        serviceProviderId     => $serviceProviderId,
        groupId               => $groupId,
        networkClassOfService => $networkClassOfService
    );
}

sub GroupNetworkClassOfServiceUnassignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupNetworkClassOfServiceUnassignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupNewUserTemplateAssignUserServiceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupNewUserTemplateAssignUserServiceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupNewUserTemplateUnassignUserServiceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupNewUserTemplateUnassignUserServiceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOfficeZoneAssignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOfficeZoneAssignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOfficeZoneGetAssignedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOfficeZoneGetAssignedListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOfficeZoneGetAssignedUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $officeZoneName    = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupOfficeZoneGetAssignedUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        officeZoneName    => $officeZoneName,
        @params
    );
}

sub GroupOfficeZoneUnassignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOfficeZoneUnassignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupPasswordRulesGetRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupPasswordRulesGetRequest16',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupPasswordRulesModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupPasswordRulesModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupPhoneDirectoryGetListRequest17 {
    my $self                    = shift;
    my $serviceProviderId       = shift;
    my $groupId                 = shift;
    my $isExtendedInfoRequested = shift;
    my @params                  = @_;

    return $self->_send_query(
        'GroupPhoneDirectoryGetListRequest17',
        serviceProviderId       => $serviceProviderId,
        groupId                 => $groupId,
        isExtendedInfoRequested => $isExtendedInfoRequested,
        @params
    );
}

sub GroupPolicyGetRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query( 'GroupPolicyGetRequest17', serviceProviderId => $serviceProviderId,
        groupId => $groupId );
}

sub GroupPolicyModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupPolicyModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupServiceGetAuthorizationListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupServiceGetAuthorizationListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupServiceGetAuthorizedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupServiceGetAuthorizedListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupServiceModifyAuthorizationListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupServiceModifyAuthorizationListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupPortalPasscodeRulesGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupPortalPasscodeRulesGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupPortalPasscodeRulesModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupPortalPasscodeRulesModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupRoutePointExternalSystemAssignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupRoutePointExternalSystemAssignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupRoutePointExternalSystemGetAssignedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupRoutePointExternalSystemGetAssignedListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupRoutePointExternalSystemGetAssignedRoutePointListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $externalSystem    = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupRoutePointExternalSystemGetAssignedRoutePointListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        externalSystem    => $externalSystem,
        @params
    );
}

sub GroupRoutePointExternalSystemUnassignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupRoutePointExternalSystemUnassignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupRoutingProfileGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupRoutingProfileGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupRoutingProfileModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupRoutingProfileModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupScheduleAddEventRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $scheduleKey       = shift;
    my $eventName         = shift;
    my $startDate         = shift;
    my $endDate           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupScheduleAddEventRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        scheduleKey       => $scheduleKey,
        eventName         => $eventName,
        startDate         => $startDate,
        endDate           => $endDate,
        @params
    );
}

sub GroupScheduleAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $scheduleName      = shift;
    my $scheduleType      = shift;

    return $self->_send_command(
        'GroupScheduleAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        scheduleName      => $scheduleName,
        scheduleType      => $scheduleType
    );
}

sub GroupScheduleDeleteEventListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $scheduleKey       = shift;
    my $eventName         = shift;

    return $self->_send_command(
        'GroupScheduleDeleteEventListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        scheduleKey       => $scheduleKey,
        eventName         => $eventName
    );
}

sub GroupScheduleDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $scheduleKey       = shift;

    return $self->_send_command(
        'GroupScheduleDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        scheduleKey       => $scheduleKey
    );
}

sub GroupScheduleGetEventListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $scheduleKey       = shift;

    return $self->_send_query(
        'GroupScheduleGetEventListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        scheduleKey       => $scheduleKey
    );
}

sub GroupScheduleGetEventRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $scheduleKey       = shift;
    my $eventName         = shift;

    return $self->_send_query(
        'GroupScheduleGetEventRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        scheduleKey       => $scheduleKey,
        eventName         => $eventName
    );
}

sub GroupScheduleGetListRequest17sp1 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupScheduleGetListRequest17sp1',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupScheduleModifyEventRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $scheduleKey       = shift;
    my $eventName         = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupScheduleModifyEventRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        scheduleKey       => $scheduleKey,
        eventName         => $eventName,
        @params
    );
}

sub GroupScheduleModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $scheduleKey       = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupScheduleModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        scheduleKey       => $scheduleKey,
        @params
    );
}

sub GroupServiceAssignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $serviceName       = shift;

    return $self->_send_command(
        'GroupServiceAssignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        serviceName       => $serviceName
    );
}

sub GroupServiceIsAssignedRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $serviceName       = shift;

    return $self->_send_query(
        'GroupServiceIsAssignedRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        serviceName       => $serviceName
    );
}

sub GroupServiceUnassignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $serviceName       = shift;

    return $self->_send_command(
        'GroupServiceUnassignListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        serviceName       => $serviceName
    );
}

sub GroupSessionAdmissionControlGetAvailableDeviceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupSessionAdmissionControlGetAvailableDeviceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupSessionAdmissionControlGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupSessionAdmissionControlGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupSessionAdmissionControlModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupSessionAdmissionControlModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupSessionAdmissionControlGroupAddDeviceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupSessionAdmissionControlGroupAddDeviceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupSessionAdmissionControlGroupAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my $maxSession        = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupSessionAdmissionControlGroupAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        maxSession        => $maxSession,
        @params
    );
}

sub GroupSessionAdmissionControlGroupDeleteDeviceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupSessionAdmissionControlGroupDeleteDeviceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupSessionAdmissionControlGroupDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupSessionAdmissionControlGroupDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupSessionAdmissionControlGroupGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupSessionAdmissionControlGroupGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupSessionAdmissionControlGroupGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_query(
        'GroupSessionAdmissionControlGroupGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupSessionAdmissionControlGroupModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupSessionAdmissionControlGroupModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupShInterfaceGetUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupShInterfaceGetUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupTrunkGroupGetAvailableDetailListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupTrunkGroupGetAvailableDetailListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub AuthenticationRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'AuthenticationRequest', userId => $userId );
}

sub AuthenticationVerifyRequest14sp8 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'AuthenticationVerifyRequest14sp8', @params );
}

sub AvailabilityTestRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'AvailabilityTestRequest', @params );
}

sub DeviceManagementFileAuthLocationGetRequest17 {
    my $self                 = shift;
    my $deviceAccessProtocol = shift;
    my $deviceAccessMethod   = shift;
    my $deviceAccessURI      = shift;
    my @params               = @_;

    return $self->_send_query(
        'DeviceManagementFileAuthLocationGetRequest17',
        deviceAccessProtocol => $deviceAccessProtocol,
        deviceAccessMethod   => $deviceAccessMethod,
        deviceAccessURI      => $deviceAccessURI,
        @params
    );
}

sub DeviceManagementPutFileRequest {
    my $self            = shift;
    my $deviceAccessURI = shift;
    my $ipAddress       = shift;

    return $self->_send_command(
        'DeviceManagementPutFileRequest',
        deviceAccessURI => $deviceAccessURI,
        ipAddress       => $ipAddress
    );
}

sub ExternalAuthenticationAuthorizeTokenRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'ExternalAuthenticationAuthorizeTokenRequest', userId => $userId, @params );
}

sub LoginRequest14sp4 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'LoginRequest14sp4', userId => $userId, @params );
}

sub LogoutRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'LogoutRequest', userId => $userId, @params );
}

sub PasswordModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'PasswordModifyRequest', userId => $userId, @params );
}

sub PrimaryInfoGetRequest {
    my $self                   = shift;
    my $isPrivate              = shift;
    my $isAddressInfoRequested = shift;

    return $self->_send_query(
        'PrimaryInfoGetRequest',
        isPrivate              => $isPrivate,
        isAddressInfoRequested => $isAddressInfoRequested
    );
}

sub PublicClusterGetFullyQualifiedDomainNameRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'PublicClusterGetFullyQualifiedDomainNameRequest', @params );
}

sub TutorialFlagGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'TutorialFlagGetRequest', userId => $userId );
}

sub TutorialFlagModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'TutorialFlagModifyRequest', userId => $userId, @params );
}

sub UserGetLoginInfoRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'UserGetLoginInfoRequest', @params );
}

sub VerifySessionIsValidRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'VerifySessionIsValidRequest', @params );
}

sub ServiceProviderAccessDeviceAddRequest14 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;
    my $deviceType        = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderAccessDeviceAddRequest14',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName,
        deviceType        => $deviceType,
        @params
    );
}

sub ServiceProviderAccessDeviceCustomTagAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;
    my $tagName           = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderAccessDeviceCustomTagAddRequest',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName,
        tagName           => $tagName,
        @params
    );
}

sub ServiceProviderAccessDeviceCustomTagDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderAccessDeviceCustomTagDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName,
        @params
    );
}

sub ServiceProviderAccessDeviceCustomTagGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;

    return $self->_send_query(
        'ServiceProviderAccessDeviceCustomTagGetListRequest',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName
    );
}

sub ServiceProviderAccessDeviceCustomTagModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;
    my $tagName           = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderAccessDeviceCustomTagModifyRequest',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName,
        tagName           => $tagName,
        @params
    );
}

sub ServiceProviderAccessDeviceDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;

    return $self->_send_command(
        'ServiceProviderAccessDeviceDeleteRequest',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName
    );
}

sub ServiceProviderAccessDeviceFileModifyRequest14sp8 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;
    my $fileFormat        = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderAccessDeviceFileModifyRequest14sp8',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName,
        fileFormat        => $fileFormat,
        @params
    );
}

sub ServiceProviderAccessDeviceFileGetListRequest14sp8 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;

    return $self->_send_query(
        'ServiceProviderAccessDeviceFileGetListRequest14sp8',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName
    );
}

sub ServiceProviderAccessDeviceFileGetRequest16sp1 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;
    my $fileFormat        = shift;

    return $self->_send_query(
        'ServiceProviderAccessDeviceFileGetRequest16sp1',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName,
        fileFormat        => $fileFormat
    );
}

sub ServiceProviderAccessDeviceGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'ServiceProviderAccessDeviceGetListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderAccessDeviceGetRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;

    return $self->_send_query(
        'ServiceProviderAccessDeviceGetRequest16',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName
    );
}

sub ServiceProviderAccessDeviceGetUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;
    my @params            = @_;

    return $self->_send_query(
        'ServiceProviderAccessDeviceGetUserListRequest',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName,
        @params
    );
}

sub ServiceProviderAccessDeviceModifyRequest14 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderAccessDeviceModifyRequest14',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName,
        @params
    );
}

sub ServiceProviderAccessDeviceModifyUserRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;
    my $linePort          = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderAccessDeviceModifyUserRequest',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName,
        linePort          => $linePort,
        @params
    );
}

sub ServiceProviderAccessDeviceResetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;

    return $self->_send_command(
        'ServiceProviderAccessDeviceResetRequest',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName
    );
}

sub ServiceProviderAddRequest13mp2 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $defaultDomain     = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderAddRequest13mp2',
        serviceProviderId => $serviceProviderId,
        defaultDomain     => $defaultDomain,
        @params
    );
}

sub ServiceProviderAdminAddRequest14 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $userId            = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderAdminAddRequest14',
        serviceProviderId => $serviceProviderId,
        userId            => $userId,
        @params
    );
}

sub ServiceProviderAdminDeleteRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_command( 'ServiceProviderAdminDeleteRequest', userId => $userId );
}

sub ServiceProviderAdminGetListRequest14 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderAdminGetListRequest14', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderAdminGetPolicyRequest17sp3 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'ServiceProviderAdminGetPolicyRequest17sp3', userId => $userId );
}

sub ServiceProviderAdminGetRequest14 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'ServiceProviderAdminGetRequest14', userId => $userId );
}

sub ServiceProviderAdminModifyPolicyRequest14 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'ServiceProviderAdminModifyPolicyRequest14', userId => $userId, @params );
}

sub ServiceProviderAdminModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'ServiceProviderAdminModifyRequest', userId => $userId, @params );
}

sub ServiceProviderAnswerConfirmationGetRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderAnswerConfirmationGetRequest16',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderAnswerConfirmationModifyRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderAnswerConfirmationModifyRequest16',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderCallProcessingGetPolicyRequest17sp4 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderCallProcessingGetPolicyRequest17sp4',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderCallProcessingModifyPolicyRequest15 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderCallProcessingModifyPolicyRequest15',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderCommunicationBarringCriteriaAssignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderCommunicationBarringCriteriaAssignListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderCommunicationBarringCriteriaGetAssignedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderCommunicationBarringCriteriaGetAssignedListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderCommunicationBarringCriteriaUnassignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderCommunicationBarringCriteriaUnassignListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderCommunicationBarringDigitPatternCriteriaAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderCommunicationBarringDigitPatternCriteriaAddRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub ServiceProviderCommunicationBarringDigitPatternCriteriaDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_command(
        'ServiceProviderCommunicationBarringDigitPatternCriteriaDeleteRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub ServiceProviderCommunicationBarringDigitPatternCriteriaGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderCommunicationBarringDigitPatternCriteriaGetListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderCommunicationBarringDigitPatternCriteriaGetPatternListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_query(
        'ServiceProviderCommunicationBarringDigitPatternCriteriaGetPatternListRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub ServiceProviderCommunicationBarringDigitPatternCriteriaGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_query(
        'ServiceProviderCommunicationBarringDigitPatternCriteriaGetRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub ServiceProviderCommunicationBarringDigitPatternCriteriaModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderCommunicationBarringDigitPatternCriteriaModifyRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub ServiceProviderCommunicationBarringProfileAddRequest17sp3 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderCommunicationBarringProfileAddRequest17sp3',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub ServiceProviderCommunicationBarringProfileDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderCommunicationBarringProfileDeleteRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub ServiceProviderCommunicationBarringProfileGetAssignedGroupListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $profile           = shift;
    my @params            = @_;

    return $self->_send_query(
        'ServiceProviderCommunicationBarringProfileGetAssignedGroupListRequest',
        serviceProviderId => $serviceProviderId,
        profile           => $profile,
        @params
    );
}

sub ServiceProviderCommunicationBarringProfileGetCriteriaUsageListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $criteriaName      = shift;

    return $self->_send_query(
        'ServiceProviderCommunicationBarringProfileGetCriteriaUsageListRequest',
        serviceProviderId => $serviceProviderId,
        criteriaName      => $criteriaName
    );
}

sub ServiceProviderCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_query(
        'ServiceProviderCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub ServiceProviderCommunicationBarringProfileGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderCommunicationBarringProfileGetListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderCommunicationBarringProfileGetRequest17sp3 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_query(
        'ServiceProviderCommunicationBarringProfileGetRequest17sp3',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub ServiceProviderCommunicationBarringProfileModifyDefaultRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_command(
        'ServiceProviderCommunicationBarringProfileModifyDefaultRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub ServiceProviderCommunicationBarringProfileModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderCommunicationBarringProfileModifyRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub ServiceProviderCPEConfigRebuildDeviceConfigFileRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;

    return $self->_send_command(
        'ServiceProviderCPEConfigRebuildDeviceConfigFileRequest',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName
    );
}

sub ServiceProviderCPEConfigResetDeviceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;

    return $self->_send_command(
        'ServiceProviderCPEConfigResetDeviceRequest',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName
    );
}

sub ServiceProviderCPEConfigReorderDeviceLinePortsRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $deviceName        = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderCPEConfigReorderDeviceLinePortsRequest',
        serviceProviderId => $serviceProviderId,
        deviceName        => $deviceName,
        @params
    );
}

sub ServiceProviderDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_command( 'ServiceProviderDeleteRequest', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderDialableCallerIDCriteriaAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderDialableCallerIDCriteriaAddRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub ServiceProviderDialableCallerIDCriteriaDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_command(
        'ServiceProviderDialableCallerIDCriteriaDeleteRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub ServiceProviderDialableCallerIDCriteriaGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_query(
        'ServiceProviderDialableCallerIDCriteriaGetRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub ServiceProviderDialableCallerIDCriteriaModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderDialableCallerIDCriteriaModifyRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub ServiceProviderDialableCallerIDGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderDialableCallerIDGetRequest', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderDialableCallerIDModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderDialableCallerIDModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderDialPlanPolicyGetRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderDialPlanPolicyGetRequest17', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderDialPlanPolicyModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderDialPlanPolicyModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderDialPlanPolicyGetAccessCodeListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderDialPlanPolicyGetAccessCodeListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderDialPlanPolicyGetAccessCodeRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $accessCode        = shift;

    return $self->_send_query(
        'ServiceProviderDialPlanPolicyGetAccessCodeRequest',
        serviceProviderId => $serviceProviderId,
        accessCode        => $accessCode
    );
}

sub ServiceProviderDialPlanPolicyAddAccessCodeRequest {
    my $self                                        = shift;
    my $serviceProviderId                           = shift;
    my $accessCode                                  = shift;
    my $includeCodeForNetworkTranslationsAndRouting = shift;
    my $includeCodeForScreeningServices             = shift;
    my $enableSecondaryDialTone                     = shift;
    my @params                                      = @_;

    return $self->_send_command(
        'ServiceProviderDialPlanPolicyAddAccessCodeRequest',
        serviceProviderId                           => $serviceProviderId,
        accessCode                                  => $accessCode,
        includeCodeForNetworkTranslationsAndRouting => $includeCodeForNetworkTranslationsAndRouting,
        includeCodeForScreeningServices             => $includeCodeForScreeningServices,
        enableSecondaryDialTone                     => $enableSecondaryDialTone,
        @params
    );
}

sub ServiceProviderDialPlanPolicyDeleteAccessCodeRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $accessCode        = shift;

    return $self->_send_command(
        'ServiceProviderDialPlanPolicyDeleteAccessCodeRequest',
        serviceProviderId => $serviceProviderId,
        accessCode        => $accessCode
    );
}

sub ServiceProviderDialPlanPolicyModifyAccessCodeRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $accessCode        = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderDialPlanPolicyModifyAccessCodeRequest',
        serviceProviderId => $serviceProviderId,
        accessCode        => $accessCode,
        @params
    );
}

sub ServiceProviderDigitCollectionGetRequest13mp4 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderDigitCollectionGetRequest13mp4',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderDigitCollectionModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderDigitCollectionModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderDnAddListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command( 'ServiceProviderDnAddListRequest', serviceProviderId => $serviceProviderId, @params );
}

sub ServiceProviderDnDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command( 'ServiceProviderDnDeleteListRequest', serviceProviderId => $serviceProviderId,
        @params );
}

sub ServiceProviderDnGetAvailableListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderDnGetAvailableListRequest', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderDnGetSummaryListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderDnGetSummaryListRequest', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderDomainAssignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $domain            = shift;

    return $self->_send_command(
        'ServiceProviderDomainAssignListRequest',
        serviceProviderId => $serviceProviderId,
        domain            => $domain
    );
}

sub ServiceProviderDomainGetAssignedGroupListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $domain            = shift;
    my @params            = @_;

    return $self->_send_query(
        'ServiceProviderDomainGetAssignedGroupListRequest',
        serviceProviderId => $serviceProviderId,
        domain            => $domain,
        @params
    );
}

sub ServiceProviderDomainGetAssignedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderDomainGetAssignedListRequest', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderDomainUnassignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $domain            = shift;

    return $self->_send_command(
        'ServiceProviderDomainUnassignListRequest',
        serviceProviderId => $serviceProviderId,
        domain            => $domain
    );
}

sub ServiceProviderEndpointGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query( 'ServiceProviderEndpointGetListRequest', serviceProviderId => $serviceProviderId,
        @params );
}

sub ServiceProviderFeatureAccessCodeGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderFeatureAccessCodeGetListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderFeatureAccessCodeModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderFeatureAccessCodeModifyListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderFileRepositoryDeviceUserAddRequest {
    my $self               = shift;
    my $serviceProviderId  = shift;
    my $fileRepositoryName = shift;
    my $userName           = shift;
    my $password           = shift;
    my $allowPut           = shift;
    my $allowDelete        = shift;
    my $allowGet           = shift;

    return $self->_send_command(
        'ServiceProviderFileRepositoryDeviceUserAddRequest',
        serviceProviderId  => $serviceProviderId,
        fileRepositoryName => $fileRepositoryName,
        userName           => $userName,
        password           => $password,
        allowPut           => $allowPut,
        allowDelete        => $allowDelete,
        allowGet           => $allowGet
    );
}

sub ServiceProviderFileRepositoryDeviceUserDeleteRequest {
    my $self               = shift;
    my $serviceProviderId  = shift;
    my $fileRepositoryName = shift;
    my $userName           = shift;

    return $self->_send_command(
        'ServiceProviderFileRepositoryDeviceUserDeleteRequest',
        serviceProviderId  => $serviceProviderId,
        fileRepositoryName => $fileRepositoryName,
        userName           => $userName
    );
}

sub ServiceProviderFileRepositoryDeviceUserModifyRequest {
    my $self               = shift;
    my $serviceProviderId  = shift;
    my $fileRepositoryName = shift;
    my $userName           = shift;
    my @params             = @_;

    return $self->_send_command(
        'ServiceProviderFileRepositoryDeviceUserModifyRequest',
        serviceProviderId  => $serviceProviderId,
        fileRepositoryName => $fileRepositoryName,
        userName           => $userName,
        @params
    );
}

sub ServiceProviderFileRepositoryDeviceUserGetListRequest {
    my $self               = shift;
    my $serviceProviderId  = shift;
    my $fileRepositoryName = shift;

    return $self->_send_query(
        'ServiceProviderFileRepositoryDeviceUserGetListRequest',
        serviceProviderId  => $serviceProviderId,
        fileRepositoryName => $fileRepositoryName
    );
}

sub ServiceProviderGetDefaultRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'ServiceProviderGetDefaultRequest', @params );
}

sub ServiceProviderGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'ServiceProviderGetListRequest', @params );
}

sub ServiceProviderGetRequest17sp1 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderGetRequest17sp1', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command( 'ServiceProviderModifyRequest', serviceProviderId => $serviceProviderId, @params );
}

sub ServiceProviderNetworkClassOfServiceModifyDefaultRequest {
    my $self                  = shift;
    my $serviceProviderId     = shift;
    my $networkClassOfService = shift;

    return $self->_send_command(
        'ServiceProviderNetworkClassOfServiceModifyDefaultRequest',
        serviceProviderId     => $serviceProviderId,
        networkClassOfService => $networkClassOfService
    );
}

sub ServiceProviderNetworkClassOfServiceAssignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderNetworkClassOfServiceAssignListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderNetworkClassOfServiceAssignListToAllGroupsRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderNetworkClassOfServiceAssignListToAllGroupsRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderNetworkClassOfServiceAssignToAllUsersRequest {
    my $self                  = shift;
    my $serviceProviderId     = shift;
    my $networkClassOfService = shift;

    return $self->_send_command(
        'ServiceProviderNetworkClassOfServiceAssignToAllUsersRequest',
        serviceProviderId     => $serviceProviderId,
        networkClassOfService => $networkClassOfService
    );
}

sub ServiceProviderNetworkClassOfServiceGetAssignedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderNetworkClassOfServiceGetAssignedListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderNetworkClassOfServiceGetAssignedGroupListRequest {
    my $self                  = shift;
    my $serviceProviderId     = shift;
    my $networkClassOfService = shift;
    my @params                = @_;

    return $self->_send_query(
        'ServiceProviderNetworkClassOfServiceGetAssignedGroupListRequest',
        serviceProviderId     => $serviceProviderId,
        networkClassOfService => $networkClassOfService,
        @params
    );
}

sub ServiceProviderNetworkClassOfServiceUnassignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderNetworkClassOfServiceUnassignListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderOfficeZoneAssignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderOfficeZoneAssignListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderOfficeZoneGetAssignedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderOfficeZoneGetAssignedListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderOfficeZoneGetAssignedGroupListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $officeZoneName    = shift;
    my @params            = @_;

    return $self->_send_query(
        'ServiceProviderOfficeZoneGetAssignedGroupListRequest',
        serviceProviderId => $serviceProviderId,
        officeZoneName    => $officeZoneName,
        @params
    );
}

sub ServiceProviderOfficeZoneUnassignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderOfficeZoneUnassignListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderPortalPasscodeRulesGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderPortalPasscodeRulesGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderPortalPasscodeRulesModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderPortalPasscodeRulesModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderPasswordRulesGetRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderPasswordRulesGetRequest16', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderPasswordRulesModifyRequest14sp3 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderPasswordRulesModifyRequest14sp3',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderRoutePointExternalSystemAssignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderRoutePointExternalSystemAssignListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderRoutePointExternalSystemGetAssignedGroupListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $externalSystem    = shift;
    my @params            = @_;

    return $self->_send_query(
        'ServiceProviderRoutePointExternalSystemGetAssignedGroupListRequest',
        serviceProviderId => $serviceProviderId,
        externalSystem    => $externalSystem,
        @params
    );
}

sub ServiceProviderRoutePointExternalSystemGetAssignedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderRoutePointExternalSystemGetAssignedListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderRoutePointExternalSystemUnassignListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderRoutePointExternalSystemUnassignListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderRoutingProfileGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderRoutingProfileGetRequest', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderRoutingProfileModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderRoutingProfileModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderScheduleAddEventRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $scheduleKey       = shift;
    my $eventName         = shift;
    my $startDate         = shift;
    my $endDate           = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderScheduleAddEventRequest',
        serviceProviderId => $serviceProviderId,
        scheduleKey       => $scheduleKey,
        eventName         => $eventName,
        startDate         => $startDate,
        endDate           => $endDate,
        @params
    );
}

sub ServiceProviderScheduleAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $scheduleName      = shift;
    my $scheduleType      = shift;

    return $self->_send_command(
        'ServiceProviderScheduleAddRequest',
        serviceProviderId => $serviceProviderId,
        scheduleName      => $scheduleName,
        scheduleType      => $scheduleType
    );
}

sub ServiceProviderScheduleDeleteEventListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $scheduleKey       = shift;
    my $eventName         = shift;

    return $self->_send_command(
        'ServiceProviderScheduleDeleteEventListRequest',
        serviceProviderId => $serviceProviderId,
        scheduleKey       => $scheduleKey,
        eventName         => $eventName
    );
}

sub ServiceProviderScheduleDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $scheduleKey       = shift;

    return $self->_send_command(
        'ServiceProviderScheduleDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        scheduleKey       => $scheduleKey
    );
}

sub ServiceProviderScheduleGetEventListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $scheduleKey       = shift;

    return $self->_send_query(
        'ServiceProviderScheduleGetEventListRequest',
        serviceProviderId => $serviceProviderId,
        scheduleKey       => $scheduleKey
    );
}

sub ServiceProviderScheduleGetEventRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $scheduleKey       = shift;
    my $eventName         = shift;

    return $self->_send_query(
        'ServiceProviderScheduleGetEventRequest',
        serviceProviderId => $serviceProviderId,
        scheduleKey       => $scheduleKey,
        eventName         => $eventName
    );
}

sub ServiceProviderScheduleGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query( 'ServiceProviderScheduleGetListRequest', serviceProviderId => $serviceProviderId,
        @params );
}

sub ServiceProviderScheduleModifyEventRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $scheduleKey       = shift;
    my $eventName         = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderScheduleModifyEventRequest',
        serviceProviderId => $serviceProviderId,
        scheduleKey       => $scheduleKey,
        eventName         => $eventName,
        @params
    );
}

sub ServiceProviderScheduleModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $scheduleKey       = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderScheduleModifyRequest',
        serviceProviderId => $serviceProviderId,
        scheduleKey       => $scheduleKey,
        @params
    );
}

sub ServiceProviderServiceGetAuthorizationListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderServiceGetAuthorizationListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderServiceGetUserAssignableListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderServiceGetUserAssignableListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderServiceModifyAuthorizationListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderServiceModifyAuthorizationListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderServicePackAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $servicePackName   = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderServicePackAddRequest',
        serviceProviderId => $serviceProviderId,
        servicePackName   => $servicePackName,
        @params
    );
}

sub ServiceProviderServicePackAddServiceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $servicePackName   = shift;
    my $serviceName       = shift;

    return $self->_send_command(
        'ServiceProviderServicePackAddServiceListRequest',
        serviceProviderId => $serviceProviderId,
        servicePackName   => $servicePackName,
        serviceName       => $serviceName
    );
}

sub ServiceProviderServicePackDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $servicePackName   = shift;

    return $self->_send_command(
        'ServiceProviderServicePackDeleteRequest',
        serviceProviderId => $serviceProviderId,
        servicePackName   => $servicePackName
    );
}

sub ServiceProviderServicePackGetDetailListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $servicePackName   = shift;

    return $self->_send_query(
        'ServiceProviderServicePackGetDetailListRequest',
        serviceProviderId => $serviceProviderId,
        servicePackName   => $servicePackName
    );
}

sub ServiceProviderServicePackGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderServicePackGetListRequest', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderServicePackGetServiceUsageListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $serviceName       = shift;

    return $self->_send_query(
        'ServiceProviderServicePackGetServiceUsageListRequest',
        serviceProviderId => $serviceProviderId,
        serviceName       => $serviceName
    );
}

sub ServiceProviderServicePackGetUtilizationListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderServicePackGetUtilizationListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderServicePackMigrationTaskAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $taskName          = shift;
    my $startTimestamp    = shift;
    my $maxDurationHours  = shift;
    my $sendReportEmail   = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderServicePackMigrationTaskAddRequest',
        serviceProviderId => $serviceProviderId,
        taskName          => $taskName,
        startTimestamp    => $startTimestamp,
        maxDurationHours  => $maxDurationHours,
        sendReportEmail   => $sendReportEmail,
        @params
    );
}

sub ServiceProviderServicePackMigrationTaskCopyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $taskName          = shift;

    return $self->_send_command(
        'ServiceProviderServicePackMigrationTaskCopyRequest',
        serviceProviderId => $serviceProviderId,
        taskName          => $taskName
    );
}

sub ServiceProviderServicePackMigrationTaskDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $taskName          = shift;

    return $self->_send_command(
        'ServiceProviderServicePackMigrationTaskDeleteRequest',
        serviceProviderId => $serviceProviderId,
        taskName          => $taskName
    );
}

sub ServiceProviderServicePackMigrationTaskGetAvailableGroupListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'ServiceProviderServicePackMigrationTaskGetAvailableGroupListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderServicePackMigrationTaskGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderServicePackMigrationTaskGetListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderServicePackMigrationTaskGetRequest14sp4 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $taskName          = shift;

    return $self->_send_query(
        'ServiceProviderServicePackMigrationTaskGetRequest14sp4',
        serviceProviderId => $serviceProviderId,
        taskName          => $taskName
    );
}

sub ServiceProviderServicePackMigrationTaskModifyAssignmentListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $taskName          = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderServicePackMigrationTaskModifyAssignmentListRequest',
        serviceProviderId => $serviceProviderId,
        taskName          => $taskName,
        @params
    );
}

sub ServiceProviderServicePackMigrationTaskModifyGroupListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $taskName          = shift;

    return $self->_send_command(
        'ServiceProviderServicePackMigrationTaskModifyGroupListRequest',
        serviceProviderId => $serviceProviderId,
        taskName          => $taskName
    );
}

sub ServiceProviderServicePackMigrationTaskModifyRemovalListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $taskName          = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderServicePackMigrationTaskModifyRemovalListRequest',
        serviceProviderId => $serviceProviderId,
        taskName          => $taskName,
        @params
    );
}

sub ServiceProviderServicePackMigrationTaskModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $taskName          = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderServicePackMigrationTaskModifyRequest',
        serviceProviderId => $serviceProviderId,
        taskName          => $taskName,
        @params
    );
}

sub ServiceProviderServicePackMigrationTaskModifyUserSelectionRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $taskName          = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderServicePackMigrationTaskModifyUserSelectionRequest',
        serviceProviderId => $serviceProviderId,
        taskName          => $taskName,
        @params
    );
}

sub ServiceProviderServicePackMigrationTaskTerminateRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $taskName          = shift;

    return $self->_send_command(
        'ServiceProviderServicePackMigrationTaskTerminateRequest',
        serviceProviderId => $serviceProviderId,
        taskName          => $taskName
    );
}

sub ServiceProviderServicePackModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $servicePackName   = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderServicePackModifyRequest',
        serviceProviderId => $serviceProviderId,
        servicePackName   => $servicePackName,
        @params
    );
}

sub ServiceProviderSessionAdmissionControlGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderSessionAdmissionControlGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderSessionAdmissionControlModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderSessionAdmissionControlModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderLanguageAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $language          = shift;

    return $self->_send_command(
        'ServiceProviderLanguageAddRequest',
        serviceProviderId => $serviceProviderId,
        language          => $language
    );
}

sub ServiceProviderLanguageModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $language          = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderLanguageModifyRequest',
        serviceProviderId => $serviceProviderId,
        language          => $language,
        @params
    );
}

sub ServiceProviderLanguageDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $language          = shift;

    return $self->_send_command(
        'ServiceProviderLanguageDeleteRequest',
        serviceProviderId => $serviceProviderId,
        language          => $language
    );
}

sub ServiceProviderLanguageGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderLanguageGetListRequest', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderLanguageGetAvailableListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderLanguageGetAvailableListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderApplicationServerSetModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderApplicationServerSetModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderApplicationServerSetGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderApplicationServerSetGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub SystemAccessDeviceAddRequest {
    my $self       = shift;
    my $deviceName = shift;
    my $deviceType = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemAccessDeviceAddRequest',
        deviceName => $deviceName,
        deviceType => $deviceType,
        @params
    );
}

sub SystemAccessDeviceCustomTagAddRequest {
    my $self       = shift;
    my $deviceName = shift;
    my $tagName    = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemAccessDeviceCustomTagAddRequest',
        deviceName => $deviceName,
        tagName    => $tagName,
        @params
    );
}

sub SystemAccessDeviceCustomTagDeleteListRequest {
    my $self       = shift;
    my $deviceName = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemAccessDeviceCustomTagDeleteListRequest', deviceName => $deviceName, @params );
}

sub SystemAccessDeviceCustomTagGetListRequest {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_query( 'SystemAccessDeviceCustomTagGetListRequest', deviceName => $deviceName );
}

sub SystemAccessDeviceCustomTagModifyRequest {
    my $self       = shift;
    my $deviceName = shift;
    my $tagName    = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemAccessDeviceCustomTagModifyRequest',
        deviceName => $deviceName,
        tagName    => $tagName,
        @params
    );
}

sub SystemAccessDeviceDeleteRequest {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_command( 'SystemAccessDeviceDeleteRequest', deviceName => $deviceName );
}

sub SystemAccessDeviceFileModifyRequest14sp8 {
    my $self       = shift;
    my $deviceName = shift;
    my $fileFormat = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemAccessDeviceFileModifyRequest14sp8',
        deviceName => $deviceName,
        fileFormat => $fileFormat,
        @params
    );
}

sub SystemAccessDeviceFileGetListRequest14sp8 {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_query( 'SystemAccessDeviceFileGetListRequest14sp8', deviceName => $deviceName );
}

sub SystemAccessDeviceFileGetRequest16sp1 {
    my $self       = shift;
    my $deviceName = shift;
    my $fileFormat = shift;

    return $self->_send_query(
        'SystemAccessDeviceFileGetRequest16sp1',
        deviceName => $deviceName,
        fileFormat => $fileFormat
    );
}

sub SystemAccessDeviceGetAllRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAccessDeviceGetAllRequest', @params );
}

sub SystemAccessDeviceGetListRequest14 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAccessDeviceGetListRequest14', @params );
}

sub SystemAccessDeviceGetRequest16 {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_query( 'SystemAccessDeviceGetRequest16', deviceName => $deviceName );
}

sub SystemAccessDeviceGetUserListRequest {
    my $self       = shift;
    my $deviceName = shift;
    my @params     = @_;

    return $self->_send_query( 'SystemAccessDeviceGetUserListRequest', deviceName => $deviceName, @params );
}

sub SystemAccessDeviceModifyRequest {
    my $self       = shift;
    my $deviceName = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemAccessDeviceModifyRequest', deviceName => $deviceName, @params );
}

sub SystemAccessDeviceModifyUserRequest {
    my $self       = shift;
    my $deviceName = shift;
    my $linePort   = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemAccessDeviceModifyUserRequest',
        deviceName => $deviceName,
        linePort   => $linePort,
        @params
    );
}

sub SystemAccessDeviceMonitorAddDeviceTypeRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAccessDeviceMonitorAddDeviceTypeRequest', @params );
}

sub SystemAccessDeviceMonitorDeleteDeviceTypeRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAccessDeviceMonitorDeleteDeviceTypeRequest', @params );
}

sub SystemAccessDeviceMonitorGetDeviceTypeListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAccessDeviceMonitorGetDeviceTypeListRequest', @params );
}

sub SystemAccessDeviceMonitorParametersGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAccessDeviceMonitorParametersGetRequest', @params );
}

sub SystemAccessDeviceMonitorParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAccessDeviceMonitorParametersModifyRequest', @params );
}

sub SystemAccessDeviceResetRequest {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_command( 'SystemAccessDeviceResetRequest', deviceName => $deviceName );
}

sub SystemAccessDeviceTypeGetEnhancedConfigurableListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAccessDeviceTypeGetEnhancedConfigurableListRequest', @params );
}

sub SystemAccessDeviceTypeGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAccessDeviceTypeGetListRequest', @params );
}

sub SystemAccountingAddChargingFunctionElementServerRequest {
    my $self                 = shift;
    my $address              = shift;
    my $isNetAddressExtended = shift;
    my $type                 = shift;
    my @params               = @_;

    return $self->_send_command(
        'SystemAccountingAddChargingFunctionElementServerRequest',
        address              => $address,
        isNetAddressExtended => $isNetAddressExtended,
        type                 => $type,
        @params
    );
}

sub SystemAccountingAddRadiusServerRequest {
    my $self       = shift;
    my $netAddress = shift;
    my $port       = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemAccountingAddRadiusServerRequest',
        netAddress => $netAddress,
        port       => $port,
        @params
    );
}

sub SystemAccountingDeleteChargingFunctionElementServerRequest {
    my $self    = shift;
    my $address = shift;

    return $self->_send_command( 'SystemAccountingDeleteChargingFunctionElementServerRequest', address => $address );
}

sub SystemAccountingDeleteRadiusServerRequest {
    my $self       = shift;
    my $netAddress = shift;
    my $port       = shift;

    return $self->_send_command( 'SystemAccountingDeleteRadiusServerRequest', netAddress => $netAddress,
        port => $port );
}

sub SystemAccountingGetChargingFunctionElementServerListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAccountingGetChargingFunctionElementServerListRequest', @params );
}

sub SystemAccountingGetRadiusServerListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAccountingGetRadiusServerListRequest', @params );
}

sub SystemAccountingModifyChargingFunctionElementServerRequest {
    my $self    = shift;
    my $address = shift;
    my @params  = @_;

    return $self->_send_command(
        'SystemAccountingModifyChargingFunctionElementServerRequest',
        address => $address,
        @params
    );
}

sub SystemAccountingModifyRadiusServerRequest {
    my $self       = shift;
    my $netAddress = shift;
    my $port       = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemAccountingModifyRadiusServerRequest',
        netAddress => $netAddress,
        port       => $port,
        @params
    );
}

sub SystemAccountingReorderChargingFunctionElementServerRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAccountingReorderChargingFunctionElementServerRequest', @params );
}

sub SystemAdminAddRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAdminAddRequest', userId => $userId, @params );
}

sub SystemAdminDeleteRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_command( 'SystemAdminDeleteRequest', userId => $userId );
}

sub SystemAdminGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAdminGetListRequest', @params );
}

sub SystemAdminGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'SystemAdminGetRequest', userId => $userId );
}

sub SystemAdminModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAdminModifyRequest', userId => $userId, @params );
}

sub SystemAliasAddRequest {
    my $self            = shift;
    my $aliasNetAddress = shift;

    return $self->_send_command( 'SystemAliasAddRequest', aliasNetAddress => $aliasNetAddress );
}

sub SystemAliasDeleteRequest {
    my $self            = shift;
    my $aliasNetAddress = shift;

    return $self->_send_command( 'SystemAliasDeleteRequest', aliasNetAddress => $aliasNetAddress );
}

sub SystemAliasGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAliasGetListRequest', @params );
}

sub SystemApplicationControllerAddRequest {
    my $self         = shift;
    my $name         = shift;
    my $subscriberId = shift;
    my $channelSetId = shift;

    return $self->_send_command(
        'SystemApplicationControllerAddRequest',
        name         => $name,
        subscriberId => $subscriberId,
        channelSetId => $channelSetId
    );
}

sub SystemApplicationControllerDeleteRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemApplicationControllerDeleteRequest', name => $name );
}

sub SystemApplicationControllerGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemApplicationControllerGetListRequest', @params );
}

sub SystemApplicationServerSetDeleteRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemApplicationServerSetDeleteRequest', name => $name );
}

sub SystemApplicationServerSetGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemApplicationServerSetGetListRequest', @params );
}

sub SystemApplicationServerSetGetUsageRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemApplicationServerSetGetUsageRequest', name => $name );
}

sub SystemASRParametersGetRequest14sp7 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemASRParametersGetRequest14sp7', @params );
}

sub SystemASRParametersModifyRequest14sp7 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemASRParametersModifyRequest14sp7', @params );
}

sub SystemBroadWorksMobileManagerGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemBroadWorksMobileManagerGetRequest', @params );
}

sub SystemBroadWorksMobileManagerModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemBroadWorksMobileManagerModifyRequest', @params );
}

sub SystemBwDiameterBaseDataGetRequest17sp3 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemBwDiameterBaseDataGetRequest17sp3', @params );
}

sub SystemBwDiameterBaseDataModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemBwDiameterBaseDataModifyRequest', @params );
}

sub SystemBwDiameterPeerAddRequest {
    my $self     = shift;
    my $instance = shift;
    my $identity = shift;
    my @params   = @_;

    return $self->_send_command( 'SystemBwDiameterPeerAddRequest', instance => $instance, identity => $identity,
        @params );
}

sub SystemBwDiameterPeerDeleteRequest {
    my $self     = shift;
    my $instance = shift;
    my $identity = shift;

    return $self->_send_command( 'SystemBwDiameterPeerDeleteRequest', instance => $instance, identity => $identity );
}

sub SystemBwDiameterPeerGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemBwDiameterPeerGetListRequest', @params );
}

sub SystemBwDiameterPeerModifyRequest {
    my $self     = shift;
    my $instance = shift;
    my $identity = shift;
    my @params   = @_;

    return $self->_send_command(
        'SystemBwDiameterPeerModifyRequest',
        instance => $instance,
        identity => $identity,
        @params
    );
}

sub SystemBwDiameterRoutingRealmAddRequest {
    my $self          = shift;
    my $instance      = shift;
    my $realm         = shift;
    my $applicationId = shift;
    my $default       = shift;

    return $self->_send_command(
        'SystemBwDiameterRoutingRealmAddRequest',
        instance      => $instance,
        realm         => $realm,
        applicationId => $applicationId,
        default       => $default
    );
}

sub SystemBwDiameterRoutingRealmDeleteRequest {
    my $self          = shift;
    my $instance      = shift;
    my $realm         = shift;
    my $applicationId = shift;

    return $self->_send_command(
        'SystemBwDiameterRoutingRealmDeleteRequest',
        instance      => $instance,
        realm         => $realm,
        applicationId => $applicationId
    );
}

sub SystemBwDiameterRoutingRealmGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemBwDiameterRoutingRealmGetListRequest', @params );
}

sub SystemBwDiameterRoutingRealmModifyRequest {
    my $self          = shift;
    my $instance      = shift;
    my $realm         = shift;
    my $applicationId = shift;
    my @params        = @_;

    return $self->_send_command(
        'SystemBwDiameterRoutingRealmModifyRequest',
        instance      => $instance,
        realm         => $realm,
        applicationId => $applicationId,
        @params
    );
}

sub SystemBwDiameterRoutingPeerAddRequest {
    my $self          = shift;
    my $instance      = shift;
    my $realm         = shift;
    my $applicationId = shift;
    my $identity      = shift;
    my $priority      = shift;
    my $weight        = shift;

    return $self->_send_command(
        'SystemBwDiameterRoutingPeerAddRequest',
        instance      => $instance,
        realm         => $realm,
        applicationId => $applicationId,
        identity      => $identity,
        priority      => $priority,
        weight        => $weight
    );
}

sub SystemBwDiameterRoutingPeerDeleteRequest {
    my $self          = shift;
    my $instance      = shift;
    my $realm         = shift;
    my $applicationId = shift;
    my $identity      = shift;

    return $self->_send_command(
        'SystemBwDiameterRoutingPeerDeleteRequest',
        instance      => $instance,
        realm         => $realm,
        applicationId => $applicationId,
        identity      => $identity
    );
}

sub SystemBwDiameterRoutingPeerGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemBwDiameterRoutingPeerGetListRequest', @params );
}

sub SystemBwDiameterRoutingPeerModifyRequest {
    my $self          = shift;
    my $instance      = shift;
    my $realm         = shift;
    my $applicationId = shift;
    my $identity      = shift;
    my @params        = @_;

    return $self->_send_command(
        'SystemBwDiameterRoutingPeerModifyRequest',
        instance      => $instance,
        realm         => $realm,
        applicationId => $applicationId,
        identity      => $identity,
        @params
    );
}

sub SystemCallProcessingGetPolicyRequest17sp4 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallProcessingGetPolicyRequest17sp4', @params );
}

sub SystemCallProcessingModifyPolicyRequest15 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallProcessingModifyPolicyRequest15', @params );
}

sub SystemCAPAddACLEntryRequest14 {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemCAPAddACLEntryRequest14', netAddress => $netAddress, @params );
}

sub SystemCAPDeleteACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemCAPDeleteACLEntryRequest', netAddress => $netAddress );
}

sub SystemCAPGetACLListRequest14 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCAPGetACLListRequest14', @params );
}

sub SystemCAPModifyACLEntryRequest14 {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemCAPModifyACLEntryRequest14', netAddress => $netAddress, @params );
}

sub SystemCAPParametersGetRequest14sp3 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCAPParametersGetRequest14sp3', @params );
}

sub SystemCAPParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCAPParametersModifyRequest', @params );
}

sub SystemClientSessionParametersGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemClientSessionParametersGetRequest', @params );
}

sub SystemClientSessionParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemClientSessionParametersModifyRequest', @params );
}

sub SystemCodecAddRequest {
    my $self  = shift;
    my $codec = shift;

    return $self->_send_command( 'SystemCodecAddRequest', codec => $codec );
}

sub SystemCodecDeleteRequest {
    my $self  = shift;
    my $codec = shift;

    return $self->_send_command( 'SystemCodecDeleteRequest', codec => $codec );
}

sub SystemCodecGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCodecGetListRequest', @params );
}

sub SystemCommunicationBarringAlternateCallIndicatorAddRequest {
    my $self                                = shift;
    my $alternateCallIndicator              = shift;
    my $networkServerAlternateCallIndicator = shift;

    return $self->_send_command(
        'SystemCommunicationBarringAlternateCallIndicatorAddRequest',
        alternateCallIndicator              => $alternateCallIndicator,
        networkServerAlternateCallIndicator => $networkServerAlternateCallIndicator
    );
}

sub SystemCommunicationBarringAlternateCallIndicatorDeleteRequest {
    my $self                   = shift;
    my $alternateCallIndicator = shift;

    return $self->_send_command(
        'SystemCommunicationBarringAlternateCallIndicatorDeleteRequest',
        alternateCallIndicator => $alternateCallIndicator
    );
}

sub SystemCommunicationBarringAlternateCallIndicatorGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCommunicationBarringAlternateCallIndicatorGetListRequest', @params );
}

sub SystemCommunicationBarringAlternateCallIndicatorModifyRequest {
    my $self                   = shift;
    my $alternateCallIndicator = shift;
    my @params                 = @_;

    return $self->_send_command(
        'SystemCommunicationBarringAlternateCallIndicatorModifyRequest',
        alternateCallIndicator => $alternateCallIndicator,
        @params
    );
}

sub SystemCommunicationBarringCallTypeAddRequest {
    my $self                  = shift;
    my $callType              = shift;
    my $networkServerCallType = shift;

    return $self->_send_command(
        'SystemCommunicationBarringCallTypeAddRequest',
        callType              => $callType,
        networkServerCallType => $networkServerCallType
    );
}

sub SystemCommunicationBarringCallTypeDeleteRequest {
    my $self     = shift;
    my $callType = shift;

    return $self->_send_command( 'SystemCommunicationBarringCallTypeDeleteRequest', callType => $callType );
}

sub SystemCommunicationBarringCallTypeGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCommunicationBarringCallTypeGetListRequest', @params );
}

sub SystemCommunicationBarringCallTypeModifyRequest {
    my $self     = shift;
    my $callType = shift;
    my @params   = @_;

    return $self->_send_command( 'SystemCommunicationBarringCallTypeModifyRequest', callType => $callType, @params );
}

sub SystemCommunicationBarringCriteriaAddRequest17 {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCommunicationBarringCriteriaAddRequest17', name => $name, @params );
}

sub SystemCommunicationBarringCriteriaDeleteRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemCommunicationBarringCriteriaDeleteRequest', name => $name );
}

sub SystemCommunicationBarringCriteriaGetRequest17 {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemCommunicationBarringCriteriaGetRequest17', name => $name );
}

sub SystemCommunicationBarringCriteriaGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCommunicationBarringCriteriaGetListRequest', @params );
}

sub SystemCommunicationBarringCriteriaModifyRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCommunicationBarringCriteriaModifyRequest', name => $name, @params );
}

sub SystemCommunicationBarringDigitPatternCriteriaAddRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCommunicationBarringDigitPatternCriteriaAddRequest', name => $name, @params );
}

sub SystemCommunicationBarringDigitPatternCriteriaDeleteRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemCommunicationBarringDigitPatternCriteriaDeleteRequest', name => $name );
}

sub SystemCommunicationBarringDigitPatternCriteriaGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCommunicationBarringDigitPatternCriteriaGetListRequest', @params );
}

sub SystemCommunicationBarringDigitPatternCriteriaGetPatternListRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_query(
        'SystemCommunicationBarringDigitPatternCriteriaGetPatternListRequest',
        name => $name,
        @params
    );
}

sub SystemCommunicationBarringDigitPatternCriteriaGetRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemCommunicationBarringDigitPatternCriteriaGetRequest', name => $name );
}

sub SystemCommunicationBarringDigitPatternCriteriaModifyRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCommunicationBarringDigitPatternCriteriaModifyRequest', name => $name,
        @params );
}

sub SystemCommunicationBarringGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCommunicationBarringGetRequest', @params );
}

sub SystemCommunicationBarringModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCommunicationBarringModifyRequest', @params );
}

sub SystemCommunicationBarringProfileAddRequest17sp3 {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCommunicationBarringProfileAddRequest17sp3', name => $name, @params );
}

sub SystemCommunicationBarringProfileDeleteRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemCommunicationBarringProfileDeleteRequest', name => $name );
}

sub SystemCommunicationBarringProfileGetCriteriaUsageListRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemCommunicationBarringProfileGetCriteriaUsageListRequest', name => $name );
}

sub SystemCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest',
        name => $name );
}

sub SystemCommunicationBarringProfileGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCommunicationBarringProfileGetListRequest', @params );
}

sub SystemCommunicationBarringProfileGetRequest17sp3 {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemCommunicationBarringProfileGetRequest17sp3', name => $name );
}

sub SystemCommunicationBarringProfileModifyRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCommunicationBarringProfileModifyRequest', name => $name, @params );
}

sub SystemCommunicationBarringServiceProviderGetCriteriaUsageListRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemCommunicationBarringServiceProviderGetCriteriaUsageListRequest', name => $name );
}

sub SystemConfigurableFileSystemGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemConfigurableFileSystemGetRequest', @params );
}

sub SystemConfigurableFileSystemModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemConfigurableFileSystemModifyRequest', @params );
}

sub SystemConfigurableTreatmentAddRequest {
    my $self            = shift;
    my $treatmentId     = shift;
    my $chargeIndicator = shift;
    my @params          = @_;

    return $self->_send_command(
        'SystemConfigurableTreatmentAddRequest',
        treatmentId     => $treatmentId,
        chargeIndicator => $chargeIndicator,
        @params
    );
}

sub SystemConfigurableTreatmentDeleteRequest {
    my $self        = shift;
    my $treatmentId = shift;

    return $self->_send_command( 'SystemConfigurableTreatmentDeleteRequest', treatmentId => $treatmentId );
}

sub SystemConfigurableTreatmentGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemConfigurableTreatmentGetListRequest', @params );
}

sub SystemConfigurableTreatmentGetRequest16 {
    my $self        = shift;
    my $treatmentId = shift;

    return $self->_send_query( 'SystemConfigurableTreatmentGetRequest16', treatmentId => $treatmentId );
}

sub SystemConfigurableTreatmentModifyRequest {
    my $self        = shift;
    my $treatmentId = shift;
    my @params      = @_;

    return $self->_send_command( 'SystemConfigurableTreatmentModifyRequest', treatmentId => $treatmentId, @params );
}

sub SystemTreatmentMappingAccessSIPStatusAddRequest {
    my $self          = shift;
    my $sipStatusCode = shift;
    my $treatmentId   = shift;

    return $self->_send_command(
        'SystemTreatmentMappingAccessSIPStatusAddRequest',
        sipStatusCode => $sipStatusCode,
        treatmentId   => $treatmentId
    );
}

sub SystemTreatmentMappingAccessSIPStatusDeleteRequest {
    my $self          = shift;
    my $sipStatusCode = shift;

    return $self->_send_command( 'SystemTreatmentMappingAccessSIPStatusDeleteRequest',
        sipStatusCode => $sipStatusCode );
}

sub SystemTreatmentMappingAccessSIPStatusGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemTreatmentMappingAccessSIPStatusGetListRequest', @params );
}

sub SystemTreatmentMappingAccessSIPStatusModifyRequest {
    my $self          = shift;
    my $sipStatusCode = shift;
    my @params        = @_;

    return $self->_send_command(
        'SystemTreatmentMappingAccessSIPStatusModifyRequest',
        sipStatusCode => $sipStatusCode,
        @params
    );
}

sub SystemTreatmentMappingCallBlockingServiceAddRequest {
    my $self                = shift;
    my $callBlockingService = shift;
    my $treatmentId         = shift;

    return $self->_send_command(
        'SystemTreatmentMappingCallBlockingServiceAddRequest',
        callBlockingService => $callBlockingService,
        treatmentId         => $treatmentId
    );
}

sub SystemTreatmentMappingCallBlockingServiceDeleteRequest {
    my $self                = shift;
    my $callBlockingService = shift;

    return $self->_send_command( 'SystemTreatmentMappingCallBlockingServiceDeleteRequest',
        callBlockingService => $callBlockingService );
}

sub SystemTreatmentMappingCallBlockingServiceGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemTreatmentMappingCallBlockingServiceGetListRequest', @params );
}

sub SystemTreatmentMappingCallBlockingServiceModifyRequest {
    my $self                = shift;
    my $callBlockingService = shift;
    my @params              = @_;

    return $self->_send_command(
        'SystemTreatmentMappingCallBlockingServiceModifyRequest',
        callBlockingService => $callBlockingService,
        @params
    );
}

sub SystemTreatmentMappingInternalReleaseCauseAddRequest {
    my $self                 = shift;
    my $internalReleaseCause = shift;
    my $treatmentId          = shift;

    return $self->_send_command(
        'SystemTreatmentMappingInternalReleaseCauseAddRequest',
        internalReleaseCause => $internalReleaseCause,
        treatmentId          => $treatmentId
    );
}

sub SystemTreatmentMappingInternalReleaseCauseDeleteRequest {
    my $self                 = shift;
    my $internalReleaseCause = shift;

    return $self->_send_command( 'SystemTreatmentMappingInternalReleaseCauseDeleteRequest',
        internalReleaseCause => $internalReleaseCause );
}

sub SystemTreatmentMappingInternalReleaseCauseGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemTreatmentMappingInternalReleaseCauseGetListRequest', @params );
}

sub SystemTreatmentMappingInternalReleaseCauseModifyRequest {
    my $self                 = shift;
    my $internalReleaseCause = shift;
    my @params               = @_;

    return $self->_send_command(
        'SystemTreatmentMappingInternalReleaseCauseModifyRequest',
        internalReleaseCause => $internalReleaseCause,
        @params
    );
}

sub SystemTreatmentMappingNetworkServerTreatmentAddRequest {
    my $self        = shift;
    my $nsTreatment = shift;
    my $treatmentId = shift;

    return $self->_send_command(
        'SystemTreatmentMappingNetworkServerTreatmentAddRequest',
        nsTreatment => $nsTreatment,
        treatmentId => $treatmentId
    );
}

sub SystemTreatmentMappingNetworkServerTreatmentDeleteRequest {
    my $self        = shift;
    my $nsTreatment = shift;

    return $self->_send_command( 'SystemTreatmentMappingNetworkServerTreatmentDeleteRequest',
        nsTreatment => $nsTreatment );
}

sub SystemTreatmentMappingNetworkServerTreatmentGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemTreatmentMappingNetworkServerTreatmentGetListRequest', @params );
}

sub SystemTreatmentMappingNetworkServerTreatmentModifyRequest {
    my $self        = shift;
    my $nsTreatment = shift;
    my @params      = @_;

    return $self->_send_command(
        'SystemTreatmentMappingNetworkServerTreatmentModifyRequest',
        nsTreatment => $nsTreatment,
        @params
    );
}

sub SystemTreatmentMappingNetworkSIPStatusAddRequest {
    my $self          = shift;
    my $sipStatusCode = shift;
    my $treatmentId   = shift;

    return $self->_send_command(
        'SystemTreatmentMappingNetworkSIPStatusAddRequest',
        sipStatusCode => $sipStatusCode,
        treatmentId   => $treatmentId
    );
}

sub SystemTreatmentMappingNetworkSIPStatusDeleteRequest {
    my $self          = shift;
    my $sipStatusCode = shift;

    return $self->_send_command( 'SystemTreatmentMappingNetworkSIPStatusDeleteRequest',
        sipStatusCode => $sipStatusCode );
}

sub SystemTreatmentMappingNetworkSIPStatusGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemTreatmentMappingNetworkSIPStatusGetListRequest', @params );
}

sub SystemTreatmentMappingNetworkSIPStatusModifyRequest {
    my $self          = shift;
    my $sipStatusCode = shift;
    my @params        = @_;

    return $self->_send_command(
        'SystemTreatmentMappingNetworkSIPStatusModifyRequest',
        sipStatusCode => $sipStatusCode,
        @params
    );
}

sub SystemTreatmentMappingQ850CauseAddRequest {
    my $self           = shift;
    my $q850CauseValue = shift;
    my $treatmentId    = shift;

    return $self->_send_command(
        'SystemTreatmentMappingQ850CauseAddRequest',
        q850CauseValue => $q850CauseValue,
        treatmentId    => $treatmentId
    );
}

sub SystemTreatmentMappingQ850CauseDeleteRequest {
    my $self           = shift;
    my $q850CauseValue = shift;

    return $self->_send_command( 'SystemTreatmentMappingQ850CauseDeleteRequest', q850CauseValue => $q850CauseValue );
}

sub SystemTreatmentMappingQ850CauseGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemTreatmentMappingQ850CauseGetListRequest', @params );
}

sub SystemTreatmentMappingQ850CauseModifyRequest {
    my $self           = shift;
    my $q850CauseValue = shift;
    my @params         = @_;

    return $self->_send_command(
        'SystemTreatmentMappingQ850CauseModifyRequest',
        q850CauseValue => $q850CauseValue,
        @params
    );
}

sub SystemCountryCodeAddRequest {
    my $self        = shift;
    my $countryCode = shift;
    my $countryName = shift;
    my @params      = @_;

    return $self->_send_command(
        'SystemCountryCodeAddRequest',
        countryCode => $countryCode,
        countryName => $countryName,
        @params
    );
}

sub SystemCountryCodeDeleteRequest {
    my $self        = shift;
    my $countryCode = shift;

    return $self->_send_command( 'SystemCountryCodeDeleteRequest', countryCode => $countryCode );
}

sub SystemCountryCodeGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCountryCodeGetListRequest', @params );
}

sub SystemCountryCodeModifyRequest {
    my $self        = shift;
    my $countryCode = shift;
    my @params      = @_;

    return $self->_send_command( 'SystemCountryCodeModifyRequest', countryCode => $countryCode, @params );
}

sub SystemCallTypeAddMappingRequest {
    my $self        = shift;
    my $countryCode = shift;
    my $digitMap    = shift;
    my $callType    = shift;

    return $self->_send_command(
        'SystemCallTypeAddMappingRequest',
        countryCode => $countryCode,
        digitMap    => $digitMap,
        callType    => $callType
    );
}

sub SystemCallTypeDeleteMappingRequest {
    my $self        = shift;
    my $countryCode = shift;
    my $digitMap    = shift;

    return $self->_send_command(
        'SystemCallTypeDeleteMappingRequest',
        countryCode => $countryCode,
        digitMap    => $digitMap
    );
}

sub SystemCallTypeGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallTypeGetListRequest', @params );
}

sub SystemCallTypeGetMappingListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallTypeGetMappingListRequest', @params );
}

sub SystemCPEConfigAddFileServerRequest14sp6 {
    my $self               = shift;
    my $deviceType         = shift;
    my $fileRepositoryName = shift;
    my @params             = @_;

    return $self->_send_command(
        'SystemCPEConfigAddFileServerRequest14sp6',
        deviceType         => $deviceType,
        fileRepositoryName => $fileRepositoryName,
        @params
    );
}

sub SystemCPEConfigDeleteFileServerRequest {
    my $self       = shift;
    my $deviceType = shift;

    return $self->_send_command( 'SystemCPEConfigDeleteFileServerRequest', deviceType => $deviceType );
}

sub SystemCPEConfigGetFileServerListRequest14sp6 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCPEConfigGetFileServerListRequest14sp6', @params );
}

sub SystemCPEConfigModifyFileServerRequest14sp6 {
    my $self       = shift;
    my $deviceType = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemCPEConfigModifyFileServerRequest14sp6', deviceType => $deviceType, @params );
}

sub SystemCPEConfigParametersGetRequest14sp6 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCPEConfigParametersGetRequest14sp6', @params );
}

sub SystemCPEConfigParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCPEConfigParametersModifyRequest', @params );
}

sub SystemCPEConfigRebuildConfigFileRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCPEConfigRebuildConfigFileRequest', @params );
}

sub SystemCPEConfigRebuildDeviceConfigFileRequest {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_command( 'SystemCPEConfigRebuildDeviceConfigFileRequest', deviceName => $deviceName );
}

sub SystemCPEConfigResetDeviceRequest {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_command( 'SystemCPEConfigResetDeviceRequest', deviceName => $deviceName );
}

sub SystemCPEConfigResetDeviceTypeRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCPEConfigResetDeviceTypeRequest', @params );
}

sub SystemCPEConfigReorderDeviceLinePortsRequest {
    my $self       = shift;
    my $deviceName = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemCPEConfigReorderDeviceLinePortsRequest', deviceName => $deviceName, @params );
}

sub SystemCPEConfigSetConfigFileRequest {
    my $self       = shift;
    my $deviceType = shift;
    my $configFile = shift;

    return $self->_send_command(
        'SystemCPEConfigSetConfigFileRequest',
        deviceType => $deviceType,
        configFile => $configFile
    );
}

sub SystemDeviceManagementTagAddRequest {
    my $self    = shift;
    my $tagName = shift;
    my @params  = @_;

    return $self->_send_command( 'SystemDeviceManagementTagAddRequest', tagName => $tagName, @params );
}

sub SystemDeviceManagementTagDeleteListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemDeviceManagementTagDeleteListRequest', @params );
}

sub SystemDeviceManagementTagGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemDeviceManagementTagGetListRequest', @params );
}

sub SystemDeviceManagementTagModifyRequest {
    my $self    = shift;
    my $tagName = shift;
    my @params  = @_;

    return $self->_send_command( 'SystemDeviceManagementTagModifyRequest', tagName => $tagName, @params );
}

sub SystemDeviceManagementTagSetAddRequest {
    my $self       = shift;
    my $tagSetName = shift;

    return $self->_send_command( 'SystemDeviceManagementTagSetAddRequest', tagSetName => $tagSetName );
}

sub SystemDeviceManagementTagSetModifyRequest {
    my $self       = shift;
    my $tagSetName = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemDeviceManagementTagSetModifyRequest', tagSetName => $tagSetName, @params );
}

sub SystemDeviceManagementTagSetDeleteRequest {
    my $self       = shift;
    my $tagSetName = shift;

    return $self->_send_command( 'SystemDeviceManagementTagSetDeleteRequest', tagSetName => $tagSetName );
}

sub SystemDeviceManagementTagSetGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemDeviceManagementTagSetGetListRequest', @params );
}

sub SystemDeviceTypeExportRequest {
    my $self       = shift;
    my $deviceType = shift;

    return $self->_send_query( 'SystemDeviceTypeExportRequest', deviceType => $deviceType );
}

sub SystemDeviceTypeImportRequest {
    my $self = shift;
    my $file = shift;

    return $self->_send_command( 'SystemDeviceTypeImportRequest', file => $file );
}

sub SystemDeviceTypeGetAvailableListRequest14sp3 {
    my $self                  = shift;
    my $allowConference       = shift;
    my $allowMusicOnHold      = shift;
    my $onlyConference        = shift;
    my $onlyVideoCapable      = shift;
    my $onlyOptionalIpAddress = shift;

    return $self->_send_query(
        'SystemDeviceTypeGetAvailableListRequest14sp3',
        allowConference       => $allowConference,
        allowMusicOnHold      => $allowMusicOnHold,
        onlyConference        => $onlyConference,
        onlyVideoCapable      => $onlyVideoCapable,
        onlyOptionalIpAddress => $onlyOptionalIpAddress
    );
}

sub SystemDeviceTypeGetRequest16sp1 {
    my $self       = shift;
    my $deviceType = shift;

    return $self->_send_query( 'SystemDeviceTypeGetRequest16sp1', deviceType => $deviceType );
}

sub SystemDialableCallerIDCriteriaAddRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemDialableCallerIDCriteriaAddRequest', name => $name, @params );
}

sub SystemDialableCallerIDCriteriaDeleteRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemDialableCallerIDCriteriaDeleteRequest', name => $name );
}

sub SystemDialableCallerIDCriteriaGetRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemDialableCallerIDCriteriaGetRequest', name => $name );
}

sub SystemDialableCallerIDCriteriaModifyRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemDialableCallerIDCriteriaModifyRequest', name => $name, @params );
}

sub SystemDialableCallerIDGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemDialableCallerIDGetRequest', @params );
}

sub SystemDialableCallerIDModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemDialableCallerIDModifyRequest', @params );
}

sub SystemDialPlanPolicyGetRequest17 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemDialPlanPolicyGetRequest17', @params );
}

sub SystemDialPlanPolicyModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemDialPlanPolicyModifyRequest', @params );
}

sub SystemDialPlanPolicyGetAccessCodeListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemDialPlanPolicyGetAccessCodeListRequest', @params );
}

sub SystemDialPlanPolicyGetAccessCodeRequest {
    my $self       = shift;
    my $accessCode = shift;

    return $self->_send_query( 'SystemDialPlanPolicyGetAccessCodeRequest', accessCode => $accessCode );
}

sub SystemDialPlanPolicyAddAccessCodeRequest {
    my $self                                        = shift;
    my $accessCode                                  = shift;
    my $includeCodeForNetworkTranslationsAndRouting = shift;
    my $includeCodeForScreeningServices             = shift;
    my $enableSecondaryDialTone                     = shift;
    my @params                                      = @_;

    return $self->_send_command(
        'SystemDialPlanPolicyAddAccessCodeRequest',
        accessCode                                  => $accessCode,
        includeCodeForNetworkTranslationsAndRouting => $includeCodeForNetworkTranslationsAndRouting,
        includeCodeForScreeningServices             => $includeCodeForScreeningServices,
        enableSecondaryDialTone                     => $enableSecondaryDialTone,
        @params
    );
}

sub SystemDialPlanPolicyDeleteAccessCodeRequest {
    my $self       = shift;
    my $accessCode = shift;

    return $self->_send_command( 'SystemDialPlanPolicyDeleteAccessCodeRequest', accessCode => $accessCode );
}

sub SystemDialPlanPolicyModifyAccessCodeRequest {
    my $self       = shift;
    my $accessCode = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemDialPlanPolicyModifyAccessCodeRequest', accessCode => $accessCode, @params );
}

sub SystemDigitCollectionGetRequest13mp4 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemDigitCollectionGetRequest13mp4', @params );
}

sub SystemDigitCollectionModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemDigitCollectionModifyRequest', @params );
}

sub SystemDnGetSummaryListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemDnGetSummaryListRequest', @params );
}

sub SystemDnGetUtilizationListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemDnGetUtilizationListRequest', @params );
}

sub SystemDnGetUtilizationRequest14sp3 {
    my $self        = shift;
    my $phoneNumber = shift;

    return $self->_send_query( 'SystemDnGetUtilizationRequest14sp3', phoneNumber => $phoneNumber );
}

sub SystemDomainAddRequest {
    my $self   = shift;
    my $domain = shift;

    return $self->_send_command( 'SystemDomainAddRequest', domain => $domain );
}

sub SystemDomainDeleteRequest {
    my $self   = shift;
    my $domain = shift;

    return $self->_send_command( 'SystemDomainDeleteRequest', domain => $domain );
}

sub SystemDomainGetAssignedServiceProviderListRequest {
    my $self   = shift;
    my $domain = shift;

    return $self->_send_query( 'SystemDomainGetAssignedServiceProviderListRequest', domain => $domain );
}

sub SystemDomainGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemDomainGetListRequest', @params );
}

sub SystemDomainParametersGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemDomainParametersGetRequest', @params );
}

sub SystemDomainParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemDomainParametersModifyRequest', @params );
}

sub SystemDTMFTransmissionGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemDTMFTransmissionGetRequest', @params );
}

sub SystemDTMFTransmissionModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemDTMFTransmissionModifyRequest', @params );
}

sub SystemEndpointGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemEndpointGetListRequest', @params );
}

sub SystemExpensiveCallNotificationGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemExpensiveCallNotificationGetRequest', @params );
}

sub SystemExpensiveCallNotificationModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemExpensiveCallNotificationModifyRequest', @params );
}

sub SystemExpensiveCallTypeAddRequest {
    my $self                   = shift;
    my $alternateCallIndicator = shift;
    my @params                 = @_;

    return $self->_send_command(
        'SystemExpensiveCallTypeAddRequest',
        alternateCallIndicator => $alternateCallIndicator,
        @params
    );
}

sub SystemExpensiveCallTypeDeleteRequest {
    my $self                   = shift;
    my $alternateCallIndicator = shift;

    return $self->_send_command( 'SystemExpensiveCallTypeDeleteRequest',
        alternateCallIndicator => $alternateCallIndicator );
}

sub SystemExpensiveCallTypeGetListRequest16sp1 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemExpensiveCallTypeGetListRequest16sp1', @params );
}

sub SystemExpensiveCallTypeModifyRequest {
    my $self                   = shift;
    my $alternateCallIndicator = shift;

    return $self->_send_command( 'SystemExpensiveCallTypeModifyRequest',
        alternateCallIndicator => $alternateCallIndicator );
}

sub SystemExportAddressingDataRequest {
    my $self     = shift;
    my $fileName = shift;

    return $self->_send_command( 'SystemExportAddressingDataRequest', fileName => $fileName );
}

sub SystemExtensionLengthGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemExtensionLengthGetRequest', @params );
}

sub SystemExtensionLengthModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemExtensionLengthModifyRequest', @params );
}

sub SystemExternalAuthenticationAddACLEntryRequest14sp2 {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemExternalAuthenticationAddACLEntryRequest14sp2',
        netAddress => $netAddress,
        @params
    );
}

sub SystemExternalAuthenticationDeleteACLEntryRequest14sp2 {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemExternalAuthenticationDeleteACLEntryRequest14sp2', netAddress => $netAddress );
}

sub SystemExternalAuthenticationGetACLListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemExternalAuthenticationGetACLListRequest', @params );
}

sub SystemExternalAuthenticationModifyACLEntryRequest14sp2 {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemExternalAuthenticationModifyACLEntryRequest14sp2',
        netAddress => $netAddress,
        @params
    );
}

sub SystemExternalEmergencyRoutingParametersGetRequest13mp13 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemExternalEmergencyRoutingParametersGetRequest13mp13', @params );
}

sub SystemExternalEmergencyRoutingParametersModifyRequest13mp13 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemExternalEmergencyRoutingParametersModifyRequest13mp13', @params );
}

sub SystemFeatureAccessCodeGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemFeatureAccessCodeGetListRequest', @params );
}

sub SystemFeatureAccessCodeModifyListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemFeatureAccessCodeModifyListRequest', @params );
}

sub SystemFileGetContentRequest {
    my $self     = shift;
    my $fileName = shift;

    return $self->_send_query( 'SystemFileGetContentRequest', fileName => $fileName );
}

sub SystemFileRepositoryDeviceAddRequest16 {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemFileRepositoryDeviceAddRequest16', name => $name, @params );
}

sub SystemFileRepositoryDeviceDeleteRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemFileRepositoryDeviceDeleteRequest', name => $name );
}

sub SystemFileRepositoryDeviceModifyRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemFileRepositoryDeviceModifyRequest', name => $name, @params );
}

sub SystemFileRepositoryDeviceGetRequest16 {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemFileRepositoryDeviceGetRequest16', name => $name );
}

sub SystemFileRepositoryDeviceGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemFileRepositoryDeviceGetListRequest', @params );
}

sub SystemFileRepositoryDeviceUserAddRequest {
    my $self               = shift;
    my $fileRepositoryName = shift;
    my $userName           = shift;
    my $password           = shift;
    my $allowPut           = shift;
    my $allowDelete        = shift;
    my $allowGet           = shift;

    return $self->_send_command(
        'SystemFileRepositoryDeviceUserAddRequest',
        fileRepositoryName => $fileRepositoryName,
        userName           => $userName,
        password           => $password,
        allowPut           => $allowPut,
        allowDelete        => $allowDelete,
        allowGet           => $allowGet
    );
}

sub SystemFileRepositoryDeviceUserDeleteRequest {
    my $self               = shift;
    my $fileRepositoryName = shift;
    my $userName           = shift;

    return $self->_send_command(
        'SystemFileRepositoryDeviceUserDeleteRequest',
        fileRepositoryName => $fileRepositoryName,
        userName           => $userName
    );
}

sub SystemFileRepositoryDeviceUserModifyRequest {
    my $self               = shift;
    my $fileRepositoryName = shift;
    my $userName           = shift;
    my @params             = @_;

    return $self->_send_command(
        'SystemFileRepositoryDeviceUserModifyRequest',
        fileRepositoryName => $fileRepositoryName,
        userName           => $userName,
        @params
    );
}

sub SystemFileRepositoryDeviceUserGetRequest {
    my $self               = shift;
    my $fileRepositoryName = shift;
    my $userName           = shift;

    return $self->_send_query(
        'SystemFileRepositoryDeviceUserGetRequest',
        fileRepositoryName => $fileRepositoryName,
        userName           => $userName
    );
}

sub SystemFileRepositoryDeviceUserGetListRequest {
    my $self               = shift;
    my $fileRepositoryName = shift;

    return $self->_send_query( 'SystemFileRepositoryDeviceUserGetListRequest',
        fileRepositoryName => $fileRepositoryName );
}

sub SystemGetRegistrationContactListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemGetRegistrationContactListRequest', @params );
}

sub SystemHomeNetworkAddRequest {
    my $self       = shift;
    my $mscAddress = shift;

    return $self->_send_command( 'SystemHomeNetworkAddRequest', mscAddress => $mscAddress );
}

sub SystemHomeNetworkDeleteRequest {
    my $self       = shift;
    my $mscAddress = shift;

    return $self->_send_command( 'SystemHomeNetworkDeleteRequest', mscAddress => $mscAddress );
}

sub SystemHomeNetworkGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemHomeNetworkGetListRequest', @params );
}

sub SystemLanguageAddRequest {
    my $self     = shift;
    my $language = shift;
    my $locale   = shift;
    my $encoding = shift;

    return $self->_send_command(
        'SystemLanguageAddRequest',
        language => $language,
        locale   => $locale,
        encoding => $encoding
    );
}

sub SystemLanguageDeleteRequest {
    my $self     = shift;
    my $language = shift;

    return $self->_send_command( 'SystemLanguageDeleteRequest', language => $language );
}

sub SystemLanguageGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemLanguageGetListRequest', @params );
}

sub SystemLanguageModifyRequest {
    my $self     = shift;
    my $language = shift;
    my @params   = @_;

    return $self->_send_command( 'SystemLanguageModifyRequest', language => $language, @params );
}

sub SystemLicensingGetRequest14sp3 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemLicensingGetRequest14sp3', @params );
}

sub SystemLicensingGetSystemLicenseListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemLicensingGetSystemLicenseListRequest', @params );
}

sub SystemLicensingReloadRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemLicensingReloadRequest', @params );
}

sub SystemLogConfigModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemLogConfigModifyRequest', @params );
}

sub SystemMailParametersGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemMailParametersGetRequest', @params );
}

sub SystemMailParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemMailParametersModifyRequest', @params );
}

sub SystemMediaAddRequest16 {
    my $self                     = shift;
    my $mediaName                = shift;
    my $codecName                = shift;
    my $mediaType                = shift;
    my $bandwidthEnforcementType = shift;
    my @params                   = @_;

    return $self->_send_command(
        'SystemMediaAddRequest16',
        mediaName                => $mediaName,
        codecName                => $codecName,
        mediaType                => $mediaType,
        bandwidthEnforcementType => $bandwidthEnforcementType,
        @params
    );
}

sub SystemMediaDeleteRequest {
    my $self      = shift;
    my $mediaName = shift;

    return $self->_send_command( 'SystemMediaDeleteRequest', mediaName => $mediaName );
}

sub SystemMediaGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemMediaGetListRequest', @params );
}

sub SystemMediaModifyRequest {
    my $self      = shift;
    my $mediaName = shift;
    my @params    = @_;

    return $self->_send_command( 'SystemMediaModifyRequest', mediaName => $mediaName, @params );
}

sub SystemMediaServerAddRequest14 {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemMediaServerAddRequest14', netAddress => $netAddress, @params );
}

sub SystemMediaServerDeleteRequest {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemMediaServerDeleteRequest', netAddress => $netAddress );
}

sub SystemMediaServerGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemMediaServerGetListRequest', @params );
}

sub SystemMediaServerModifyRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemMediaServerModifyRequest', netAddress => $netAddress, @params );
}

sub SystemMediaServerParametersGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemMediaServerParametersGetRequest', @params );
}

sub SystemMediaServerParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemMediaServerParametersModifyRequest', @params );
}

sub SystemMediaSetAddRequest {
    my $self    = shift;
    my $setName = shift;
    my @params  = @_;

    return $self->_send_command( 'SystemMediaSetAddRequest', setName => $setName, @params );
}

sub SystemMediaSetDeleteRequest {
    my $self    = shift;
    my $setName = shift;

    return $self->_send_command( 'SystemMediaSetDeleteRequest', setName => $setName );
}

sub SystemMediaSetGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemMediaSetGetListRequest', @params );
}

sub SystemMediaSetGetRequest {
    my $self    = shift;
    my $setName = shift;

    return $self->_send_query( 'SystemMediaSetGetRequest', setName => $setName );
}

sub SystemMediaSetModifyRequest {
    my $self    = shift;
    my $setName = shift;
    my @params  = @_;

    return $self->_send_command( 'SystemMediaSetModifyRequest', setName => $setName, @params );
}

sub SystemMGCPDeviceTypeGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemMGCPDeviceTypeGetListRequest', @params );
}

sub SystemMGCPDeviceTypeGetRequest {
    my $self       = shift;
    my $deviceType = shift;

    return $self->_send_query( 'SystemMGCPDeviceTypeGetRequest', deviceType => $deviceType );
}

sub SystemMGCPDeviceTypeModifyRequest {
    my $self       = shift;
    my $deviceType = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemMGCPDeviceTypeModifyRequest', deviceType => $deviceType, @params );
}

sub SystemMigratedUsersGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemMigratedUsersGetListRequest', @params );
}

sub SystemMultimediaPolicyGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemMultimediaPolicyGetRequest', @params );
}

sub SystemMultimediaPolicyModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemMultimediaPolicyModifyRequest', @params );
}

sub SystemNetworkClassOfServiceAddRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemNetworkClassOfServiceAddRequest', name => $name, @params );
}

sub SystemNetworkClassOfServiceDeleteRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemNetworkClassOfServiceDeleteRequest', name => $name );
}

sub SystemNetworkClassOfServiceGetRequest17 {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemNetworkClassOfServiceGetRequest17', name => $name );
}

sub SystemNetworkClassOfServiceGetAssignedServiceProviderListRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemNetworkClassOfServiceGetAssignedServiceProviderListRequest', name => $name );
}

sub SystemNetworkClassOfServiceGetCommunicationBarringProfileUsageListRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemNetworkClassOfServiceGetCommunicationBarringProfileUsageListRequest',
        name => $name );
}

sub SystemNetworkClassOfServiceGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemNetworkClassOfServiceGetListRequest', @params );
}

sub SystemNetworkClassOfServiceModifyRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemNetworkClassOfServiceModifyRequest', name => $name, @params );
}

sub SystemNetworkDeviceMonitorParametersGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemNetworkDeviceMonitorParametersGetRequest', @params );
}

sub SystemNetworkDeviceMonitorParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemNetworkDeviceMonitorParametersModifyRequest', @params );
}

sub SystemNetworkProgressionGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemNetworkProgressionGetRequest', @params );
}

sub SystemNetworkProgressionModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemNetworkProgressionModifyRequest', @params );
}

sub SystemNetworkRoutingServerAddRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemNetworkRoutingServerAddRequest', netAddress => $netAddress, @params );
}

sub SystemNetworkRoutingServerDeleteRequest {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemNetworkRoutingServerDeleteRequest', netAddress => $netAddress );
}

sub SystemNetworkRoutingServerGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemNetworkRoutingServerGetListRequest', @params );
}

sub SystemNetworkRoutingServerModifyRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemNetworkRoutingServerModifyRequest', netAddress => $netAddress, @params );
}

sub SystemNetworkServerSyncParametersGetRequest17sp4 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemNetworkServerSyncParametersGetRequest17sp4', @params );
}

sub SystemNetworkServerSyncParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemNetworkServerSyncParametersModifyRequest', @params );
}

sub SystemNetworkSynchingServerAddRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemNetworkSynchingServerAddRequest', netAddress => $netAddress, @params );
}

sub SystemNetworkSynchingServerDeleteRequest {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemNetworkSynchingServerDeleteRequest', netAddress => $netAddress );
}

sub SystemNetworkSynchingServerGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemNetworkSynchingServerGetListRequest', @params );
}

sub SystemNetworkSynchingServerModifyRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemNetworkSynchingServerModifyRequest', netAddress => $netAddress, @params );
}

sub SystemNumberActivationGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemNumberActivationGetRequest', @params );
}

sub SystemNumberActivationModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemNumberActivationModifyRequest', @params );
}

sub SystemOCIAddACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemOCIAddACLEntryRequest', netAddress => $netAddress, @params );
}

sub SystemOCIDeleteACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemOCIDeleteACLEntryRequest', netAddress => $netAddress );
}

sub SystemOCIGetACLListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemOCIGetACLListRequest', @params );
}

sub SystemOCIModifyACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemOCIModifyACLEntryRequest', netAddress => $netAddress, @params );
}

sub SystemOCICallControlAddACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemOCICallControlAddACLEntryRequest', netAddress => $netAddress, @params );
}

sub SystemOCICallControlDeleteACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemOCICallControlDeleteACLEntryRequest', netAddress => $netAddress );
}

sub SystemOCICallControlGetACLListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemOCICallControlGetACLListRequest', @params );
}

sub SystemOCICallControlModifyACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemOCICallControlModifyACLEntryRequest', netAddress => $netAddress, @params );
}

sub SystemOCICallControlApplicationAddRequest17 {
    my $self                       = shift;
    my $applicationId              = shift;
    my $enableSystemWide           = shift;
    my $notificationTimeoutSeconds = shift;
    my @params                     = @_;

    return $self->_send_command(
        'SystemOCICallControlApplicationAddRequest17',
        applicationId              => $applicationId,
        enableSystemWide           => $enableSystemWide,
        notificationTimeoutSeconds => $notificationTimeoutSeconds,
        @params
    );
}

sub SystemOCICallControlApplicationDeleteRequest {
    my $self          = shift;
    my $applicationId = shift;

    return $self->_send_command( 'SystemOCICallControlApplicationDeleteRequest', applicationId => $applicationId );
}

sub SystemOCICallControlApplicationGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemOCICallControlApplicationGetListRequest', @params );
}

sub SystemOCICallControlApplicationModifyRequest {
    my $self          = shift;
    my $applicationId = shift;
    my @params        = @_;

    return $self->_send_command(
        'SystemOCICallControlApplicationModifyRequest',
        applicationId => $applicationId,
        @params
    );
}

sub SystemOCICallControlApplicationAddACLEntryRequest {
    my $self          = shift;
    my $applicationId = shift;
    my $netAddress    = shift;
    my @params        = @_;

    return $self->_send_command(
        'SystemOCICallControlApplicationAddACLEntryRequest',
        applicationId => $applicationId,
        netAddress    => $netAddress,
        @params
    );
}

sub SystemOCICallControlApplicationDeleteACLEntryRequest {
    my $self          = shift;
    my $applicationId = shift;
    my $netAddress    = shift;

    return $self->_send_command(
        'SystemOCICallControlApplicationDeleteACLEntryRequest',
        applicationId => $applicationId,
        netAddress    => $netAddress
    );
}

sub SystemOCICallControlApplicationGetACLListRequest {
    my $self          = shift;
    my $applicationId = shift;

    return $self->_send_query( 'SystemOCICallControlApplicationGetACLListRequest', applicationId => $applicationId );
}

sub SystemOCICallControlApplicationModifyACLEntryRequest {
    my $self          = shift;
    my $applicationId = shift;
    my $netAddress    = shift;
    my @params        = @_;

    return $self->_send_command(
        'SystemOCICallControlApplicationModifyACLEntryRequest',
        applicationId => $applicationId,
        netAddress    => $netAddress,
        @params
    );
}

sub SystemOCIReportingAddACLEntryRequest13mp9 {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemOCIReportingAddACLEntryRequest13mp9', netAddress => $netAddress, @params );
}

sub SystemOCIReportingAddMessageNameListRequest {
    my $self                  = shift;
    my $netAddress            = shift;
    my $messageNameStartsWith = shift;

    return $self->_send_command(
        'SystemOCIReportingAddMessageNameListRequest',
        netAddress            => $netAddress,
        messageNameStartsWith => $messageNameStartsWith
    );
}

sub SystemOCIReportingDeleteACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemOCIReportingDeleteACLEntryRequest', netAddress => $netAddress );
}

sub SystemOCIReportingDeleteMessageNameListRequest {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemOCIReportingDeleteMessageNameListRequest', netAddress => $netAddress );
}

sub SystemOCIReportingGetACLListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemOCIReportingGetACLListRequest', @params );
}

sub SystemOCIReportingGetMessageNameListRequest {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_query( 'SystemOCIReportingGetMessageNameListRequest', netAddress => $netAddress );
}

sub SystemOCIReportingModifyACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemOCIReportingModifyACLEntryRequest', netAddress => $netAddress, @params );
}

sub SystemOCIReportingParametersGetRequest14sp1 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemOCIReportingParametersGetRequest14sp1', @params );
}

sub SystemOCIReportingParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemOCIReportingParametersModifyRequest', @params );
}

sub SystemOfficeZoneAddRequest {
    my $self           = shift;
    my $officeZoneName = shift;
    my @params         = @_;

    return $self->_send_command( 'SystemOfficeZoneAddRequest', officeZoneName => $officeZoneName, @params );
}

sub SystemOfficeZoneDeleteRequest {
    my $self           = shift;
    my $officeZoneName = shift;

    return $self->_send_command( 'SystemOfficeZoneDeleteRequest', officeZoneName => $officeZoneName );
}

sub SystemOfficeZoneGetRequest {
    my $self           = shift;
    my $officeZoneName = shift;

    return $self->_send_query( 'SystemOfficeZoneGetRequest', officeZoneName => $officeZoneName );
}

sub SystemOfficeZoneGetAssignedServiceProviderListRequest {
    my $self           = shift;
    my $officeZoneName = shift;

    return $self->_send_query( 'SystemOfficeZoneGetAssignedServiceProviderListRequest',
        officeZoneName => $officeZoneName );
}

sub SystemOfficeZoneGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemOfficeZoneGetListRequest', @params );
}

sub SystemOfficeZoneGetZoneUsageListRequest {
    my $self     = shift;
    my $zoneName = shift;

    return $self->_send_query( 'SystemOfficeZoneGetZoneUsageListRequest', zoneName => $zoneName );
}

sub SystemOfficeZoneModifyRequest {
    my $self           = shift;
    my $officeZoneName = shift;
    my @params         = @_;

    return $self->_send_command( 'SystemOfficeZoneModifyRequest', officeZoneName => $officeZoneName, @params );
}

sub SystemPasswordRulesGetRequest16 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemPasswordRulesGetRequest16', @params );
}

sub SystemPasswordRulesModifyRequest14sp3 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemPasswordRulesModifyRequest14sp3', @params );
}

sub SystemPerformanceMeasurementReportingAddFileServerRequest {
    my $self              = shift;
    my $ftpHostNetAddress = shift;
    my $ftpUserId         = shift;
    my $ftpUserPassword   = shift;
    my @params            = @_;

    return $self->_send_command(
        'SystemPerformanceMeasurementReportingAddFileServerRequest',
        ftpHostNetAddress => $ftpHostNetAddress,
        ftpUserId         => $ftpUserId,
        ftpUserPassword   => $ftpUserPassword,
        @params
    );
}

sub SystemPerformanceMeasurementReportingDeleteFileServerRequest {
    my $self              = shift;
    my $ftpHostNetAddress = shift;

    return $self->_send_command( 'SystemPerformanceMeasurementReportingDeleteFileServerRequest',
        ftpHostNetAddress => $ftpHostNetAddress );
}

sub SystemPerformanceMeasurementGenerateReportRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemPerformanceMeasurementGenerateReportRequest', @params );
}

sub SystemPerformanceMeasurementReportingGetFileServerListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemPerformanceMeasurementReportingGetFileServerListRequest', @params );
}

sub SystemPerformanceMeasurementReportingGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemPerformanceMeasurementReportingGetRequest', @params );
}

sub SystemPerformanceMeasurementReportingModifyFileServerRequest {
    my $self              = shift;
    my $ftpHostNetAddress = shift;
    my @params            = @_;

    return $self->_send_command(
        'SystemPerformanceMeasurementReportingModifyFileServerRequest',
        ftpHostNetAddress => $ftpHostNetAddress,
        @params
    );
}

sub SystemPerformanceMeasurementReportingModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemPerformanceMeasurementReportingModifyRequest', @params );
}

sub SystemPolicyGetDefaultRequest17sp3 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemPolicyGetDefaultRequest17sp3', @params );
}

sub SystemPolicyModifyDefaultRequest14 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemPolicyModifyDefaultRequest14', @params );
}

sub SystemPortalAPIAddACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemPortalAPIAddACLEntryRequest', netAddress => $netAddress, @params );
}

sub SystemPortalAPIDeleteACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemPortalAPIDeleteACLEntryRequest', netAddress => $netAddress );
}

sub SystemPortalAPIGetACLListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemPortalAPIGetACLListRequest', @params );
}

sub SystemPortalAPIModifyACLEntryRequest {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemPortalAPIModifyACLEntryRequest', netAddress => $netAddress, @params );
}

sub SystemPortalPasscodeRulesGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemPortalPasscodeRulesGetRequest', @params );
}

sub SystemPortalPasscodeRulesModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemPortalPasscodeRulesModifyRequest', @params );
}

sub SystemProvisioningValidationGetRequest14sp2 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemProvisioningValidationGetRequest14sp2', @params );
}

sub SystemProvisioningValidationModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemProvisioningValidationModifyRequest', @params );
}

sub SystemRedundancyParametersGetRequest16sp2 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemRedundancyParametersGetRequest16sp2', @params );
}

sub SystemRedundancyParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemRedundancyParametersModifyRequest', @params );
}

sub SystemRoamingNetworkAddRequest {
    my $self       = shift;
    my $mscAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemRoamingNetworkAddRequest', mscAddress => $mscAddress, @params );
}

sub SystemRoamingNetworkDeleteRequest {
    my $self       = shift;
    my $mscAddress = shift;

    return $self->_send_command( 'SystemRoamingNetworkDeleteRequest', mscAddress => $mscAddress );
}

sub SystemRoamingNetworkGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemRoamingNetworkGetListRequest', @params );
}

sub SystemRoamingNetworkModifyRequest {
    my $self       = shift;
    my $mscAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemRoamingNetworkModifyRequest', mscAddress => $mscAddress, @params );
}

sub SystemRoutePointExternalSystemAddRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemRoutePointExternalSystemAddRequest', name => $name, @params );
}

sub SystemRoutePointExternalSystemDeleteRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemRoutePointExternalSystemDeleteRequest', name => $name );
}

sub SystemRoutePointExternalSystemGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemRoutePointExternalSystemGetListRequest', @params );
}

sub SystemRoutePointExternalSystemModifyRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemRoutePointExternalSystemModifyRequest', name => $name, @params );
}

sub SystemRoutePointExternalSystemGetRoutePointListRequest {
    my $self                     = shift;
    my $routePointExternalSystem = shift;

    return $self->_send_query(
        'SystemRoutePointExternalSystemGetRoutePointListRequest',
        routePointExternalSystem => $routePointExternalSystem
    );
}

sub SystemRoutePointExternalSystemApplicationControllerAddListRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command(
        'SystemRoutePointExternalSystemApplicationControllerAddListRequest',
        name => $name,
        @params
    );
}

sub SystemRoutePointExternalSystemApplicationControllerDeleteListRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command(
        'SystemRoutePointExternalSystemApplicationControllerDeleteListRequest',
        name => $name,
        @params
    );
}

sub SystemRoutePointExternalSystemApplicationControllerGetRequest {
    my $self           = shift;
    my $externalSystem = shift;

    return $self->_send_query( 'SystemRoutePointExternalSystemApplicationControllerGetRequest',
        externalSystem => $externalSystem );
}

sub SystemRoutingAddRouteDeviceRequest14 {
    my $self       = shift;
    my $routeName  = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemRoutingAddRouteDeviceRequest14',
        routeName  => $routeName,
        netAddress => $netAddress,
        @params
    );
}

sub SystemRoutingAddRouteRequest {
    my $self      = shift;
    my $routeName = shift;

    return $self->_send_command( 'SystemRoutingAddRouteRequest', routeName => $routeName );
}

sub SystemRoutingAddTranslationRequest {
    my $self      = shift;
    my $digits    = shift;
    my $routeName = shift;

    return $self->_send_command( 'SystemRoutingAddTranslationRequest', digits => $digits, routeName => $routeName );
}

sub SystemRoutingDeleteRouteDeviceRequest {
    my $self       = shift;
    my $routeName  = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemRoutingDeleteRouteDeviceRequest',
        routeName  => $routeName,
        netAddress => $netAddress,
        @params
    );
}

sub SystemRoutingDeleteRouteRequest {
    my $self      = shift;
    my $routeName = shift;

    return $self->_send_command( 'SystemRoutingDeleteRouteRequest', routeName => $routeName );
}

sub SystemRoutingDeleteTranslationRequest {
    my $self   = shift;
    my $digits = shift;

    return $self->_send_command( 'SystemRoutingDeleteTranslationRequest', digits => $digits );
}

sub SystemRoutingGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemRoutingGetRequest', @params );
}

sub SystemRoutingGetRouteDeviceListRequest {
    my $self      = shift;
    my $routeName = shift;

    return $self->_send_query( 'SystemRoutingGetRouteDeviceListRequest', routeName => $routeName );
}

sub SystemRoutingGetRouteListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemRoutingGetRouteListRequest', @params );
}

sub SystemRoutingGetTranslationListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemRoutingGetTranslationListRequest', @params );
}

sub SystemRoutingModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemRoutingModifyRequest', @params );
}

sub SystemRoutingModifyRouteDeviceRequest {
    my $self       = shift;
    my $routeName  = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemRoutingModifyRouteDeviceRequest',
        routeName  => $routeName,
        netAddress => $netAddress,
        @params
    );
}

sub SystemRoutingModifyTranslationRequest {
    my $self   = shift;
    my $digits = shift;
    my @params = @_;

    return $self->_send_command( 'SystemRoutingModifyTranslationRequest', digits => $digits, @params );
}

sub SystemRoutingProfileGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemRoutingProfileGetListRequest', @params );
}

sub SystemScheduleAddEventRequest {
    my $self        = shift;
    my $scheduleKey = shift;
    my $eventName   = shift;
    my $startDate   = shift;
    my $endDate     = shift;
    my @params      = @_;

    return $self->_send_command(
        'SystemScheduleAddEventRequest',
        scheduleKey => $scheduleKey,
        eventName   => $eventName,
        startDate   => $startDate,
        endDate     => $endDate,
        @params
    );
}

sub SystemScheduleAddRequest {
    my $self         = shift;
    my $scheduleName = shift;
    my $scheduleType = shift;

    return $self->_send_command(
        'SystemScheduleAddRequest',
        scheduleName => $scheduleName,
        scheduleType => $scheduleType
    );
}

sub SystemScheduleDeleteEventListRequest {
    my $self        = shift;
    my $scheduleKey = shift;
    my $eventName   = shift;

    return $self->_send_command(
        'SystemScheduleDeleteEventListRequest',
        scheduleKey => $scheduleKey,
        eventName   => $eventName
    );
}

sub SystemScheduleDeleteListRequest {
    my $self        = shift;
    my $scheduleKey = shift;

    return $self->_send_command( 'SystemScheduleDeleteListRequest', scheduleKey => $scheduleKey );
}

sub SystemScheduleGetEventListRequest {
    my $self        = shift;
    my $scheduleKey = shift;

    return $self->_send_query( 'SystemScheduleGetEventListRequest', scheduleKey => $scheduleKey );
}

sub SystemScheduleGetEventRequest {
    my $self        = shift;
    my $scheduleKey = shift;
    my $eventName   = shift;

    return $self->_send_query( 'SystemScheduleGetEventRequest', scheduleKey => $scheduleKey, eventName => $eventName );
}

sub SystemScheduleGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemScheduleGetListRequest', @params );
}

sub SystemScheduleModifyEventRequest {
    my $self        = shift;
    my $scheduleKey = shift;
    my $eventName   = shift;
    my @params      = @_;

    return $self->_send_command(
        'SystemScheduleModifyEventRequest',
        scheduleKey => $scheduleKey,
        eventName   => $eventName,
        @params
    );
}

sub SystemScheduleModifyRequest {
    my $self        = shift;
    my $scheduleKey = shift;
    my @params      = @_;

    return $self->_send_command( 'SystemScheduleModifyRequest', scheduleKey => $scheduleKey, @params );
}

sub SystemServerAddressesGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemServerAddressesGetRequest', @params );
}

sub SystemServerAddressesModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemServerAddressesModifyRequest', @params );
}

sub SystemServiceActivationAccessCodeGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemServiceActivationAccessCodeGetRequest', @params );
}

sub SystemServiceActivationAccessCodeModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemServiceActivationAccessCodeModifyRequest', @params );
}

sub SystemServiceCodeAddRequest {
    my $self        = shift;
    my $serviceCode = shift;
    my $description = shift;

    return $self->_send_command( 'SystemServiceCodeAddRequest', serviceCode => $serviceCode,
        description => $description );
}

sub SystemServiceCodeDeleteRequest {
    my $self        = shift;
    my $serviceCode = shift;

    return $self->_send_command( 'SystemServiceCodeDeleteRequest', serviceCode => $serviceCode );
}

sub SystemServiceCodeGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemServiceCodeGetListRequest', @params );
}

sub SystemServiceCodeModifyRequest {
    my $self        = shift;
    my $serviceCode = shift;
    my @params      = @_;

    return $self->_send_command( 'SystemServiceCodeModifyRequest', serviceCode => $serviceCode, @params );
}

sub SystemServiceControlParametersGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemServiceControlParametersGetRequest', @params );
}

sub SystemServiceControlParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemServiceControlParametersModifyRequest', @params );
}

sub SystemSessionAuditGetRequest17sp3 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSessionAuditGetRequest17sp3', @params );
}

sub SystemSessionAuditModifyRequest14sp3 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemSessionAuditModifyRequest14sp3', @params );
}

sub SystemShInterfaceParametersGetRequest17 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemShInterfaceParametersGetRequest17', @params );
}

sub SystemShInterfaceParametersModifyRequest17 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemShInterfaceParametersModifyRequest17', @params );
}

sub SystemShInterfaceRefreshTaskStartRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemShInterfaceRefreshTaskStartRequest', @params );
}

sub SystemShInterfaceRefreshTaskGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemShInterfaceRefreshTaskGetRequest', @params );
}

sub SystemShInterfaceRefreshTaskTerminateRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemShInterfaceRefreshTaskTerminateRequest', @params );
}

sub SystemSIPAddACLEntryRequest14sp2 {
    my $self              = shift;
    my $netAddress        = shift;
    my $transportProtocol = shift;
    my @params            = @_;

    return $self->_send_command(
        'SystemSIPAddACLEntryRequest14sp2',
        netAddress        => $netAddress,
        transportProtocol => $transportProtocol,
        @params
    );
}

sub SystemSIPAddContentTypeRequest {
    my $self        = shift;
    my $contentType = shift;
    my $interface   = shift;

    return $self->_send_command( 'SystemSIPAddContentTypeRequest', contentType => $contentType,
        interface => $interface );
}

sub SystemSIPDeleteACLEntryRequest14sp2 {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemSIPDeleteACLEntryRequest14sp2', netAddress => $netAddress );
}

sub SystemSIPDeleteContentTypeRequest {
    my $self        = shift;
    my $contentType = shift;

    return $self->_send_command( 'SystemSIPDeleteContentTypeRequest', contentType => $contentType );
}

sub SystemSIPDeviceTypeAddRequest17sp4 {
    my $self                    = shift;
    my $deviceType              = shift;
    my $numberOfPorts           = shift;
    my $profile                 = shift;
    my $registrationCapable     = shift;
    my $isConferenceDevice      = shift;
    my $isMobilityManagerDevice = shift;
    my $isMusicOnHoldDevice     = shift;
    my $RFC3264Hold             = shift;
    my $isTrusted               = shift;
    my $E164Capable             = shift;
    my $routeAdvance            = shift;
    my $forwardingOverride      = shift;
    my $wirelessIntegration     = shift;
    my @params                  = @_;

    return $self->_send_command(
        'SystemSIPDeviceTypeAddRequest17sp4',
        deviceType              => $deviceType,
        numberOfPorts           => $numberOfPorts,
        profile                 => $profile,
        registrationCapable     => $registrationCapable,
        isConferenceDevice      => $isConferenceDevice,
        isMobilityManagerDevice => $isMobilityManagerDevice,
        isMusicOnHoldDevice     => $isMusicOnHoldDevice,
        RFC3264Hold             => $RFC3264Hold,
        isTrusted               => $isTrusted,
        E164Capable             => $E164Capable,
        routeAdvance            => $routeAdvance,
        forwardingOverride      => $forwardingOverride,
        wirelessIntegration     => $wirelessIntegration,
        @params
    );
}

sub SystemSIPDeviceTypeFileAddRequest16sp1 {
    my $self              = shift;
    my $deviceType        = shift;
    my $fileFormat        = shift;
    my $remoteFileFormat  = shift;
    my $fileCategory      = shift;
    my $fileCustomization = shift;
    my $fileSource        = shift;
    my @params            = @_;

    return $self->_send_command(
        'SystemSIPDeviceTypeFileAddRequest16sp1',
        deviceType        => $deviceType,
        fileFormat        => $fileFormat,
        remoteFileFormat  => $remoteFileFormat,
        fileCategory      => $fileCategory,
        fileCustomization => $fileCustomization,
        fileSource        => $fileSource,
        @params
    );
}

sub SystemSIPDeviceTypeDeleteRequest {
    my $self       = shift;
    my $deviceType = shift;

    return $self->_send_command( 'SystemSIPDeviceTypeDeleteRequest', deviceType => $deviceType );
}

sub SystemSIPDeviceTypeGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSIPDeviceTypeGetListRequest', @params );
}

sub SystemSIPDeviceTypeGetRequest17sp4 {
    my $self       = shift;
    my $deviceType = shift;

    return $self->_send_query( 'SystemSIPDeviceTypeGetRequest17sp4', deviceType => $deviceType );
}

sub SystemSIPDeviceTypeModifyRequest17 {
    my $self       = shift;
    my $deviceType = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemSIPDeviceTypeModifyRequest17', deviceType => $deviceType, @params );
}

sub SystemSIPGetACLListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSIPGetACLListRequest', @params );
}

sub SystemSIPGetContentTypeListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSIPGetContentTypeListRequest', @params );
}

sub SystemSIPModifyACLEntryRequest14sp2 {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemSIPModifyACLEntryRequest14sp2', netAddress => $netAddress, @params );
}

sub SystemSIPModifyContentTypeRequest {
    my $self        = shift;
    my $contentType = shift;
    my @params      = @_;

    return $self->_send_command( 'SystemSIPModifyContentTypeRequest', contentType => $contentType, @params );
}

sub SystemSMDIAddACLEntryRequest14sp2 {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemSMDIAddACLEntryRequest14sp2', netAddress => $netAddress, @params );
}

sub SystemSMDIDeleteACLEntryRequest14sp2 {
    my $self       = shift;
    my $netAddress = shift;

    return $self->_send_command( 'SystemSMDIDeleteACLEntryRequest14sp2', netAddress => $netAddress );
}

sub SystemSMDIGetACLListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSMDIGetACLListRequest', @params );
}

sub SystemSMDIModifyACLEntryRequest14sp2 {
    my $self       = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemSMDIModifyACLEntryRequest14sp2', netAddress => $netAddress, @params );
}

sub SystemSMDIParametersGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSMDIParametersGetRequest', @params );
}

sub SystemSMDIParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemSMDIParametersModifyRequest', @params );
}

sub SystemSMPPGetRequest14sp5 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSMPPGetRequest14sp5', @params );
}

sub SystemSMPPModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemSMPPModifyRequest', @params );
}

sub SystemSoftwareVersionGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSoftwareVersionGetRequest', @params );
}

sub SystemStateOrProvinceGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemStateOrProvinceGetListRequest', @params );
}

sub SystemSubscriberGetLoginParametersRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSubscriberGetLoginParametersRequest', @params );
}

sub SystemSubscriberModifyLoginParametersRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemSubscriberModifyLoginParametersRequest', @params );
}

sub SystemSubscriberModifyCallProcessingParametersRequest14sp7 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemSubscriberModifyCallProcessingParametersRequest14sp7', @params );
}

sub SystemSubscriberGetCallProcessingParametersRequest17sp4 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSubscriberGetCallProcessingParametersRequest17sp4', @params );
}

sub SystemTimeZoneGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemTimeZoneGetListRequest', @params );
}

sub SystemSIPDeviceTypeLanguageMappingModifyRequest {
    my $self       = shift;
    my $deviceType = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemSIPDeviceTypeLanguageMappingModifyRequest', deviceType => $deviceType,
        @params );
}

sub SystemSIPDeviceTypeLanguageMappingGetListRequest {
    my $self       = shift;
    my $deviceType = shift;

    return $self->_send_query( 'SystemSIPDeviceTypeLanguageMappingGetListRequest', deviceType => $deviceType );
}

sub SystemSIPDeviceTypeFileDeleteRequest14sp8 {
    my $self       = shift;
    my $deviceType = shift;
    my $fileFormat = shift;

    return $self->_send_command(
        'SystemSIPDeviceTypeFileDeleteRequest14sp8',
        deviceType => $deviceType,
        fileFormat => $fileFormat
    );
}

sub SystemSIPDeviceTypeFileModifyRequest16sp1 {
    my $self       = shift;
    my $deviceType = shift;
    my $fileFormat = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemSIPDeviceTypeFileModifyRequest16sp1',
        deviceType => $deviceType,
        fileFormat => $fileFormat,
        @params
    );
}

sub SystemSIPDeviceTypeFileGetListRequest14sp8 {
    my $self       = shift;
    my $deviceType = shift;

    return $self->_send_query( 'SystemSIPDeviceTypeFileGetListRequest14sp8', deviceType => $deviceType );
}

sub SystemSIPDeviceTypeFileGetRequest16sp1 {
    my $self       = shift;
    my $deviceType = shift;
    my $fileFormat = shift;

    return $self->_send_query(
        'SystemSIPDeviceTypeFileGetRequest16sp1',
        deviceType => $deviceType,
        fileFormat => $fileFormat
    );
}

sub SystemSIPDeviceTypeServiceModifyRequest {
    my $self       = shift;
    my $deviceType = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemSIPDeviceTypeServiceModifyRequest', deviceType => $deviceType, @params );
}

sub SystemSIPDeviceTypeServiceGetRequest {
    my $self       = shift;
    my $deviceType = shift;

    return $self->_send_query( 'SystemSIPDeviceTypeServiceGetRequest', deviceType => $deviceType );
}

sub SystemZoneAddRequest {
    my $self     = shift;
    my $zoneName = shift;
    my @params   = @_;

    return $self->_send_command( 'SystemZoneAddRequest', zoneName => $zoneName, @params );
}

sub SystemZoneDeleteRequest {
    my $self     = shift;
    my $zoneName = shift;

    return $self->_send_command( 'SystemZoneDeleteRequest', zoneName => $zoneName );
}

sub SystemZoneGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemZoneGetListRequest', @params );
}

sub SystemZoneCallingZonePhysicalLocationGetRequest {
    my $self     = shift;
    my $zoneName = shift;

    return $self->_send_query( 'SystemZoneCallingZonePhysicalLocationGetRequest', zoneName => $zoneName );
}

sub SystemZoneCallingZonePhysicalLocationModifyRequest {
    my $self     = shift;
    my $zoneName = shift;
    my @params   = @_;

    return $self->_send_command( 'SystemZoneCallingZonePhysicalLocationModifyRequest', zoneName => $zoneName, @params );
}

sub SystemZoneLocationBasedPhysicalLocationAddListRequest {
    my $self     = shift;
    my $zoneName = shift;
    my @params   = @_;

    return $self->_send_command( 'SystemZoneLocationBasedPhysicalLocationAddListRequest', zoneName => $zoneName,
        @params );
}

sub SystemZoneLocationBasedPhysicalLocationDeleteListRequest {
    my $self     = shift;
    my $zoneName = shift;
    my @params   = @_;

    return $self->_send_command(
        'SystemZoneLocationBasedPhysicalLocationDeleteListRequest',
        zoneName => $zoneName,
        @params
    );
}

sub SystemZoneLocationBasedPhysicalLocationGetListRequest {
    my $self     = shift;
    my $zoneName = shift;
    my @params   = @_;

    return $self->_send_query( 'SystemZoneLocationBasedPhysicalLocationGetListRequest', zoneName => $zoneName,
        @params );
}

sub SystemZoneNetAddressAddListRequest {
    my $self     = shift;
    my $zoneName = shift;
    my @params   = @_;

    return $self->_send_command( 'SystemZoneNetAddressAddListRequest', zoneName => $zoneName, @params );
}

sub SystemZoneNetAddressDeleteListRequest {
    my $self     = shift;
    my $zoneName = shift;
    my @params   = @_;

    return $self->_send_command( 'SystemZoneNetAddressDeleteListRequest', zoneName => $zoneName, @params );
}

sub SystemZoneNetAddressGetListRequest {
    my $self     = shift;
    my $zoneName = shift;
    my @params   = @_;

    return $self->_send_query( 'SystemZoneNetAddressGetListRequest', zoneName => $zoneName, @params );
}

sub SystemSelectiveServicesGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSelectiveServicesGetRequest', @params );
}

sub SystemSelectiveServicesModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemSelectiveServicesModifyRequest', @params );
}

sub UserAccessDeviceFileGetListRequest {
    my $self         = shift;
    my $userId       = shift;
    my $accessDevice = shift;

    return $self->_send_query( 'UserAccessDeviceFileGetListRequest', userId => $userId, accessDevice => $accessDevice );
}

sub UserAccessDeviceFileGetRequest {
    my $self         = shift;
    my $userId       = shift;
    my $accessDevice = shift;
    my $fileFormat   = shift;

    return $self->_send_query(
        'UserAccessDeviceFileGetRequest',
        userId       => $userId,
        accessDevice => $accessDevice,
        fileFormat   => $fileFormat
    );
}

sub UserAccessDeviceFileModifyRequest {
    my $self         = shift;
    my $userId       = shift;
    my $accessDevice = shift;
    my $fileFormat   = shift;
    my $uploadFile   = shift;

    return $self->_send_command(
        'UserAccessDeviceFileModifyRequest',
        userId       => $userId,
        accessDevice => $accessDevice,
        fileFormat   => $fileFormat,
        uploadFile   => $uploadFile
    );
}

sub UserAccessDeviceResetRequest {
    my $self         = shift;
    my $userId       = shift;
    my $accessDevice = shift;

    return $self->_send_command( 'UserAccessDeviceResetRequest', userId => $userId, accessDevice => $accessDevice );
}

sub UserAccessDeviceTagsGetRequest {
    my $self         = shift;
    my $userId       = shift;
    my $accessDevice = shift;

    return $self->_send_query( 'UserAccessDeviceTagsGetRequest', userId => $userId, accessDevice => $accessDevice );
}

sub UserAddRequest17sp4 {
    my $self                   = shift;
    my $serviceProviderId      = shift;
    my $groupId                = shift;
    my $userId                 = shift;
    my $lastName               = shift;
    my $firstName              = shift;
    my $callingLineIdLastName  = shift;
    my $callingLineIdFirstName = shift;
    my @params                 = @_;

    return $self->_send_command(
        'UserAddRequest17sp4',
        serviceProviderId      => $serviceProviderId,
        groupId                => $groupId,
        userId                 => $userId,
        lastName               => $lastName,
        firstName              => $firstName,
        callingLineIdLastName  => $callingLineIdLastName,
        callingLineIdFirstName => $callingLineIdFirstName,
        @params
    );
}

sub UserAssignedServicesGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'UserAssignedServicesGetListRequest', @params );
}

sub UserDeleteRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_command( 'UserDeleteRequest', userId => $userId );
}

sub UserDnGetActivationListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserDnGetActivationListRequest', userId => $userId );
}

sub UserGetRequest17sp4 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserGetRequest17sp4', userId => $userId );
}

sub UserGetRegistrationListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserGetRegistrationListRequest', userId => $userId );
}

sub UserModifyRequest17sp4 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserModifyRequest17sp4', userId => $userId, @params );
}

sub UserCallLogsClearRequest14sp4 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_command( 'UserCallLogsClearRequest14sp4', userId => $userId );
}

sub UserCallPoliciesGetRequest17 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallPoliciesGetRequest17', userId => $userId );
}

sub UserCallPoliciesModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallPoliciesModifyRequest', userId => $userId, @params );
}

sub UserCallProcessingGetPolicyRequest17sp4 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallProcessingGetPolicyRequest17sp4', userId => $userId );
}

sub UserCallProcessingModifyPolicyRequest14sp7 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallProcessingModifyPolicyRequest14sp7', userId => $userId, @params );
}

sub UserCommunicationBarringAuthorizationCodeAddListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCommunicationBarringAuthorizationCodeAddListRequest', userId => $userId,
        @params );
}

sub UserCommunicationBarringAuthorizationCodeDeleteListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command(
        'UserCommunicationBarringAuthorizationCodeDeleteListRequest',
        userId => $userId,
        @params
    );
}

sub UserCommunicationBarringAuthorizationCodeGetListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCommunicationBarringAuthorizationCodeGetListRequest', userId => $userId );
}

sub UserFeatureAccessCodeGetListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserFeatureAccessCodeGetListRequest', userId => $userId );
}

sub UserGetListInGroupRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $GroupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'UserGetListInGroupRequest',
        serviceProviderId => $serviceProviderId,
        GroupId           => $GroupId,
        @params
    );
}

sub UserGetListInServiceProviderRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query( 'UserGetListInServiceProviderRequest', serviceProviderId => $serviceProviderId,
        @params );
}

sub UserGetListInSystemRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'UserGetListInSystemRequest', @params );
}

sub UserGetServiceInstanceListInServiceProviderRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'UserGetServiceInstanceListInServiceProviderRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub UserGetServiceInstanceListInSystemRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'UserGetServiceInstanceListInSystemRequest', @params );
}

sub UserLinePortGetListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserLinePortGetListRequest', userId => $userId );
}

sub UserModifyUserIdRequest {
    my $self      = shift;
    my $userId    = shift;
    my $newUserId = shift;

    return $self->_send_command( 'UserModifyUserIdRequest', userId => $userId, newUserId => $newUserId );
}

sub UserNetworkConferencingGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserNetworkConferencingGetRequest', userId => $userId );
}

sub UserOCICallControlApplicationGetListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOCICallControlApplicationGetListRequest', userId => $userId );
}

sub UserOCICallControlApplicationModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserOCICallControlApplicationModifyRequest', userId => $userId, @params );
}

sub UserPasswordInfoGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserPasswordInfoGetRequest', userId => $userId );
}

sub UserPersonalPhoneListAddListRequest {
    my $self   = shift;
    my $userId = shift;
    my $entry  = shift;

    return $self->_send_command( 'UserPersonalPhoneListAddListRequest', userId => $userId, entry => $entry );
}

sub UserPersonalPhoneListDeleteListRequest {
    my $self      = shift;
    my $userId    = shift;
    my $entryName = shift;

    return $self->_send_command( 'UserPersonalPhoneListDeleteListRequest', userId => $userId, entryName => $entryName );
}

sub UserPersonalPhoneListGetListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserPersonalPhoneListGetListRequest', userId => $userId, @params );
}

sub UserPersonalPhoneListModifyRequest {
    my $self      = shift;
    my $userId    = shift;
    my $entryName = shift;
    my @params    = @_;

    return $self->_send_command(
        'UserPersonalPhoneListModifyRequest',
        userId    => $userId,
        entryName => $entryName,
        @params
    );
}

sub UserPhoneDirectoryGetListRequest {
    my $self                   = shift;
    my $userId                 = shift;
    my $includeCommonPhoneList = shift;
    my @params                 = @_;

    return $self->_send_query(
        'UserPhoneDirectoryGetListRequest',
        userId                 => $userId,
        includeCommonPhoneList => $includeCommonPhoneList,
        @params
    );
}

sub UserPhoneDirectoryGetPagedListRequest {
    my $self                      = shift;
    my $userId                    = shift;
    my $isEnterpriseInfoRequested = shift;
    my $responsePagingControl     = shift;
    my @params                    = @_;

    return $self->_send_query(
        'UserPhoneDirectoryGetPagedListRequest',
        userId                    => $userId,
        isEnterpriseInfoRequested => $isEnterpriseInfoRequested,
        responsePagingControl     => $responsePagingControl,
        @params
    );
}

sub UserPhoneDirectoryGetSearchedListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserPhoneDirectoryGetSearchedListRequest', userId => $userId, @params );
}

sub UserPortalPasscodeGetInfoRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserPortalPasscodeGetInfoRequest', userId => $userId );
}

sub UserPortalPasscodeModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserPortalPasscodeModifyRequest', userId => $userId, @params );
}

sub UserScheduleAddEventRequest {
    my $self        = shift;
    my $userId      = shift;
    my $scheduleKey = shift;
    my $eventName   = shift;
    my $startDate   = shift;
    my $endDate     = shift;
    my @params      = @_;

    return $self->_send_command(
        'UserScheduleAddEventRequest',
        userId      => $userId,
        scheduleKey => $scheduleKey,
        eventName   => $eventName,
        startDate   => $startDate,
        endDate     => $endDate,
        @params
    );
}

sub UserScheduleAddRequest {
    my $self         = shift;
    my $userId       = shift;
    my $scheduleName = shift;
    my $scheduleType = shift;

    return $self->_send_command(
        'UserScheduleAddRequest',
        userId       => $userId,
        scheduleName => $scheduleName,
        scheduleType => $scheduleType
    );
}

sub UserScheduleDeleteEventListRequest {
    my $self        = shift;
    my $userId      = shift;
    my $scheduleKey = shift;
    my $eventName   = shift;

    return $self->_send_command(
        'UserScheduleDeleteEventListRequest',
        userId      => $userId,
        scheduleKey => $scheduleKey,
        eventName   => $eventName
    );
}

sub UserScheduleDeleteListRequest {
    my $self        = shift;
    my $userId      = shift;
    my $scheduleKey = shift;

    return $self->_send_command( 'UserScheduleDeleteListRequest', userId => $userId, scheduleKey => $scheduleKey );
}

sub UserScheduleGetEventListRequest {
    my $self        = shift;
    my $userId      = shift;
    my $scheduleKey = shift;

    return $self->_send_query( 'UserScheduleGetEventListRequest', userId => $userId, scheduleKey => $scheduleKey );
}

sub UserScheduleGetEventRequest {
    my $self        = shift;
    my $userId      = shift;
    my $scheduleKey = shift;
    my $eventName   = shift;

    return $self->_send_query(
        'UserScheduleGetEventRequest',
        userId      => $userId,
        scheduleKey => $scheduleKey,
        eventName   => $eventName
    );
}

sub UserScheduleGetListRequest17sp1 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserScheduleGetListRequest17sp1', userId => $userId, @params );
}

sub UserScheduleModifyEventRequest {
    my $self        = shift;
    my $userId      = shift;
    my $scheduleKey = shift;
    my $eventName   = shift;
    my @params      = @_;

    return $self->_send_command(
        'UserScheduleModifyEventRequest',
        userId      => $userId,
        scheduleKey => $scheduleKey,
        eventName   => $eventName,
        @params
    );
}

sub UserScheduleModifyRequest {
    my $self        = shift;
    my $userId      = shift;
    my $scheduleKey = shift;
    my @params      = @_;

    return $self->_send_command( 'UserScheduleModifyRequest', userId => $userId, scheduleKey => $scheduleKey, @params );
}

sub UserServiceAssignListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserServiceAssignListRequest', userId => $userId, @params );
}

sub UserServiceGetAssignmentListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserServiceGetAssignmentListRequest', userId => $userId );
}

sub UserServiceIsAssignedRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserServiceIsAssignedRequest', userId => $userId );
}

sub UserServiceUnassignListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserServiceUnassignListRequest', userId => $userId, @params );
}

sub UserShInterfaceGetPublicIdDataRequest {
    my $self               = shift;
    my $publicUserIdentity = shift;

    return $self->_send_query( 'UserShInterfaceGetPublicIdDataRequest', publicUserIdentity => $publicUserIdentity );
}

sub UserShInterfaceGetUserIdDataRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserShInterfaceGetUserIdDataRequest', userId => $userId );
}

sub UserShInterfaceModifyRequest {
    my $self               = shift;
    my $publicUserIdentity = shift;
    my @params             = @_;

    return $self->_send_command( 'UserShInterfaceModifyRequest', publicUserIdentity => $publicUserIdentity, @params );
}

sub UserShInterfacePublicIdentityRefreshTaskStartRequest {
    my $self               = shift;
    my $publicUserIdentity = shift;

    return $self->_send_command( 'UserShInterfacePublicIdentityRefreshTaskStartRequest',
        publicUserIdentity => $publicUserIdentity );
}

sub GroupAccountAuthorizationCodesAddListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $codeEntry         = shift;

    return $self->_send_command(
        'GroupAccountAuthorizationCodesAddListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        codeEntry         => $codeEntry
    );
}

sub GroupAccountAuthorizationCodesDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $code              = shift;

    return $self->_send_command(
        'GroupAccountAuthorizationCodesDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        code              => $code
    );
}

sub GroupAccountAuthorizationCodesGetAvailableUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupAccountAuthorizationCodesGetAvailableUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupAccountAuthorizationCodesGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupAccountAuthorizationCodesGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupAccountAuthorizationCodesGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupAccountAuthorizationCodesGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupAccountAuthorizationCodesModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupAccountAuthorizationCodesModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub SystemAdviceOfChargeGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAdviceOfChargeGetRequest', @params );
}

sub SystemAdviceOfChargeModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAdviceOfChargeModifyRequest', @params );
}

sub UserAdviceOfChargeGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserAdviceOfChargeGetRequest', userId => $userId );
}

sub UserAdviceOfChargeModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserAdviceOfChargeModifyRequest', userId => $userId, @params );
}

sub UserAlternateNumbersGetRequest17 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserAlternateNumbersGetRequest17', userId => $userId );
}

sub UserAlternateNumbersModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserAlternateNumbersModifyRequest', userId => $userId, @params );
}

sub UserAnonymousCallRejectionGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserAnonymousCallRejectionGetRequest', userId => $userId );
}

sub UserAnonymousCallRejectionModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserAnonymousCallRejectionModifyRequest', userId => $userId, @params );
}

sub SystemAnonymousCallRejectionGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAnonymousCallRejectionGetRequest', @params );
}

sub SystemAnonymousCallRejectionModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAnonymousCallRejectionModifyRequest', @params );
}

sub SystemAttendantConsoleGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAttendantConsoleGetRequest', @params );
}

sub SystemAttendantConsoleModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAttendantConsoleModifyRequest', @params );
}

sub UserAttendantConsoleAddUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserAttendantConsoleAddUserListRequest', userId => $userId, @params );
}

sub UserAttendantConsoleDeleteUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserAttendantConsoleDeleteUserListRequest', userId => $userId, @params );
}

sub UserAttendantConsoleGetAvailableUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserAttendantConsoleGetAvailableUserListRequest', userId => $userId, @params );
}

sub UserAttendantConsoleGetRequest14sp2 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserAttendantConsoleGetRequest14sp2', userId => $userId );
}

sub UserAttendantConsoleModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserAttendantConsoleModifyRequest', userId => $userId, @params );
}

sub UserAuthenticationGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserAuthenticationGetRequest', userId => $userId );
}

sub UserAuthenticationModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserAuthenticationModifyRequest', userId => $userId, @params );
}

sub GroupAutoAttendantAddInstanceRequest17sp1 {
    my $self                   = shift;
    my $serviceProviderId      = shift;
    my $groupId                = shift;
    my $serviceUserId          = shift;
    my $serviceInstanceProfile = shift;
    my $enableVideo            = shift;
    my @params                 = @_;

    return $self->_send_command(
        'GroupAutoAttendantAddInstanceRequest17sp1',
        serviceProviderId      => $serviceProviderId,
        groupId                => $groupId,
        serviceUserId          => $serviceUserId,
        serviceInstanceProfile => $serviceInstanceProfile,
        enableVideo            => $enableVideo,
        @params
    );
}

sub GroupAutoAttendantDeleteInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_command( 'GroupAutoAttendantDeleteInstanceRequest', serviceUserId => $serviceUserId );
}

sub GroupAutoAttendantGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupAutoAttendantGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupAutoAttendantGetInstanceRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupAutoAttendantGetInstanceRequest17sp1', serviceUserId => $serviceUserId );
}

sub GroupAutoAttendantModifyActiveInstanceListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'GroupAutoAttendantModifyActiveInstanceListRequest', @params );
}

sub GroupAutoAttendantModifyInstanceRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupAutoAttendantModifyInstanceRequest17sp1',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub SystemAutomaticCallbackGetRequest17 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAutomaticCallbackGetRequest17', @params );
}

sub SystemAutomaticCallbackModifyRequest15 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAutomaticCallbackModifyRequest15', @params );
}

sub SystemAutomaticCallbackGetReleaseCauseListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemAutomaticCallbackGetReleaseCauseListRequest', @params );
}

sub SystemAutomaticCallbackAddReleaseCauseListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAutomaticCallbackAddReleaseCauseListRequest', @params );
}

sub SystemAutomaticCallbackDeleteReleaseCauseListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemAutomaticCallbackDeleteReleaseCauseListRequest', @params );
}

sub UserAutomaticCallbackGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserAutomaticCallbackGetRequest', userId => $userId );
}

sub UserAutomaticCallbackModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserAutomaticCallbackModifyRequest', userId => $userId, @params );
}

sub UserAutomaticHoldRetrieveGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserAutomaticHoldRetrieveGetRequest', userId => $userId );
}

sub UserAutomaticHoldRetrieveModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserAutomaticHoldRetrieveModifyRequest', userId => $userId, @params );
}

sub UserBargeInExemptGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserBargeInExemptGetRequest', userId => $userId );
}

sub UserBargeInExemptModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserBargeInExemptModifyRequest', userId => $userId, @params );
}

sub UserBasicCallLogsGetListRequest14sp4 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserBasicCallLogsGetListRequest14sp4', userId => $userId, @params );
}

sub GroupBroadWorksAnywhereAddInstanceRequest {
    my $self                    = shift;
    my $serviceProviderId       = shift;
    my $groupId                 = shift;
    my $serviceUserId           = shift;
    my $serviceInstanceProfile  = shift;
    my $broadWorksAnywhereScope = shift;
    my $promptForCLID           = shift;
    my $silentPromptMode        = shift;
    my $promptForPasscode       = shift;

    return $self->_send_command(
        'GroupBroadWorksAnywhereAddInstanceRequest',
        serviceProviderId       => $serviceProviderId,
        groupId                 => $groupId,
        serviceUserId           => $serviceUserId,
        serviceInstanceProfile  => $serviceInstanceProfile,
        broadWorksAnywhereScope => $broadWorksAnywhereScope,
        promptForCLID           => $promptForCLID,
        silentPromptMode        => $silentPromptMode,
        promptForPasscode       => $promptForPasscode
    );
}

sub GroupBroadWorksAnywhereDeleteInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_command( 'GroupBroadWorksAnywhereDeleteInstanceRequest', serviceUserId => $serviceUserId );
}

sub GroupBroadWorksAnywhereGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupBroadWorksAnywhereGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupBroadWorksAnywhereGetInstanceRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupBroadWorksAnywhereGetInstanceRequest17', serviceUserId => $serviceUserId );
}

sub GroupBroadWorksAnywhereModifyActiveInstanceListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'GroupBroadWorksAnywhereModifyActiveInstanceListRequest', @params );
}

sub GroupBroadWorksAnywhereModifyInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupBroadWorksAnywhereModifyInstanceRequest',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub UserBroadWorksAnywhereAddPhoneNumberRequest {
    my $self        = shift;
    my $userId      = shift;
    my $phoneNumber = shift;
    my @params      = @_;

    return $self->_send_command(
        'UserBroadWorksAnywhereAddPhoneNumberRequest',
        userId      => $userId,
        phoneNumber => $phoneNumber,
        @params
    );
}

sub UserBroadWorksAnywhereAddSelectiveCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $phoneNumber  = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserBroadWorksAnywhereAddSelectiveCriteriaRequest16',
        userId       => $userId,
        phoneNumber  => $phoneNumber,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserBroadWorksAnywhereDeletePhoneNumberRequest {
    my $self        = shift;
    my $userId      = shift;
    my $phoneNumber = shift;

    return $self->_send_command(
        'UserBroadWorksAnywhereDeletePhoneNumberRequest',
        userId      => $userId,
        phoneNumber => $phoneNumber
    );
}

sub UserBroadWorksAnywhereDeleteSelectiveCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $phoneNumber  = shift;
    my $criteriaName = shift;

    return $self->_send_command(
        'UserBroadWorksAnywhereDeleteSelectiveCriteriaRequest',
        userId       => $userId,
        phoneNumber  => $phoneNumber,
        criteriaName => $criteriaName
    );
}

sub UserBroadWorksAnywhereGetAvailablePortalListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserBroadWorksAnywhereGetAvailablePortalListRequest', userId => $userId );
}

sub UserBroadWorksAnywhereGetPhoneNumberRequest {
    my $self        = shift;
    my $userId      = shift;
    my $phoneNumber = shift;

    return $self->_send_query(
        'UserBroadWorksAnywhereGetPhoneNumberRequest',
        userId      => $userId,
        phoneNumber => $phoneNumber
    );
}

sub UserBroadWorksAnywhereGetRequest16sp2 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserBroadWorksAnywhereGetRequest16sp2', userId => $userId );
}

sub UserBroadWorksAnywhereGetSelectiveCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $phoneNumber  = shift;
    my $criteriaName = shift;

    return $self->_send_query(
        'UserBroadWorksAnywhereGetSelectiveCriteriaRequest16',
        userId       => $userId,
        phoneNumber  => $phoneNumber,
        criteriaName => $criteriaName
    );
}

sub UserBroadWorksAnywhereModifyPhoneNumberRequest {
    my $self        = shift;
    my $userId      = shift;
    my $phoneNumber = shift;
    my @params      = @_;

    return $self->_send_command(
        'UserBroadWorksAnywhereModifyPhoneNumberRequest',
        userId      => $userId,
        phoneNumber => $phoneNumber,
        @params
    );
}

sub UserBroadWorksAnywhereModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserBroadWorksAnywhereModifyRequest', userId => $userId, @params );
}

sub UserBroadWorksAnywhereModifySelectiveCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $phoneNumber  = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserBroadWorksAnywhereModifySelectiveCriteriaRequest',
        userId       => $userId,
        phoneNumber  => $phoneNumber,
        criteriaName => $criteriaName,
        @params
    );
}

sub SystemBroadWorksMobilityAddIMRNListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemBroadWorksMobilityAddIMRNListRequest', @params );
}

sub SystemBroadWorksMobilityDeleteIMRNListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemBroadWorksMobilityDeleteIMRNListRequest', @params );
}

sub SystemBroadWorksMobilityGetIMRNListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemBroadWorksMobilityGetIMRNListRequest', @params );
}

sub SystemBroadWorksMobilityServiceAccessCodeAddRequest {
    my $self              = shift;
    my $serviceAccessCode = shift;
    my $countryCode       = shift;
    my @params            = @_;

    return $self->_send_command(
        'SystemBroadWorksMobilityServiceAccessCodeAddRequest',
        serviceAccessCode => $serviceAccessCode,
        countryCode       => $countryCode,
        @params
    );
}

sub SystemBroadWorksMobilityServiceAccessCodeDeleteRequest {
    my $self              = shift;
    my $countryCode       = shift;
    my $serviceAccessCode = shift;

    return $self->_send_command(
        'SystemBroadWorksMobilityServiceAccessCodeDeleteRequest',
        countryCode       => $countryCode,
        serviceAccessCode => $serviceAccessCode
    );
}

sub SystemBroadWorksMobilityServiceAccessCodeGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemBroadWorksMobilityServiceAccessCodeGetListRequest', @params );
}

sub SystemBroadWorksMobilityServiceAccessCodeModifyRequest {
    my $self              = shift;
    my $countryCode       = shift;
    my $serviceAccessCode = shift;
    my @params            = @_;

    return $self->_send_command(
        'SystemBroadWorksMobilityServiceAccessCodeModifyRequest',
        countryCode       => $countryCode,
        serviceAccessCode => $serviceAccessCode,
        @params
    );
}

sub SystemBroadWorksMobilityGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemBroadWorksMobilityGetRequest', @params );
}

sub SystemBroadWorksMobilityModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemBroadWorksMobilityModifyRequest', @params );
}

sub ServiceProviderBroadWorksMobilityGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderBroadWorksMobilityGetRequest', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderBroadWorksMobilityModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderBroadWorksMobilityModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub GroupBroadWorksMobilityGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupBroadWorksMobilityGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupBroadWorksMobilityModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupBroadWorksMobilityModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub UserBroadWorksMobilityGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserBroadWorksMobilityGetRequest', userId => $userId );
}

sub UserBroadWorksMobilityModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserBroadWorksMobilityModifyRequest', userId => $userId, @params );
}

sub SystemBusyLampFieldGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemBusyLampFieldGetRequest', @params );
}

sub SystemBusyLampFieldModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemBusyLampFieldModifyRequest', @params );
}

sub UserBusyLampFieldGetAvailableUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserBusyLampFieldGetAvailableUserListRequest', userId => $userId, @params );
}

sub UserBusyLampFieldGetRequest16sp2 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserBusyLampFieldGetRequest16sp2', userId => $userId );
}

sub UserBusyLampFieldModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserBusyLampFieldModifyRequest', userId => $userId, @params );
}

sub GroupCallCapacityManagementAddInstanceRequest {
    my $self                  = shift;
    my $serviceProviderId     = shift;
    my $groupId               = shift;
    my $name                  = shift;
    my $maxActiveCallsAllowed = shift;
    my @params                = @_;

    return $self->_send_command(
        'GroupCallCapacityManagementAddInstanceRequest',
        serviceProviderId     => $serviceProviderId,
        groupId               => $groupId,
        name                  => $name,
        maxActiveCallsAllowed => $maxActiveCallsAllowed,
        @params
    );
}

sub GroupCallCapacityManagementDeleteInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCapacityManagementDeleteInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCapacityManagementGetAvailableUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallCapacityManagementGetAvailableUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCapacityManagementGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallCapacityManagementGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallCapacityManagementGetInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_query(
        'GroupCallCapacityManagementGetInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupCallCapacityManagementModifyInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCapacityManagementModifyInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupCallCapacityManagementAddUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCapacityManagementAddUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupCallCapacityManagementDeleteUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCapacityManagementDeleteUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub EnterpriseCallCenterAgentUnavailableCodeAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $isActive          = shift;
    my $code              = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterAgentUnavailableCodeAddRequest',
        serviceProviderId => $serviceProviderId,
        isActive          => $isActive,
        code              => $code,
        @params
    );
}

sub EnterpriseCallCenterAgentUnavailableCodeDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $code              = shift;

    return $self->_send_command(
        'EnterpriseCallCenterAgentUnavailableCodeDeleteRequest',
        serviceProviderId => $serviceProviderId,
        code              => $code
    );
}

sub EnterpriseCallCenterAgentUnavailableCodeGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseCallCenterAgentUnavailableCodeGetListRequest',
        serviceProviderId => $serviceProviderId );
}

sub EnterpriseCallCenterAgentUnavailableCodeGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $code              = shift;

    return $self->_send_query(
        'EnterpriseCallCenterAgentUnavailableCodeGetRequest',
        serviceProviderId => $serviceProviderId,
        code              => $code
    );
}

sub EnterpriseCallCenterAgentUnavailableCodeModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $code              = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterAgentUnavailableCodeModifyRequest',
        serviceProviderId => $serviceProviderId,
        code              => $code,
        @params
    );
}

sub EnterpriseCallCenterAgentUnavailableCodeSettingsGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseCallCenterAgentUnavailableCodeSettingsGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub EnterpriseCallCenterAgentUnavailableCodeSettingsModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterAgentUnavailableCodeSettingsModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseCallCenterCallDispositionCodeAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $code              = shift;
    my $isActive          = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterCallDispositionCodeAddRequest',
        serviceProviderId => $serviceProviderId,
        code              => $code,
        isActive          => $isActive,
        @params
    );
}

sub EnterpriseCallCenterCallDispositionCodeDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $code              = shift;

    return $self->_send_command(
        'EnterpriseCallCenterCallDispositionCodeDeleteRequest',
        serviceProviderId => $serviceProviderId,
        code              => $code
    );
}

sub EnterpriseCallCenterCallDispositionCodeGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseCallCenterCallDispositionCodeGetListRequest',
        serviceProviderId => $serviceProviderId );
}

sub EnterpriseCallCenterCallDispositionCodeGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $code              = shift;

    return $self->_send_query(
        'EnterpriseCallCenterCallDispositionCodeGetRequest',
        serviceProviderId => $serviceProviderId,
        code              => $code
    );
}

sub EnterpriseCallCenterCallDispositionCodeGetUsageListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $code              = shift;

    return $self->_send_query(
        'EnterpriseCallCenterCallDispositionCodeGetUsageListRequest',
        serviceProviderId => $serviceProviderId,
        code              => $code
    );
}

sub EnterpriseCallCenterCallDispositionCodeModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $code              = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterCallDispositionCodeModifyRequest',
        serviceProviderId => $serviceProviderId,
        code              => $code,
        @params
    );
}

sub EnterpriseCallCenterCallDispositionCodeModifyActiveListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterCallDispositionCodeModifyActiveListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseCallCenterCurrentAndPastAgentGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseCallCenterCurrentAndPastAgentGetListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseCallCenterCurrentAndPastCallCenterGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseCallCenterCurrentAndPastCallCenterGetListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseCallCenterCurrentAndPastDNISGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $serviceUserId     = shift;

    return $self->_send_query(
        'EnterpriseCallCenterCurrentAndPastDNISGetListRequest',
        serviceProviderId => $serviceProviderId,
        serviceUserId     => $serviceUserId
    );
}

sub EnterpriseCallCenterEnhancedReportingBrandingGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseCallCenterEnhancedReportingBrandingGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub EnterpriseCallCenterEnhancedReportingBrandingModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterEnhancedReportingBrandingModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseCallCenterEnhancedReportingGetAvailableReportTemplateListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseCallCenterEnhancedReportingGetAvailableReportTemplateListRequest',
        serviceProviderId => $serviceProviderId );
}

sub EnterpriseCallCenterEnhancedReportingGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseCallCenterEnhancedReportingGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub EnterpriseCallCenterEnhancedReportingModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterEnhancedReportingModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseCallCenterEnhancedReportingReportTemplateAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterEnhancedReportingReportTemplateAddRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub EnterpriseCallCenterEnhancedReportingReportTemplateDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_command(
        'EnterpriseCallCenterEnhancedReportingReportTemplateDeleteRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub EnterpriseCallCenterEnhancedReportingReportTemplateGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseCallCenterEnhancedReportingReportTemplateGetListRequest',
        serviceProviderId => $serviceProviderId );
}

sub EnterpriseCallCenterEnhancedReportingReportTemplateGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_query(
        'EnterpriseCallCenterEnhancedReportingReportTemplateGetRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub EnterpriseCallCenterEnhancedReportingReportTemplateModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterEnhancedReportingReportTemplateModifyRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub EnterpriseCallCenterEnhancedReportingScheduledReportAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterEnhancedReportingScheduledReportAddRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub EnterpriseCallCenterEnhancedReportingScheduledReportDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_command(
        'EnterpriseCallCenterEnhancedReportingScheduledReportDeleteRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub EnterpriseCallCenterEnhancedReportingScheduledReportGetActiveListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseCallCenterEnhancedReportingScheduledReportGetActiveListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseCallCenterEnhancedReportingScheduledReportGetCompletedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseCallCenterEnhancedReportingScheduledReportGetCompletedListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseCallCenterEnhancedReportingScheduledReportGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseCallCenterEnhancedReportingScheduledReportGetListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseCallCenterEnhancedReportingScheduledReportGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_query(
        'EnterpriseCallCenterEnhancedReportingScheduledReportGetRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub EnterpriseCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;

    return $self->_send_query(
        'EnterpriseCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name
    );
}

sub EnterpriseCallCenterEnhancedReportingScheduledReportModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterEnhancedReportingScheduledReportModifyRequest',
        serviceProviderId => $serviceProviderId,
        name              => $name,
        @params
    );
}

sub EnterpriseCallCenterGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseCallCenterGetRequest', serviceProviderId => $serviceProviderId );
}

sub EnterpriseCallCenterGetRoutingPolicyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseCallCenterGetRoutingPolicyRequest', serviceProviderId => $serviceProviderId );
}

sub EnterpriseCallCenterModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command( 'EnterpriseCallCenterModifyRequest', serviceProviderId => $serviceProviderId,
        @params );
}

sub EnterpriseCallCenterModifyRoutingPolicyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterpriseCallCenterModifyRoutingPolicyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub GroupCallCenterAddAgentListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupCallCenterAddAgentListRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupCallCenterAddInstanceRequest17sp3 {
    my $self                   = shift;
    my $serviceProviderId      = shift;
    my $groupId                = shift;
    my $serviceUserId          = shift;
    my $serviceInstanceProfile = shift;
    my $type                   = shift;
    my $policy                 = shift;
    my $enableVideo            = shift;
    my $queueLength            = shift;
    my @params                 = @_;

    return $self->_send_command(
        'GroupCallCenterAddInstanceRequest17sp3',
        serviceProviderId      => $serviceProviderId,
        groupId                => $groupId,
        serviceUserId          => $serviceUserId,
        serviceInstanceProfile => $serviceInstanceProfile,
        type                   => $type,
        policy                 => $policy,
        enableVideo            => $enableVideo,
        queueLength            => $queueLength,
        @params
    );
}

sub GroupCallCenterAddDNISRequest {
    my $self    = shift;
    my $dnisKey = shift;
    my @params  = @_;

    return $self->_send_command( 'GroupCallCenterAddDNISRequest', dnisKey => $dnisKey, @params );
}

sub GroupCallCenterAddSupervisorListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupCallCenterAddSupervisorListRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupCallCenterAgentUnavailableCodeAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $isActive          = shift;
    my $code              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterAgentUnavailableCodeAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        isActive          => $isActive,
        code              => $code,
        @params
    );
}

sub GroupCallCenterAgentUnavailableCodeDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $code              = shift;

    return $self->_send_command(
        'GroupCallCenterAgentUnavailableCodeDeleteRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        code              => $code
    );
}

sub GroupCallCenterAgentUnavailableCodeGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallCenterAgentUnavailableCodeGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallCenterAgentUnavailableCodeGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $code              = shift;

    return $self->_send_query(
        'GroupCallCenterAgentUnavailableCodeGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        code              => $code
    );
}

sub GroupCallCenterAgentUnavailableCodeModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $code              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterAgentUnavailableCodeModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        code              => $code,
        @params
    );
}

sub GroupCallCenterAgentUnavailableCodeSettingsGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallCenterAgentUnavailableCodeSettingsGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallCenterAgentUnavailableCodeSettingsModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterAgentUnavailableCodeSettingsModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterBouncedCallGetRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterBouncedCallGetRequest17', serviceUserId => $serviceUserId );
}

sub GroupCallCenterBouncedCallModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupCallCenterBouncedCallModifyRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupCallCenterCallDispositionCodeAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $code              = shift;
    my $isActive          = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterCallDispositionCodeAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        code              => $code,
        isActive          => $isActive,
        @params
    );
}

sub GroupCallCenterCallDispositionCodeDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $code              = shift;

    return $self->_send_command(
        'GroupCallCenterCallDispositionCodeDeleteRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        code              => $code
    );
}

sub GroupCallCenterCallDispositionCodeGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallCenterCallDispositionCodeGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallCenterCallDispositionCodeGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $code              = shift;

    return $self->_send_query(
        'GroupCallCenterCallDispositionCodeGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        code              => $code
    );
}

sub GroupCallCenterCallDispositionCodeGetUsageListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $code              = shift;

    return $self->_send_query(
        'GroupCallCenterCallDispositionCodeGetUsageListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        code              => $code
    );
}

sub GroupCallCenterCallDispositionCodeModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $code              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterCallDispositionCodeModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        code              => $code,
        @params
    );
}

sub GroupCallCenterCallDispositionCodeModifyActiveListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterCallDispositionCodeModifyActiveListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterComfortMessageBypassGetRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterComfortMessageBypassGetRequest17', serviceUserId => $serviceUserId );
}

sub GroupCallCenterComfortMessageBypassModifyRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterComfortMessageBypassModifyRequest17',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupCallCenterCurrentAndPastAgentGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallCenterCurrentAndPastAgentGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterCurrentAndPastCallCenterGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallCenterCurrentAndPastCallCenterGetListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub GroupCallCenterCurrentAndPastDNISGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $serviceUserId     = shift;

    return $self->_send_query(
        'GroupCallCenterCurrentAndPastDNISGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        serviceUserId     => $serviceUserId
    );
}

sub GroupCallCenterDeleteAgentListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupCallCenterDeleteAgentListRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupCallCenterDeleteDNISRequest {
    my $self    = shift;
    my $dnisKey = shift;

    return $self->_send_command( 'GroupCallCenterDeleteDNISRequest', dnisKey => $dnisKey );
}

sub GroupCallCenterDeleteInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_command( 'GroupCallCenterDeleteInstanceRequest', serviceUserId => $serviceUserId );
}

sub GroupCallCenterDeleteSupervisorListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupCallCenterDeleteSupervisorListRequest', serviceUserId => $serviceUserId,
        @params );
}

sub GroupCallCenterDistinctiveRingingGetRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterDistinctiveRingingGetRequest', serviceUserId => $serviceUserId );
}

sub GroupCallCenterDistinctiveRingingModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterDistinctiveRingingModifyRequest',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupCallCenterEnhancedReportingBrandingGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallCenterEnhancedReportingBrandingGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallCenterEnhancedReportingBrandingModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterEnhancedReportingBrandingModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterEnhancedReportingGetAvailableReportTemplateListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallCenterEnhancedReportingGetAvailableReportTemplateListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallCenterEnhancedReportingGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallCenterEnhancedReportingGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallCenterEnhancedReportingModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterEnhancedReportingModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterEnhancedReportingReportTemplateAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterEnhancedReportingReportTemplateAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupCallCenterEnhancedReportingReportTemplateDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_command(
        'GroupCallCenterEnhancedReportingReportTemplateDeleteRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupCallCenterEnhancedReportingReportTemplateGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallCenterEnhancedReportingReportTemplateGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallCenterEnhancedReportingReportTemplateGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_query(
        'GroupCallCenterEnhancedReportingReportTemplateGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupCallCenterEnhancedReportingReportTemplateModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterEnhancedReportingReportTemplateModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupCallCenterEnhancedReportingScheduledReportAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterEnhancedReportingScheduledReportAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupCallCenterEnhancedReportingScheduledReportDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_command(
        'GroupCallCenterEnhancedReportingScheduledReportDeleteRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupCallCenterEnhancedReportingScheduledReportGetActiveListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallCenterEnhancedReportingScheduledReportGetActiveListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterEnhancedReportingScheduledReportGetCompletedListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallCenterEnhancedReportingScheduledReportGetCompletedListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterEnhancedReportingScheduledReportGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallCenterEnhancedReportingScheduledReportGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_query(
        'GroupCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupCallCenterEnhancedReportingScheduledReportGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_query(
        'GroupCallCenterEnhancedReportingScheduledReportGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupCallCenterEnhancedReportingScheduledReportModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterEnhancedReportingScheduledReportModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupCallCenterForcedForwardingGetRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterForcedForwardingGetRequest17', serviceUserId => $serviceUserId );
}

sub GroupCallCenterForcedForwardingModifyRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterForcedForwardingModifyRequest17',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupCallCenterGetAgentListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_query( 'GroupCallCenterGetAgentListRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupCallCenterGetAnnouncementRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterGetAnnouncementRequest17', serviceUserId => $serviceUserId );
}

sub GroupCallCenterGetAvailableAgentListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $callCenterType    = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallCenterGetAvailableAgentListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        callCenterType    => $callCenterType,
        @params
    );
}

sub GroupCallCenterGetAvailableSupervisorListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallCenterGetAvailableSupervisorListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterGetDNISAgentListRequest {
    my $self    = shift;
    my $dnisKey = shift;

    return $self->_send_query( 'GroupCallCenterGetDNISAgentListRequest', dnisKey => $dnisKey );
}

sub GroupCallCenterGetDNISAnnouncementRequest {
    my $self    = shift;
    my $dnisKey = shift;

    return $self->_send_query( 'GroupCallCenterGetDNISAnnouncementRequest', dnisKey => $dnisKey );
}

sub GroupCallCenterGetDNISListRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterGetDNISListRequest', serviceUserId => $serviceUserId );
}

sub GroupCallCenterGetDNISRequest {
    my $self    = shift;
    my $dnisKey = shift;

    return $self->_send_query( 'GroupCallCenterGetDNISRequest', dnisKey => $dnisKey );
}

sub GroupCallCenterGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallCenterGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterGetDistinctiveRingingRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterGetDistinctiveRingingRequest', serviceUserId => $serviceUserId );
}

sub GroupCallCenterGetInstanceRequest17sp3 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterGetInstanceRequest17sp3', serviceUserId => $serviceUserId );
}

sub GroupCallCenterGetInstanceStatisticsReportingRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterGetInstanceStatisticsReportingRequest17sp1',
        serviceUserId => $serviceUserId );
}

sub GroupCallCenterGetInstanceStatisticsRequest14sp9 {
    my $self            = shift;
    my $serviceUserId   = shift;
    my $statisticsRange = shift;

    return $self->_send_query(
        'GroupCallCenterGetInstanceStatisticsRequest14sp9',
        serviceUserId   => $serviceUserId,
        statisticsRange => $statisticsRange
    );
}

sub GroupCallCenterGetInstanceQueueStatusRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterGetInstanceQueueStatusRequest', serviceUserId => $serviceUserId );
}

sub GroupCallCenterGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query( 'GroupCallCenterGetRequest', serviceProviderId => $serviceProviderId,
        groupId => $groupId );
}

sub GroupCallCenterGetRoutingPolicyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallCenterGetRoutingPolicyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallCenterGetSupervisorListRequest16 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterGetSupervisorListRequest16', serviceUserId => $serviceUserId );
}

sub GroupCallCenterGetUnlicensedAgentListRequest {
    my $self           = shift;
    my $serviceUserId  = shift;
    my $callCenterType = shift;

    return $self->_send_query(
        'GroupCallCenterGetUnlicensedAgentListRequest',
        serviceUserId  => $serviceUserId,
        callCenterType => $callCenterType
    );
}

sub GroupCallCenterHolidayServiceGetRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterHolidayServiceGetRequest17sp1', serviceUserId => $serviceUserId );
}

sub GroupCallCenterHolidayServiceModifyRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterHolidayServiceModifyRequest17sp1',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupCallCenterModifyActiveInstanceListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'GroupCallCenterModifyActiveInstanceListRequest', @params );
}

sub GroupCallCenterModifyAgentListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupCallCenterModifyAgentListRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupCallCenterModifyAnnouncementRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupCallCenterModifyAnnouncementRequest17', serviceUserId => $serviceUserId,
        @params );
}

sub GroupCallCenterModifyDNISAnnouncementRequest {
    my $self    = shift;
    my $dnisKey = shift;
    my @params  = @_;

    return $self->_send_command( 'GroupCallCenterModifyDNISAnnouncementRequest', dnisKey => $dnisKey, @params );
}

sub GroupCallCenterModifyDistinctiveRingingRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterModifyDistinctiveRingingRequest',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupCallCenterModifyDNISParametersRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupCallCenterModifyDNISParametersRequest', serviceUserId => $serviceUserId,
        @params );
}

sub GroupCallCenterModifyDNISRequest {
    my $self    = shift;
    my $dnisKey = shift;
    my @params  = @_;

    return $self->_send_command( 'GroupCallCenterModifyDNISRequest', dnisKey => $dnisKey, @params );
}

sub GroupCallCenterModifyInstanceRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupCallCenterModifyInstanceRequest17sp1', serviceUserId => $serviceUserId,
        @params );
}

sub GroupCallCenterModifyInstanceStatisticsReportingRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterModifyInstanceStatisticsReportingRequest17sp1',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupCallCenterModifyInstanceWeightedCallDistributionRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterModifyInstanceWeightedCallDistributionRequest',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupCallCenterModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterModifyRoutingPolicyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallCenterModifyRoutingPolicyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallCenterModifySupervisorListRequest16 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterModifySupervisorListRequest16',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupCallCenterNightServiceGetRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterNightServiceGetRequest17sp1', serviceUserId => $serviceUserId );
}

sub GroupCallCenterNightServiceModifyRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterNightServiceModifyRequest17sp1',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupCallCenterOverflowGetRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterOverflowGetRequest17', serviceUserId => $serviceUserId );
}

sub GroupCallCenterOverflowModifyRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupCallCenterOverflowModifyRequest17', serviceUserId => $serviceUserId, @params );
}

sub GroupCallCenterQueueStatusNotificationGetRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterQueueStatusNotificationGetRequest', serviceUserId => $serviceUserId );
}

sub GroupCallCenterQueueStatusNotificationModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterQueueStatusNotificationModifyRequest',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupCallCenterQueueCallDispositionCodeAddRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my $code          = shift;
    my $isActive      = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterQueueCallDispositionCodeAddRequest',
        serviceUserId => $serviceUserId,
        code          => $code,
        isActive      => $isActive,
        @params
    );
}

sub GroupCallCenterQueueCallDispositionCodeDeleteRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my $code          = shift;

    return $self->_send_command(
        'GroupCallCenterQueueCallDispositionCodeDeleteRequest',
        serviceUserId => $serviceUserId,
        code          => $code
    );
}

sub GroupCallCenterQueueCallDispositionCodeGetListRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterQueueCallDispositionCodeGetListRequest',
        serviceUserId => $serviceUserId );
}

sub GroupCallCenterQueueCallDispositionCodeGetRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my $code          = shift;

    return $self->_send_query(
        'GroupCallCenterQueueCallDispositionCodeGetRequest',
        serviceUserId => $serviceUserId,
        code          => $code
    );
}

sub GroupCallCenterQueueCallDispositionCodeModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my $code          = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterQueueCallDispositionCodeModifyRequest',
        serviceUserId => $serviceUserId,
        code          => $code,
        @params
    );
}

sub GroupCallCenterQueueCallDispositionCodeSettingsGetRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterQueueCallDispositionCodeSettingsGetRequest',
        serviceUserId => $serviceUserId );
}

sub GroupCallCenterQueueCallDispositionCodeSettingsModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupCallCenterQueueCallDispositionCodeSettingsModifyRequest',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupCallCenterStrandedCallGetRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupCallCenterStrandedCallGetRequest17', serviceUserId => $serviceUserId );
}

sub GroupCallCenterStrandedCallModifyRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupCallCenterStrandedCallModifyRequest17', serviceUserId => $serviceUserId,
        @params );
}

sub SystemCallCenterEnhancedReportingBrandingGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallCenterEnhancedReportingBrandingGetRequest', @params );
}

sub SystemCallCenterEnhancedReportingBrandingModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallCenterEnhancedReportingBrandingModifyRequest', @params );
}

sub SystemCallCenterEnhancedReportingDataTemplateGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallCenterEnhancedReportingDataTemplateGetListRequest', @params );
}

sub SystemCallCenterEnhancedReportingGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallCenterEnhancedReportingGetRequest', @params );
}

sub SystemCallCenterEnhancedReportingModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallCenterEnhancedReportingModifyRequest', @params );
}

sub SystemCallCenterEnhancedReportingReportTemplateAddRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallCenterEnhancedReportingReportTemplateAddRequest', name => $name, @params );
}

sub SystemCallCenterEnhancedReportingReportTemplateDeleteRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemCallCenterEnhancedReportingReportTemplateDeleteRequest', name => $name );
}

sub SystemCallCenterEnhancedReportingReportTemplateGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallCenterEnhancedReportingReportTemplateGetListRequest', @params );
}

sub SystemCallCenterEnhancedReportingReportTemplateGetRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemCallCenterEnhancedReportingReportTemplateGetRequest', name => $name );
}

sub SystemCallCenterEnhancedReportingReportTemplateModifyRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallCenterEnhancedReportingReportTemplateModifyRequest', name => $name,
        @params );
}

sub SystemCallCenterEnhancedReportingScheduledReportGetActiveListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallCenterEnhancedReportingScheduledReportGetActiveListRequest', @params );
}

sub SystemCallCenterEnhancedReportingScheduledReportGetCompletedListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallCenterEnhancedReportingScheduledReportGetCompletedListRequest', @params );
}

sub SystemCallCenterEnhancedReportingScheduledReportGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallCenterEnhancedReportingScheduledReportGetListRequest', @params );
}

sub SystemCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest',
        name => $name );
}

sub SystemCallCenterEnhancedReportingScheduledTaskParametersGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallCenterEnhancedReportingScheduledTaskParametersGetRequest', @params );
}

sub SystemCallCenterEnhancedReportingScheduledTaskParametersModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallCenterEnhancedReportingScheduledTaskParametersModifyRequest', @params );
}

sub SystemCallCenterGetRequest17 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallCenterGetRequest17', @params );
}

sub SystemCallCenterModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallCenterModifyRequest', @params );
}

sub SystemCallCenterReportingServerAddRequest {
    my $self       = shift;
    my $name       = shift;
    my $url        = shift;
    my $netAddress = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemCallCenterReportingServerAddRequest',
        name       => $name,
        url        => $url,
        netAddress => $netAddress,
        @params
    );
}

sub SystemCallCenterReportingServerDeleteRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemCallCenterReportingServerDeleteRequest', name => $name );
}

sub SystemCallCenterReportingServerGetCallCenterListRequest {
    my $self                = shift;
    my $reportingServerName = shift;

    return $self->_send_query( 'SystemCallCenterReportingServerGetCallCenterListRequest',
        reportingServerName => $reportingServerName );
}

sub SystemCallCenterReportingServerGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallCenterReportingServerGetListRequest', @params );
}

sub SystemCallCenterReportingServerModifyRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallCenterReportingServerModifyRequest', name => $name, @params );
}

sub UserCallCenterAddSupervisedAgentListRequest {
    my $self             = shift;
    my $supervisorUserId = shift;
    my $serviceUserId    = shift;
    my @params           = @_;

    return $self->_send_command(
        'UserCallCenterAddSupervisedAgentListRequest',
        supervisorUserId => $supervisorUserId,
        serviceUserId    => $serviceUserId,
        @params
    );
}

sub UserCallCenterAgentSignOutRequest {
    my $self        = shift;
    my $agentUserId = shift;

    return $self->_send_query( 'UserCallCenterAgentSignOutRequest', agentUserId => $agentUserId );
}

sub UserCallCenterAgentDetailsGetRequest {
    my $self        = shift;
    my $agentUserId = shift;

    return $self->_send_query( 'UserCallCenterAgentDetailsGetRequest', agentUserId => $agentUserId );
}

sub UserCallCenterCallDispositionCodeGetAvailableListRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'UserCallCenterCallDispositionCodeGetAvailableListRequest',
        serviceUserId => $serviceUserId );
}

sub UserCallCenterDeleteSupervisedAgentListRequest {
    my $self             = shift;
    my $supervisorUserId = shift;
    my $serviceUserId    = shift;
    my @params           = @_;

    return $self->_send_command(
        'UserCallCenterDeleteSupervisedAgentListRequest',
        supervisorUserId => $supervisorUserId,
        serviceUserId    => $serviceUserId,
        @params
    );
}

sub UserCallCenterEnhancedReportingReportTemplateParamInfoGetRequest {
    my $self           = shift;
    my $reportTemplate = shift;

    return $self->_send_query( 'UserCallCenterEnhancedReportingReportTemplateParamInfoGetRequest',
        reportTemplate => $reportTemplate );
}

sub UserCallCenterEnhancedReportingScheduledReportDeleteRequest {
    my $self             = shift;
    my $supervisorUserId = shift;
    my $name             = shift;

    return $self->_send_command(
        'UserCallCenterEnhancedReportingScheduledReportDeleteRequest',
        supervisorUserId => $supervisorUserId,
        name             => $name
    );
}

sub UserCallCenterEnhancedReportingScheduledReportGetRequest {
    my $self             = shift;
    my $supervisorUserId = shift;
    my $name             = shift;

    return $self->_send_query(
        'UserCallCenterEnhancedReportingScheduledReportGetRequest',
        supervisorUserId => $supervisorUserId,
        name             => $name
    );
}

sub UserCallCenterEnhancedReportingScheduledReportModifyRequest {
    my $self             = shift;
    my $supervisorUserId = shift;
    my $name             = shift;
    my @params           = @_;

    return $self->_send_command(
        'UserCallCenterEnhancedReportingScheduledReportModifyRequest',
        supervisorUserId => $supervisorUserId,
        name             => $name,
        @params
    );
}

sub UserCallCenterGetAgentSupervisorListRequest {
    my $self          = shift;
    my $agentUserId   = shift;
    my $serviceUserId = shift;

    return $self->_send_query(
        'UserCallCenterGetAgentSupervisorListRequest',
        agentUserId   => $agentUserId,
        serviceUserId => $serviceUserId
    );
}

sub UserCallCenterGetAvailableCallCenterListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallCenterGetAvailableCallCenterListRequest', userId => $userId );
}

sub UserCallCenterGetAvailableDNISListRequest {
    my $self        = shift;
    my $agentUserId = shift;

    return $self->_send_query( 'UserCallCenterGetAvailableDNISListRequest', agentUserId => $agentUserId );
}

sub UserCallCenterGetRequest17 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallCenterGetRequest17', userId => $userId );
}

sub UserCallCenterGetSupervisedAgentListRequest {
    my $self             = shift;
    my $supervisorUserId = shift;
    my $serviceUserId    = shift;
    my @params           = @_;

    return $self->_send_query(
        'UserCallCenterGetSupervisedAgentListRequest',
        supervisorUserId => $supervisorUserId,
        serviceUserId    => $serviceUserId,
        @params
    );
}

sub UserCallCenterGetSupervisorCallCenterListRequest {
    my $self             = shift;
    my $supervisorUserId = shift;

    return $self->_send_query( 'UserCallCenterGetSupervisorCallCenterListRequest',
        supervisorUserId => $supervisorUserId );
}

sub UserCallCenterModifyCallCenterListRequest {
    my $self        = shift;
    my $agentUserId = shift;
    my @params      = @_;

    return $self->_send_command( 'UserCallCenterModifyCallCenterListRequest', agentUserId => $agentUserId, @params );
}

sub UserCallCenterModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallCenterModifyRequest', userId => $userId, @params );
}

sub UserCallCenterModifySupervisedAgentListRequest {
    my $self             = shift;
    my $supervisorUserId = shift;
    my $serviceUserId    = shift;
    my @params           = @_;

    return $self->_send_command(
        'UserCallCenterModifySupervisedAgentListRequest',
        supervisorUserId => $supervisorUserId,
        serviceUserId    => $serviceUserId,
        @params
    );
}

sub CallCenterAgentAvailability {
    my $self          = shift;
    my $serviceUserId = shift;
    my $available     = shift;

    return $self->_send_query( 'CallCenterAgentAvailability', serviceUserId => $serviceUserId,
        available => $available );
}

sub UserCallCenterMonitoringGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallCenterMonitoringGetRequest', userId => $userId );
}

sub UserCallCenterMonitoringModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallCenterMonitoringModifyRequest', userId => $userId, @params );
}

sub UserCallForwardingAlwaysGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallForwardingAlwaysGetRequest', userId => $userId );
}

sub UserCallForwardingAlwaysModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallForwardingAlwaysModifyRequest', userId => $userId, @params );
}

sub UserCallForwardingBusyGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallForwardingBusyGetRequest', userId => $userId );
}

sub UserCallForwardingBusyModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallForwardingBusyModifyRequest', userId => $userId, @params );
}

sub UserCallForwardingNoAnswerGetRequest13mp16 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallForwardingNoAnswerGetRequest13mp16', userId => $userId );
}

sub UserCallForwardingNoAnswerModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallForwardingNoAnswerModifyRequest', userId => $userId, @params );
}

sub UserCallForwardingNotReachableGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallForwardingNotReachableGetRequest', userId => $userId );
}

sub UserCallForwardingNotReachableModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallForwardingNotReachableModifyRequest', userId => $userId, @params );
}

sub UserCallForwardingSelectiveAddCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserCallForwardingSelectiveAddCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserCallForwardingSelectiveDeleteCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_command(
        'UserCallForwardingSelectiveDeleteCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserCallForwardingSelectiveGetCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_query(
        'UserCallForwardingSelectiveGetCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserCallForwardingSelectiveGetRequest16 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallForwardingSelectiveGetRequest16', userId => $userId );
}

sub UserCallForwardingSelectiveModifyCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserCallForwardingSelectiveModifyCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserCallForwardingSelectiveModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallForwardingSelectiveModifyRequest', userId => $userId, @params );
}

sub SystemCallMeNowGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallMeNowGetRequest', @params );
}

sub SystemCallMeNowModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallMeNowModifyRequest', @params );
}

sub UserCallMeNowAddCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserCallMeNowAddCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserCallMeNowDeleteCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_command( 'UserCallMeNowDeleteCriteriaRequest', userId => $userId,
        criteriaName => $criteriaName );
}

sub UserCallMeNowGetCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_query( 'UserCallMeNowGetCriteriaRequest', userId => $userId, criteriaName => $criteriaName );
}

sub UserCallMeNowGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallMeNowGetRequest', userId => $userId );
}

sub UserCallMeNowModifyCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserCallMeNowModifyCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserCallMeNowModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallMeNowModifyRequest', userId => $userId, @params );
}

sub SystemCallNotifyGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallNotifyGetRequest', @params );
}

sub SystemCallNotifyModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallNotifyModifyRequest', @params );
}

sub UserCallNotifyAddCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserCallNotifyAddCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserCallNotifyGetCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_query( 'UserCallNotifyGetCriteriaRequest16', userId => $userId, criteriaName => $criteriaName );
}

sub UserCallNotifyDeleteCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_command( 'UserCallNotifyDeleteCriteriaRequest', userId => $userId,
        criteriaName => $criteriaName );
}

sub UserCallNotifyModifyCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserCallNotifyModifyCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserCallNotifyGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallNotifyGetRequest', userId => $userId );
}

sub UserCallNotifyModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallNotifyModifyRequest', userId => $userId, @params );
}

sub GroupCallParkAddInstanceRequest16sp2 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallParkAddInstanceRequest16sp2',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupCallParkDeleteInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_command(
        'GroupCallParkDeleteInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupCallParkGetAvailableAlternateRecallUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallParkGetAvailableAlternateRecallUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallParkGetAvailableUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallParkGetAvailableUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallParkGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallParkGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallParkGetInstanceRequest16sp2 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_query(
        'GroupCallParkGetInstanceRequest16sp2',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupCallParkGetRequest16sp2 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallParkGetRequest16sp2',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallParkModifyInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallParkModifyInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupCallParkModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallParkModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub UserCallParkGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallParkGetRequest', userId => $userId );
}

sub GroupCallPickupAddInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallPickupAddInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupCallPickupDeleteInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_command(
        'GroupCallPickupDeleteInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupCallPickupGetAvailableUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupCallPickupGetAvailableUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallPickupGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallPickupGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallPickupGetInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_query(
        'GroupCallPickupGetInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupCallPickupModifyInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallPickupModifyInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub UserCallPickupGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallPickupGetRequest', userId => $userId );
}

sub GroupCallRecordingGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallRecordingGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallRecordingModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallRecordingModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub SystemCallRecordingAddPlatformRequest {
    my $self          = shift;
    my $name          = shift;
    my $netAddress    = shift;
    my $port          = shift;
    my $mediaStream   = shift;
    my $transportType = shift;
    my @params        = @_;

    return $self->_send_command(
        'SystemCallRecordingAddPlatformRequest',
        name          => $name,
        netAddress    => $netAddress,
        port          => $port,
        mediaStream   => $mediaStream,
        transportType => $transportType,
        @params
    );
}

sub SystemCallRecordingDeletePlatformRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_command( 'SystemCallRecordingDeletePlatformRequest', name => $name );
}

sub SystemCallRecordingGetPlatformListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallRecordingGetPlatformListRequest', @params );
}

sub SystemCallRecordingGetPlatformUsageRequest {
    my $self = shift;
    my $name = shift;

    return $self->_send_query( 'SystemCallRecordingGetPlatformUsageRequest', name => $name );
}

sub SystemCallRecordingModifyPlatformRequest {
    my $self   = shift;
    my $name   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallRecordingModifyPlatformRequest', name => $name, @params );
}

sub UserCallRecordingGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallRecordingGetRequest', userId => $userId );
}

sub UserCallRecordingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallRecordingModifyRequest', userId => $userId, @params );
}

sub SystemCallReturnGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallReturnGetRequest', @params );
}

sub SystemCallReturnModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallReturnModifyRequest', @params );
}

sub UserCallTransferGetRequest14sp4 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallTransferGetRequest14sp4', userId => $userId );
}

sub UserCallTransferModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallTransferModifyRequest', userId => $userId, @params );
}

sub UserCallWaitingGetRequest17sp4 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallWaitingGetRequest17sp4', userId => $userId );
}

sub UserCallWaitingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallWaitingModifyRequest', userId => $userId, @params );
}

sub SystemCallWaitingGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallWaitingGetRequest', @params );
}

sub SystemCallWaitingModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallWaitingModifyRequest', @params );
}

sub UserCallingLineIDBlockingOverrideGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallingLineIDBlockingOverrideGetRequest', userId => $userId );
}

sub UserCallingLineIDBlockingOverrideModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallingLineIDBlockingOverrideModifyRequest', userId => $userId, @params );
}

sub UserCallingLineIDDeliveryBlockingGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallingLineIDDeliveryBlockingGetRequest', userId => $userId );
}

sub UserCallingLineIDDeliveryBlockingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallingLineIDDeliveryBlockingModifyRequest', userId => $userId, @params );
}

sub UserCallingNameDeliveryGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallingNameDeliveryGetRequest', userId => $userId );
}

sub UserCallingNameDeliveryModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallingNameDeliveryModifyRequest', userId => $userId, @params );
}

sub SystemCallingNameRetrievalGetRequest17sp4 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallingNameRetrievalGetRequest17sp4', @params );
}

sub SystemCallingNameRetrievalModifyRequest16sp1 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCallingNameRetrievalModifyRequest16sp1', @params );
}

sub UserCallingNameRetrievalGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallingNameRetrievalGetRequest', userId => $userId );
}

sub UserCallingNameRetrievalModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallingNameRetrievalModifyRequest', userId => $userId, @params );
}

sub UserCallingNumberDeliveryGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallingNumberDeliveryGetRequest', userId => $userId );
}

sub UserCallingNumberDeliveryModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallingNumberDeliveryModifyRequest', userId => $userId, @params );
}

sub SystemCallingPartyCategoryAddRequest {
    my $self     = shift;
    my $category = shift;
    my @params   = @_;

    return $self->_send_command( 'SystemCallingPartyCategoryAddRequest', category => $category, @params );
}

sub SystemCallingPartyCategoryDeleteRequest {
    my $self     = shift;
    my $category = shift;

    return $self->_send_command( 'SystemCallingPartyCategoryDeleteRequest', category => $category );
}

sub SystemCallingPartyCategoryGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCallingPartyCategoryGetListRequest', @params );
}

sub SystemCallingPartyCategoryGetRequest {
    my $self     = shift;
    my $category = shift;

    return $self->_send_query( 'SystemCallingPartyCategoryGetRequest', category => $category );
}

sub SystemCallingPartyCategoryModifyRequest {
    my $self     = shift;
    my $category = shift;
    my @params   = @_;

    return $self->_send_command( 'SystemCallingPartyCategoryModifyRequest', category => $category, @params );
}

sub UserCallingPartyCategoryGetRequest16 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCallingPartyCategoryGetRequest16', userId => $userId );
}

sub UserCallingPartyCategoryModifyRequest16 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCallingPartyCategoryModifyRequest16', userId => $userId, @params );
}

sub GroupCallingPlanAddDigitPatternRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my $digitPattern      = shift;

    return $self->_send_command(
        'GroupCallingPlanAddDigitPatternRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        digitPattern      => $digitPattern
    );
}

sub GroupCallingPlanDeleteDigitPatternListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallingPlanDeleteDigitPatternListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupCallingPlanGetDigitPatternListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCallingPlanGetDigitPatternListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCallingPlanModifyDigitPatternRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCallingPlanModifyDigitPatternRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub UserChargeNumberGetRequest14sp9 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserChargeNumberGetRequest14sp9', userId => $userId );
}

sub UserChargeNumberModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserChargeNumberModifyRequest', userId => $userId, @params );
}

sub SystemClassmarkAddRequest {
    my $self      = shift;
    my $classmark = shift;
    my $value     = shift;
    my @params    = @_;

    return $self->_send_command( 'SystemClassmarkAddRequest', classmark => $classmark, value => $value, @params );
}

sub SystemClassmarkDeleteRequest {
    my $self      = shift;
    my $classmark = shift;

    return $self->_send_command( 'SystemClassmarkDeleteRequest', classmark => $classmark );
}

sub SystemClassmarkGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemClassmarkGetListRequest', @params );
}

sub SystemClassmarkModifyRequest {
    my $self      = shift;
    my $classmark = shift;
    my @params    = @_;

    return $self->_send_command( 'SystemClassmarkModifyRequest', classmark => $classmark, @params );
}

sub SystemClassmarkGetUtilizationListRequest {
    my $self      = shift;
    my $classmark = shift;
    my @params    = @_;

    return $self->_send_query( 'SystemClassmarkGetUtilizationListRequest', classmark => $classmark, @params );
}

sub UserClassmarkGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserClassmarkGetRequest', userId => $userId );
}

sub UserClassmarkModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserClassmarkModifyRequest', userId => $userId, @params );
}

sub GroupCommPilotCallManagerGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCommPilotCallManagerGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCommPilotCallManagerModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCommPilotCallManagerModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub UserCommPilotCallManagerGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCommPilotCallManagerGetRequest', userId => $userId );
}

sub UserCommPilotCallManagerModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCommPilotCallManagerModifyRequest', userId => $userId, @params );
}

sub UserCommPilotExpressGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCommPilotExpressGetRequest', userId => $userId );
}

sub UserCommPilotExpressModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCommPilotExpressModifyRequest', userId => $userId, @params );
}

sub UserCommPilotExpressSRGetRequest13mp16 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCommPilotExpressSRGetRequest13mp16', userId => $userId );
}

sub UserCommPilotExpressSRModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCommPilotExpressSRModifyRequest', userId => $userId, @params );
}

sub SystemCommunicationBarringUserControlGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCommunicationBarringUserControlGetRequest', @params );
}

sub SystemCommunicationBarringUserControlModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCommunicationBarringUserControlModifyRequest', @params );
}

sub UserCommunicationBarringUserControlGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCommunicationBarringUserControlGetRequest', userId => $userId );
}

sub UserCommunicationBarringUserControlModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCommunicationBarringUserControlModifyRequest', userId => $userId, @params );
}

sub ServiceProviderBroadWorksCommunicatorGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderBroadWorksCommunicatorGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderBroadWorksCommunicatorModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'ServiceProviderBroadWorksCommunicatorModifyRequest', @params );
}

sub UserBroadWorksCommunicatorGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserBroadWorksCommunicatorGetRequest', userId => $userId );
}

sub SystemConnectedLineIdentificationPresentationGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemConnectedLineIdentificationPresentationGetRequest', @params );
}

sub SystemConnectedLineIdentificationPresentationModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemConnectedLineIdentificationPresentationModifyRequest', @params );
}

sub UserConnectedLineIdentificationRestrictionGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserConnectedLineIdentificationRestrictionGetRequest', userId => $userId );
}

sub UserConnectedLineIdentificationRestrictionModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserConnectedLineIdentificationRestrictionModifyRequest', userId => $userId,
        @params );
}

sub GroupCustomRingbackGroupGetRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupCustomRingbackGroupGetRequest16',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupCustomRingbackGroupModifyRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupCustomRingbackGroupModifyRequest16',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub UserCustomRingbackUserAddCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserCustomRingbackUserAddCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserCustomRingbackUserDeleteCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_command(
        'UserCustomRingbackUserDeleteCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserCustomRingbackUserGetCriteriaListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserCustomRingbackUserGetCriteriaListRequest', userId => $userId );
}

sub UserCustomRingbackUserGetCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_query(
        'UserCustomRingbackUserGetCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserCustomRingbackUserModifyActiveCriteriaListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserCustomRingbackUserModifyActiveCriteriaListRequest', userId => $userId, @params );
}

sub UserCustomRingbackUserModifyCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserCustomRingbackUserModifyCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub SystemCustomerOriginatedTraceGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemCustomerOriginatedTraceGetRequest', @params );
}

sub SystemCustomerOriginatedTraceModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemCustomerOriginatedTraceModifyRequest', @params );
}

sub UserDirectedCallPickupWithBargeInGetRequest14sp7 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserDirectedCallPickupWithBargeInGetRequest14sp7', userId => $userId );
}

sub UserDirectedCallPickupWithBargeInModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserDirectedCallPickupWithBargeInModifyRequest', userId => $userId, @params );
}

sub GroupDirectoryNumberHuntingGetAvailableUserListRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupDirectoryNumberHuntingGetAvailableUserListRequest',
        serviceUserId => $serviceUserId );
}

sub GroupDirectoryNumberHuntingGetRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupDirectoryNumberHuntingGetRequest', serviceUserId => $serviceUserId );
}

sub GroupDirectoryNumberHuntingModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupDirectoryNumberHuntingModifyRequest', serviceUserId => $serviceUserId, @params );
}

sub UserDoNotDisturbGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserDoNotDisturbGetRequest', userId => $userId );
}

sub UserDoNotDisturbModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserDoNotDisturbModifyRequest', userId => $userId, @params );
}

sub UserDualModeVCCGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserDualModeVCCGetRequest', userId => $userId );
}

sub UserDualModeVCCModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserDualModeVCCModifyRequest', userId => $userId, @params );
}

sub GroupEmergencyZonesAddHomeZoneListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupEmergencyZonesAddHomeZoneListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupEmergencyZonesDeleteHomeZoneListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupEmergencyZonesDeleteHomeZoneListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupEmergencyZonesGetHomeZoneListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupEmergencyZonesGetHomeZoneListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupEmergencyZonesGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupEmergencyZonesGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupEmergencyZonesModifyHomeZoneListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupEmergencyZonesModifyHomeZoneListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupEmergencyZonesModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupEmergencyZonesModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub SystemEmergencyZonesGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemEmergencyZonesGetRequest', @params );
}

sub SystemEmergencyZonesModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemEmergencyZonesModifyRequest', @params );
}

sub EnterpriseEnhancedCallLogsGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseEnhancedCallLogsGetListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub GroupEnhancedCallLogsGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupEnhancedCallLogsGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub ServiceProviderEnhancedCallLogsGetRequest17sp4 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderEnhancedCallLogsGetRequest17sp4',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderEnhancedCallLogsModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderEnhancedCallLogsModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub SystemEnhancedCallLogsGetRequest17sp4 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemEnhancedCallLogsGetRequest17sp4', @params );
}

sub SystemEnhancedCallLogsModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemEnhancedCallLogsModifyRequest', @params );
}

sub UserEnhancedCallLogsGetListRequest17sp4 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserEnhancedCallLogsGetListRequest17sp4', userId => $userId, @params );
}

sub UserExternalCallingLineIDDeliveryGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserExternalCallingLineIDDeliveryGetRequest', userId => $userId );
}

sub UserExternalCallingLineIDDeliveryModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserExternalCallingLineIDDeliveryModifyRequest', userId => $userId, @params );
}

sub ServiceProviderExternalCustomRingbackGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderExternalCustomRingbackGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderExternalCustomRingbackModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderExternalCustomRingbackModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub UserExternalCustomRingbackGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserExternalCustomRingbackGetRequest', userId => $userId );
}

sub UserExternalCustomRingbackModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserExternalCustomRingbackModifyRequest', userId => $userId, @params );
}

sub UserFaxMessagingGetRequest17sp1 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserFaxMessagingGetRequest17sp1', userId => $userId );
}

sub UserFaxMessagingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserFaxMessagingModifyRequest', userId => $userId, @params );
}

sub GroupGroupPagingAddInstanceRequest {
    my $self                           = shift;
    my $serviceProviderId              = shift;
    my $groupId                        = shift;
    my $serviceUserId                  = shift;
    my $serviceInstanceProfile         = shift;
    my $confirmationToneTimeoutSeconds = shift;
    my $deliverOriginatorCLIDInstead   = shift;
    my @params                         = @_;

    return $self->_send_command(
        'GroupGroupPagingAddInstanceRequest',
        serviceProviderId              => $serviceProviderId,
        groupId                        => $groupId,
        serviceUserId                  => $serviceUserId,
        serviceInstanceProfile         => $serviceInstanceProfile,
        confirmationToneTimeoutSeconds => $confirmationToneTimeoutSeconds,
        deliverOriginatorCLIDInstead   => $deliverOriginatorCLIDInstead,
        @params
    );
}

sub GroupGroupPagingAddOriginatorListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupGroupPagingAddOriginatorListRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupGroupPagingAddTargetListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupGroupPagingAddTargetListRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupGroupPagingDeleteInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_command( 'GroupGroupPagingDeleteInstanceRequest', serviceUserId => $serviceUserId );
}

sub GroupGroupPagingDeleteOriginatorListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupGroupPagingDeleteOriginatorListRequest', serviceUserId => $serviceUserId,
        @params );
}

sub GroupGroupPagingDeleteTargetListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupGroupPagingDeleteTargetListRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupGroupPagingGetAvailableOriginatorListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupGroupPagingGetAvailableOriginatorListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupGroupPagingGetAvailableTargetListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_query( 'GroupGroupPagingGetAvailableTargetListRequest', serviceUserId => $serviceUserId,
        @params );
}

sub GroupGroupPagingGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupGroupPagingGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupGroupPagingGetInstanceRequest17sp3 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupGroupPagingGetInstanceRequest17sp3', serviceUserId => $serviceUserId );
}

sub GroupGroupPagingGetOriginatorListRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupGroupPagingGetOriginatorListRequest', serviceUserId => $serviceUserId );
}

sub GroupGroupPagingGetTargetListRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupGroupPagingGetTargetListRequest', serviceUserId => $serviceUserId );
}

sub GroupGroupPagingModifyActiveInstanceListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'GroupGroupPagingModifyActiveInstanceListRequest', @params );
}

sub GroupGroupPagingModifyInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupGroupPagingModifyInstanceRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupGroupPagingModifyOriginatorListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupGroupPagingModifyOriginatorListRequest', serviceUserId => $serviceUserId,
        @params );
}

sub GroupGroupPagingModifyTargetListRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupGroupPagingModifyTargetListRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupGroupPagingTargetsCapacityGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupGroupPagingTargetsCapacityGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupGroupPagingTargetsCapacityModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupGroupPagingTargetsCapacityModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub ServiceProviderGroupPagingTargetsCapacityGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderGroupPagingTargetsCapacityGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderGroupPagingTargetsCapacityModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderGroupPagingTargetsCapacityModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub UserGroupPagingGetListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserGroupPagingGetListRequest', userId => $userId );
}

sub UserHotelingGuestGetAvailableUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserHotelingGuestGetAvailableUserListRequest', userId => $userId, @params );
}

sub UserHotelingGuestGetRequest14sp4 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserHotelingGuestGetRequest14sp4', userId => $userId );
}

sub UserHotelingGuestModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserHotelingGuestModifyRequest', userId => $userId, @params );
}

sub UserHotelingHostGetRequest17 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserHotelingHostGetRequest17', userId => $userId );
}

sub UserHotelingHostModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserHotelingHostModifyRequest', userId => $userId, @params );
}

sub GroupHuntGroupAddInstanceRequest17sp4 {
    my $self                   = shift;
    my $serviceProviderId      = shift;
    my $groupId                = shift;
    my $serviceUserId          = shift;
    my $serviceInstanceProfile = shift;
    my $policy                 = shift;
    my $huntAfterNoAnswer      = shift;
    my $noAnswerNumberOfRings  = shift;
    my $forwardAfterTimeout    = shift;
    my $forwardTimeoutSeconds  = shift;
    my @params                 = @_;

    return $self->_send_command(
        'GroupHuntGroupAddInstanceRequest17sp4',
        serviceProviderId      => $serviceProviderId,
        groupId                => $groupId,
        serviceUserId          => $serviceUserId,
        serviceInstanceProfile => $serviceInstanceProfile,
        policy                 => $policy,
        huntAfterNoAnswer      => $huntAfterNoAnswer,
        noAnswerNumberOfRings  => $noAnswerNumberOfRings,
        forwardAfterTimeout    => $forwardAfterTimeout,
        forwardTimeoutSeconds  => $forwardTimeoutSeconds,
        @params
    );
}

sub GroupHuntGroupDeleteInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_command( 'GroupHuntGroupDeleteInstanceRequest', serviceUserId => $serviceUserId );
}

sub GroupHuntGroupGetAvailableUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupHuntGroupGetAvailableUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupHuntGroupGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupHuntGroupGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupHuntGroupGetInstanceRequest17sp4 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupHuntGroupGetInstanceRequest17sp4', serviceUserId => $serviceUserId );
}

sub GroupHuntGroupModifyActiveInstanceListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'GroupHuntGroupModifyActiveInstanceListRequest', @params );
}

sub GroupHuntGroupModifyInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupHuntGroupModifyInstanceRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupHuntGroupModifyInstanceWeightedCallDistributionRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupHuntGroupModifyInstanceWeightedCallDistributionRequest',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub SystemHuntGroupGetRequest17 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemHuntGroupGetRequest17', @params );
}

sub SystemHuntGroupModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemHuntGroupModifyRequest', @params );
}

sub UserINIntegrationGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserINIntegrationGetRequest', userId => $userId );
}

sub UserINIntegrationModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserINIntegrationModifyRequest', userId => $userId, @params );
}

sub UserInCallServiceActivationGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserInCallServiceActivationGetRequest', userId => $userId );
}

sub UserInCallServiceActivationModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserInCallServiceActivationModifyRequest', userId => $userId, @params );
}

sub ServiceProviderInCallServiceActivationGetRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderInCallServiceActivationGetRequest17',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderInCallServiceActivationModifyRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderInCallServiceActivationModifyRequest17',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub SystemInCallServiceActivationGetRequest17 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemInCallServiceActivationGetRequest17', @params );
}

sub SystemInCallServiceActivationModifyRequest17 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemInCallServiceActivationModifyRequest17', @params );
}

sub GroupIncomingCallingPlanGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupIncomingCallingPlanGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupIncomingCallingPlanModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupIncomingCallingPlanModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub UserIncomingCallingPlanGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserIncomingCallingPlanGetRequest', userId => $userId );
}

sub UserIncomingCallingPlanModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserIncomingCallingPlanModifyRequest', userId => $userId, @params );
}

sub GroupInstantConferencingAddInstanceRequest14 {
    my $self                           = shift;
    my $serviceProviderId              = shift;
    my $groupId                        = shift;
    my $serviceUserId                  = shift;
    my $serviceInstanceProfile         = shift;
    my $conferenceBridgeLinePort       = shift;
    my $allocatedPorts                 = shift;
    my $serviceProfileAppliedOnOutcall = shift;
    my $allowOutdialInInvitation       = shift;
    my $allowDocumentDownload          = shift;
    my @params                         = @_;

    return $self->_send_command(
        'GroupInstantConferencingAddInstanceRequest14',
        serviceProviderId              => $serviceProviderId,
        groupId                        => $groupId,
        serviceUserId                  => $serviceUserId,
        serviceInstanceProfile         => $serviceInstanceProfile,
        conferenceBridgeLinePort       => $conferenceBridgeLinePort,
        allocatedPorts                 => $allocatedPorts,
        serviceProfileAppliedOnOutcall => $serviceProfileAppliedOnOutcall,
        allowOutdialInInvitation       => $allowOutdialInInvitation,
        allowDocumentDownload          => $allowDocumentDownload,
        @params
    );
}

sub GroupInstantConferencingDeleteInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_command( 'GroupInstantConferencingDeleteInstanceRequest', serviceUserId => $serviceUserId );
}

sub GroupInstantConferencingGetAvailableUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupInstantConferencingGetAvailableUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupInstantConferencingGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupInstantConferencingGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupInstantConferencingGetInstanceRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupInstantConferencingGetInstanceRequest17', serviceUserId => $serviceUserId );
}

sub GroupInstantConferencingGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupInstantConferencingGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupInstantConferencingModifyActiveInstanceListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'GroupInstantConferencingModifyActiveInstanceListRequest', @params );
}

sub GroupInstantConferencingModifyInstanceRequest16 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupInstantConferencingModifyInstanceRequest16',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupInstantConferencingModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupInstantConferencingModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub ServiceProviderInstantConferencingGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderInstantConferencingGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderInstantConferencingModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderInstantConferencingModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub SystemInstantConferencingAddDeviceRequest14 {
    my $self       = shift;
    my $deviceName = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemInstantConferencingAddDeviceRequest14', deviceName => $deviceName, @params );
}

sub SystemInstantConferencingDeleteDeviceRequest {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_command( 'SystemInstantConferencingDeleteDeviceRequest', deviceName => $deviceName );
}

sub SystemInstantConferencingGetDeviceListRequest14 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemInstantConferencingGetDeviceListRequest14', @params );
}

sub SystemInstantConferencingGetDeviceRequest14 {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_query( 'SystemInstantConferencingGetDeviceRequest14', deviceName => $deviceName );
}

sub SystemInstantConferencingGetHoldPolicyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemInstantConferencingGetHoldPolicyRequest', @params );
}

sub SystemInstantConferencingGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemInstantConferencingGetRequest', @params );
}

sub SystemInstantConferencingModifyDeviceRequest14 {
    my $self       = shift;
    my $deviceName = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemInstantConferencingModifyDeviceRequest14', deviceName => $deviceName, @params );
}

sub SystemInstantConferencingModifyHoldPolicyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemInstantConferencingModifyHoldPolicyRequest', @params );
}

sub SystemInstantConferencingModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemInstantConferencingModifyRequest', @params );
}

sub SystemInstantConferencingResetUserPasswordsRequest {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_command( 'SystemInstantConferencingResetUserPasswordsRequest', deviceName => $deviceName );
}

sub SystemInstantConferencingResynchronizeDeviceRequest {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_command( 'SystemInstantConferencingResynchronizeDeviceRequest', deviceName => $deviceName );
}

sub UserInstantConferencingAddConferenceDocumentRequest {
    my $self          = shift;
    my $userId        = shift;
    my $conferenceKey = shift;
    my $documentFile  = shift;
    my @params        = @_;

    return $self->_send_command(
        'UserInstantConferencingAddConferenceDocumentRequest',
        userId        => $userId,
        conferenceKey => $conferenceKey,
        documentFile  => $documentFile,
        @params
    );
}

sub UserInstantConferencingAddConferenceRequest {
    my $self                           = shift;
    my $userId                         = shift;
    my $bridgeServiceUserId            = shift;
    my $conferenceOwnerUserId          = shift;
    my $title                          = shift;
    my $leaderRequired                 = shift;
    my $leaderReleaseDropsParticipants = shift;
    my $announceCallers                = shift;
    my $conferenceType                 = shift;
    my $conferenceSchedule             = shift;
    my @params                         = @_;

    return $self->_send_command(
        'UserInstantConferencingAddConferenceRequest',
        userId                         => $userId,
        bridgeServiceUserId            => $bridgeServiceUserId,
        conferenceOwnerUserId          => $conferenceOwnerUserId,
        title                          => $title,
        leaderRequired                 => $leaderRequired,
        leaderReleaseDropsParticipants => $leaderReleaseDropsParticipants,
        announceCallers                => $announceCallers,
        conferenceType                 => $conferenceType,
        conferenceSchedule             => $conferenceSchedule,
        @params
    );
}

sub UserInstantConferencingAddQuickConferenceRequest {
    my $self                = shift;
    my $userId              = shift;
    my $bridgeServiceUserId = shift;
    my $leaderPhoneNumber   = shift;
    my @params              = @_;

    return $self->_send_command(
        'UserInstantConferencingAddQuickConferenceRequest',
        userId              => $userId,
        bridgeServiceUserId => $bridgeServiceUserId,
        leaderPhoneNumber   => $leaderPhoneNumber,
        @params
    );
}

sub UserInstantConferencingControlCallRequest {
    my $self             = shift;
    my $userId           = shift;
    my $conferenceKey    = shift;
    my $conferenceCallId = shift;
    my $action           = shift;
    my @params           = @_;

    return $self->_send_command(
        'UserInstantConferencingControlCallRequest',
        userId           => $userId,
        conferenceKey    => $conferenceKey,
        conferenceCallId => $conferenceCallId,
        action           => $action,
        @params
    );
}

sub UserInstantConferencingControlStandAloneCallRequest {
    my $self                  = shift;
    my $conferenceOwnerUserId = shift;
    my $conferenceKey         = shift;
    my $conferenceCallId      = shift;
    my $action                = shift;
    my $phoneNumber           = shift;
    my @params                = @_;

    return $self->_send_command(
        'UserInstantConferencingControlStandAloneCallRequest',
        conferenceOwnerUserId => $conferenceOwnerUserId,
        conferenceKey         => $conferenceKey,
        conferenceCallId      => $conferenceCallId,
        action                => $action,
        phoneNumber           => $phoneNumber,
        @params
    );
}

sub UserInstantConferencingDeleteConferenceDocumentListRequest {
    my $self             = shift;
    my $userId           = shift;
    my $conferenceKey    = shift;
    my $conferenceCallId = shift;
    my @params           = @_;

    return $self->_send_command(
        'UserInstantConferencingDeleteConferenceDocumentListRequest',
        userId           => $userId,
        conferenceKey    => $conferenceKey,
        conferenceCallId => $conferenceCallId,
        @params
    );
}

sub UserInstantConferencingDeleteConferenceListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserInstantConferencingDeleteConferenceListRequest', userId => $userId, @params );
}

sub UserInstantConferencingDeleteConferenceRecordingListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command(
        'UserInstantConferencingDeleteConferenceRecordingListRequest',
        userId => $userId,
        @params
    );
}

sub UserInstantConferencingEndPresentationRequest {
    my $self                = shift;
    my $userId              = shift;
    my $bridgeServiceUserId = shift;
    my $documentId          = shift;
    my $accessCode          = shift;
    my $slideName           = shift;

    return $self->_send_command(
        'UserInstantConferencingEndPresentationRequest',
        userId              => $userId,
        bridgeServiceUserId => $bridgeServiceUserId,
        documentId          => $documentId,
        accessCode          => $accessCode,
        slideName           => $slideName
    );
}

sub UserInstantConferencingGetAvailableBridgeDelegatesListRequest {
    my $self                = shift;
    my $userId              = shift;
    my $bridgeServiceUserId = shift;

    return $self->_send_query(
        'UserInstantConferencingGetAvailableBridgeDelegatesListRequest',
        userId              => $userId,
        bridgeServiceUserId => $bridgeServiceUserId
    );
}

sub UserInstantConferencingGetAvailableConferenceOwnerListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query(
        'UserInstantConferencingGetAvailableConferenceOwnerListRequest',
        userId => $userId,
        @params
    );
}

sub UserInstantConferencingGetBridgeDelegatesListRequest {
    my $self                = shift;
    my $userId              = shift;
    my $bridgeServiceUserId = shift;

    return $self->_send_query(
        'UserInstantConferencingGetBridgeDelegatesListRequest',
        userId              => $userId,
        bridgeServiceUserId => $bridgeServiceUserId
    );
}

sub UserInstantConferencingGetConferenceBridgeReportRequest {
    my $self                = shift;
    my $userId              = shift;
    my $bridgeServiceUserId = shift;
    my $reportStartDate     = shift;
    my $reportEndDate       = shift;
    my @params              = @_;

    return $self->_send_query(
        'UserInstantConferencingGetConferenceBridgeReportRequest',
        userId              => $userId,
        bridgeServiceUserId => $bridgeServiceUserId,
        reportStartDate     => $reportStartDate,
        reportEndDate       => $reportEndDate,
        @params
    );
}

sub UserInstantConferencingGetConferenceCallRequest {
    my $self             = shift;
    my $userId           = shift;
    my $conferenceKey    = shift;
    my $conferenceCallId = shift;

    return $self->_send_query(
        'UserInstantConferencingGetConferenceCallRequest',
        userId           => $userId,
        conferenceKey    => $conferenceKey,
        conferenceCallId => $conferenceCallId
    );
}

sub UserInstantConferencingGetConferenceDocumentListRequest {
    my $self          = shift;
    my $userId        = shift;
    my $conferenceKey = shift;

    return $self->_send_query(
        'UserInstantConferencingGetConferenceDocumentListRequest',
        userId        => $userId,
        conferenceKey => $conferenceKey
    );
}

sub UserInstantConferencingGetConferenceRecordingListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserInstantConferencingGetConferenceRecordingListRequest', userId => $userId, @params );
}

sub UserInstantConferencingGetConferenceRecordingRequest14Sp9 {
    my $self         = shift;
    my $userId       = shift;
    my $recordingKey = shift;

    return $self->_send_query(
        'UserInstantConferencingGetConferenceRecordingRequest14Sp9',
        userId       => $userId,
        recordingKey => $recordingKey
    );
}

sub UserInstantConferencingGetConferenceRequest14Sp6 {
    my $self          = shift;
    my $userId        = shift;
    my $conferenceKey = shift;

    return $self->_send_query(
        'UserInstantConferencingGetConferenceRequest14Sp6',
        userId        => $userId,
        conferenceKey => $conferenceKey
    );
}

sub UserInstantConferencingGetCurrentConferenceListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserInstantConferencingGetCurrentConferenceListRequest', userId => $userId );
}

sub UserInstantConferencingGetExpiredConferenceListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserInstantConferencingGetExpiredConferenceListRequest', userId => $userId );
}

sub UserInstantConferencingGetFutureConferenceListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserInstantConferencingGetFutureConferenceListRequest', userId => $userId );
}

sub UserInstantConferencingGetInstanceListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserInstantConferencingGetInstanceListRequest', userId => $userId );
}

sub UserInstantConferencingGetStandAloneConferenceCallRequest {
    my $self                  = shift;
    my $conferenceOwnerUserId = shift;
    my $conferenceKey         = shift;
    my $conferenceCallId      = shift;

    return $self->_send_query(
        'UserInstantConferencingGetStandAloneConferenceCallRequest',
        conferenceOwnerUserId => $conferenceOwnerUserId,
        conferenceKey         => $conferenceKey,
        conferenceCallId      => $conferenceCallId
    );
}

sub UserInstantConferencingGetStandAloneConferenceDocumentListRequest14 {
    my $self                  = shift;
    my $conferenceOwnerUserId = shift;
    my $conferenceKey         = shift;
    my $isWebServerCollocated = shift;

    return $self->_send_query(
        'UserInstantConferencingGetStandAloneConferenceDocumentListRequest14',
        conferenceOwnerUserId => $conferenceOwnerUserId,
        conferenceKey         => $conferenceKey,
        isWebServerCollocated => $isWebServerCollocated
    );
}

sub UserInstantConferencingGetStandAloneConferenceRecordingRequest {
    my $self                  = shift;
    my $conferenceOwnerUserId = shift;
    my $recordingKey          = shift;

    return $self->_send_query(
        'UserInstantConferencingGetStandAloneConferenceRecordingRequest',
        conferenceOwnerUserId => $conferenceOwnerUserId,
        recordingKey          => $recordingKey
    );
}

sub UserInstantConferencingGetStandAloneConferenceRequest14Sp6 {
    my $self                  = shift;
    my $conferenceOwnerUserId = shift;
    my $conferenceKey         = shift;

    return $self->_send_query(
        'UserInstantConferencingGetStandAloneConferenceRequest14Sp6',
        conferenceOwnerUserId => $conferenceOwnerUserId,
        conferenceKey         => $conferenceKey
    );
}

sub UserInstantConferencingGetStandAloneSlideShowContentRequest {
    my $self                  = shift;
    my $bridgeServiceUserId   = shift;
    my $conferenceOwnerUserId = shift;
    my $documentId            = shift;
    my @params                = @_;

    return $self->_send_query(
        'UserInstantConferencingGetStandAloneSlideShowContentRequest',
        bridgeServiceUserId   => $bridgeServiceUserId,
        conferenceOwnerUserId => $conferenceOwnerUserId,
        documentId            => $documentId,
        @params
    );
}

sub UserInstantConferencingLoginStandAloneRequest {
    my $self                  = shift;
    my $bridgeServiceUserId   = shift;
    my $conferenceOwnerUserId = shift;

    return $self->_send_query(
        'UserInstantConferencingLoginStandAloneRequest',
        bridgeServiceUserId   => $bridgeServiceUserId,
        conferenceOwnerUserId => $conferenceOwnerUserId
    );
}

sub UserInstantConferencingModifyBridgeDelegatesRequest {
    my $self                = shift;
    my $userId              = shift;
    my $bridgeServiceUserId = shift;
    my @params              = @_;

    return $self->_send_command(
        'UserInstantConferencingModifyBridgeDelegatesRequest',
        userId              => $userId,
        bridgeServiceUserId => $bridgeServiceUserId,
        @params
    );
}

sub UserInstantConferencingModifyConferencePresentationPasswordRequest {
    my $self          = shift;
    my $userId        = shift;
    my $conferenceKey = shift;
    my @params        = @_;

    return $self->_send_command(
        'UserInstantConferencingModifyConferencePresentationPasswordRequest',
        userId        => $userId,
        conferenceKey => $conferenceKey,
        @params
    );
}

sub UserInstantConferencingModifyConferenceRecordingSlideShowPasswordRequest {
    my $self            = shift;
    my $userId          = shift;
    my $recordingKey    = shift;
    my $recordingCallId = shift;
    my @params          = @_;

    return $self->_send_command(
        'UserInstantConferencingModifyConferenceRecordingSlideShowPasswordRequest',
        userId          => $userId,
        recordingKey    => $recordingKey,
        recordingCallId => $recordingCallId,
        @params
    );
}

sub UserInstantConferencingModifyConferenceRequest14 {
    my $self          = shift;
    my $userId        = shift;
    my $conferenceKey = shift;
    my @params        = @_;

    return $self->_send_command(
        'UserInstantConferencingModifyConferenceRequest14',
        userId        => $userId,
        conferenceKey => $conferenceKey,
        @params
    );
}

sub UserInstantConferencingPlayRecordingToPhoneRequest {
    my $self                = shift;
    my $userId              = shift;
    my $recordingKey        = shift;
    my $playBackPhoneNumber = shift;

    return $self->_send_command(
        'UserInstantConferencingPlayRecordingToPhoneRequest',
        userId              => $userId,
        recordingKey        => $recordingKey,
        playBackPhoneNumber => $playBackPhoneNumber
    );
}

sub UserInstantConferencingPlayStandAloneRecordingToPhoneRequest {
    my $self                  = shift;
    my $conferenceOwnerUserId = shift;
    my $recordingKey          = shift;
    my $playBackPhoneNumber   = shift;

    return $self->_send_command(
        'UserInstantConferencingPlayStandAloneRecordingToPhoneRequest',
        conferenceOwnerUserId => $conferenceOwnerUserId,
        recordingKey          => $recordingKey,
        playBackPhoneNumber   => $playBackPhoneNumber
    );
}

sub UserInstantConferencingSetPresentationSlideNameRequest {
    my $self                = shift;
    my $userId              = shift;
    my $bridgeServiceUserId = shift;
    my $documentId          = shift;
    my $accessCode          = shift;
    my $previousSlideName   = shift;
    my $newSlideName        = shift;

    return $self->_send_command(
        'UserInstantConferencingSetPresentationSlideNameRequest',
        userId              => $userId,
        bridgeServiceUserId => $bridgeServiceUserId,
        documentId          => $documentId,
        accessCode          => $accessCode,
        previousSlideName   => $previousSlideName,
        newSlideName        => $newSlideName
    );
}

sub UserInstantConferencingSetPresentationSlideNumberRequest {
    my $self                = shift;
    my $userId              = shift;
    my $bridgeServiceUserId = shift;
    my $documentId          = shift;
    my $accessCode          = shift;
    my $slideName           = shift;
    my $slideNumber         = shift;

    return $self->_send_command(
        'UserInstantConferencingSetPresentationSlideNumberRequest',
        userId              => $userId,
        bridgeServiceUserId => $bridgeServiceUserId,
        documentId          => $documentId,
        accessCode          => $accessCode,
        slideName           => $slideName,
        slideNumber         => $slideNumber
    );
}

sub UserInstantConferencingStartPresentationRequest {
    my $self                = shift;
    my $userId              = shift;
    my $bridgeServiceUserId = shift;
    my $accessCode          = shift;
    my $documentId          = shift;
    my $slideName           = shift;

    return $self->_send_command(
        'UserInstantConferencingStartPresentationRequest',
        userId              => $userId,
        bridgeServiceUserId => $bridgeServiceUserId,
        accessCode          => $accessCode,
        documentId          => $documentId,
        slideName           => $slideName
    );
}

sub GroupInstantGroupCallAddInstanceRequest14 {
    my $self                   = shift;
    my $serviceProviderId      = shift;
    my $groupId                = shift;
    my $serviceUserId          = shift;
    my $serviceInstanceProfile = shift;
    my @params                 = @_;

    return $self->_send_command(
        'GroupInstantGroupCallAddInstanceRequest14',
        serviceProviderId      => $serviceProviderId,
        groupId                => $groupId,
        serviceUserId          => $serviceUserId,
        serviceInstanceProfile => $serviceInstanceProfile,
        @params
    );
}

sub GroupInstantGroupCallDeleteInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_command( 'GroupInstantGroupCallDeleteInstanceRequest', serviceUserId => $serviceUserId );
}

sub GroupInstantGroupCallGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupInstantGroupCallGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupInstantGroupCallGetInstanceRequest17 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupInstantGroupCallGetInstanceRequest17', serviceUserId => $serviceUserId );
}

sub GroupInstantGroupCallModifyActiveInstanceListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'GroupInstantGroupCallModifyActiveInstanceListRequest', @params );
}

sub GroupInstantGroupCallModifyInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupInstantGroupCallModifyInstanceRequest', serviceUserId => $serviceUserId,
        @params );
}

sub SystemIntelligentNetworkServiceControlGetRequest14 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemIntelligentNetworkServiceControlGetRequest14', @params );
}

sub SystemIntelligentNetworkServiceControlModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemIntelligentNetworkServiceControlModifyRequest', @params );
}

sub UserIntelligentNetworkServiceControlGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserIntelligentNetworkServiceControlGetRequest', userId => $userId );
}

sub UserIntelligentNetworkServiceControlModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserIntelligentNetworkServiceControlModifyRequest', userId => $userId, @params );
}

sub GroupInterceptGroupGetRequest16sp1 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupInterceptGroupGetRequest16sp1',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupInterceptGroupModifyRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupInterceptGroupModifyRequest16',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub SystemInterceptUserAddDnListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemInterceptUserAddDnListRequest', @params );
}

sub SystemInterceptUserDeleteDnListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemInterceptUserDeleteDnListRequest', @params );
}

sub SystemInterceptUserGetDnListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemInterceptUserGetDnListRequest', @params );
}

sub SystemInterceptUserGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemInterceptUserGetRequest', @params );
}

sub SystemInterceptUserModifyDnRequest {
    my $self        = shift;
    my $phoneNumber = shift;
    my @params      = @_;

    return $self->_send_command( 'SystemInterceptUserModifyDnRequest', phoneNumber => $phoneNumber, @params );
}

sub SystemInterceptUserModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemInterceptUserModifyRequest', @params );
}

sub UserInterceptUserGetRequest16sp1 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserInterceptUserGetRequest16sp1', userId => $userId );
}

sub UserInterceptUserModifyRequest16 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserInterceptUserModifyRequest16', userId => $userId, @params );
}

sub UserInternalCallingLineIDDeliveryGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserInternalCallingLineIDDeliveryGetRequest', userId => $userId );
}

sub UserInternalCallingLineIDDeliveryModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserInternalCallingLineIDDeliveryModifyRequest', userId => $userId, @params );
}

sub GroupInventoryReportGetRequest {
    my $self                 = shift;
    my $serviceProviderId    = shift;
    my $groupId              = shift;
    my $includeUsers         = shift;
    my $includeServices      = shift;
    my $includeDns           = shift;
    my $includeAccessDevices = shift;
    my $includeDepartments   = shift;
    my @params               = @_;

    return $self->_send_query(
        'GroupInventoryReportGetRequest',
        serviceProviderId    => $serviceProviderId,
        groupId              => $groupId,
        includeUsers         => $includeUsers,
        includeServices      => $includeServices,
        includeDns           => $includeDns,
        includeAccessDevices => $includeAccessDevices,
        includeDepartments   => $includeDepartments,
        @params
    );
}

sub SystemInventoryReportGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemInventoryReportGetRequest', @params );
}

sub SystemInventoryReportModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemInventoryReportModifyRequest', @params );
}

sub GroupLDAPIntegrationGetDirectoryRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupLDAPIntegrationGetDirectoryRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupLDAPIntegrationModifyDirectoryRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupLDAPIntegrationModifyDirectoryRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupLDAPIntegrationGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupLDAPIntegrationGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupLDAPIntegrationModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupLDAPIntegrationModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub ServiceProviderLDAPIntegrationGetDirectoryRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderLDAPIntegrationGetDirectoryRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderLDAPIntegrationModifyDirectoryRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderLDAPIntegrationModifyDirectoryRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub SystemLDAPIntegrationGetDirectoryRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemLDAPIntegrationGetDirectoryRequest', @params );
}

sub SystemLDAPIntegrationModifyDirectoryRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemLDAPIntegrationModifyDirectoryRequest', @params );
}

sub UserLDAPIntegrationGetDirectoryListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserLDAPIntegrationGetDirectoryListRequest', userId => $userId, @params );
}

sub UserLDAPIntegrationGetDirectoryEntryRequest {
    my $self      = shift;
    my $userId    = shift;
    my $entryName = shift;

    return $self->_send_query( 'UserLDAPIntegrationGetDirectoryEntryRequest', userId => $userId,
        entryName => $entryName );
}

sub SystemLegacyAutomaticCallbackGetLineTypeListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemLegacyAutomaticCallbackGetLineTypeListRequest', @params );
}

sub SystemLegacyAutomaticCallbackGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemLegacyAutomaticCallbackGetRequest', @params );
}

sub SystemLegacyAutomaticCallbackModifyLineTypeRequest {
    my $self     = shift;
    my $lineType = shift;
    my @params   = @_;

    return $self->_send_command( 'SystemLegacyAutomaticCallbackModifyLineTypeRequest', lineType => $lineType, @params );
}

sub SystemLegacyAutomaticCallbackModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemLegacyAutomaticCallbackModifyRequest', @params );
}

sub UserLegacyAutomaticCallbackGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserLegacyAutomaticCallbackGetRequest', userId => $userId );
}

sub UserLegacyAutomaticCallbackModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserLegacyAutomaticCallbackModifyRequest', userId => $userId, @params );
}

sub SystemLocationBasedCallingRestrictionsGetRequest17sp3 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemLocationBasedCallingRestrictionsGetRequest17sp3', @params );
}

sub SystemLocationBasedCallingRestrictionsModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemLocationBasedCallingRestrictionsModifyRequest', @params );
}

sub UserMWIDeliveryToMobileEndpointGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserMWIDeliveryToMobileEndpointGetRequest', userId => $userId );
}

sub UserMWIDeliveryToMobileEndpointModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserMWIDeliveryToMobileEndpointModifyRequest', userId => $userId, @params );
}

sub ServiceProviderMaliciousCallTraceGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderMaliciousCallTraceGetRequest', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderMaliciousCallTraceModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderMaliciousCallTraceModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub SystemMaliciousCallTraceGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemMaliciousCallTraceGetRequest', @params );
}

sub SystemMaliciousCallTraceModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemMaliciousCallTraceModifyRequest', @params );
}

sub UserMaliciousCallTraceGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserMaliciousCallTraceGetRequest', userId => $userId );
}

sub UserMaliciousCallTraceModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserMaliciousCallTraceModifyRequest', userId => $userId, @params );
}

sub GroupMeetMeConferencingAddInstanceRequest {
    my $self                   = shift;
    my $serviceProviderId      = shift;
    my $groupId                = shift;
    my $serviceUserId          = shift;
    my $serviceInstanceProfile = shift;
    my $allocatedPorts         = shift;
    my @params                 = @_;

    return $self->_send_command(
        'GroupMeetMeConferencingAddInstanceRequest',
        serviceProviderId      => $serviceProviderId,
        groupId                => $groupId,
        serviceUserId          => $serviceUserId,
        serviceInstanceProfile => $serviceInstanceProfile,
        allocatedPorts         => $allocatedPorts,
        @params
    );
}

sub GroupMeetMeConferencingDeleteInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_command( 'GroupMeetMeConferencingDeleteInstanceRequest', serviceUserId => $serviceUserId );
}

sub GroupMeetMeConferencingGetAvailableUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupMeetMeConferencingGetAvailableUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupMeetMeConferencingGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupMeetMeConferencingGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupMeetMeConferencingGetInstanceRequest17sp3 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupMeetMeConferencingGetInstanceRequest17sp3', serviceUserId => $serviceUserId );
}

sub GroupMeetMeConferencingGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupMeetMeConferencingGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupMeetMeConferencingModifyActiveInstanceListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'GroupMeetMeConferencingModifyActiveInstanceListRequest', @params );
}

sub GroupMeetMeConferencingModifyInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupMeetMeConferencingModifyInstanceRequest',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupMeetMeConferencingModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupMeetMeConferencingModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub ServiceProviderMeetMeConferencingGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderMeetMeConferencingGetRequest', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderMeetMeConferencingModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderMeetMeConferencingModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub SystemMeetMeConferencingGetRequest17sp3 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemMeetMeConferencingGetRequest17sp3', @params );
}

sub SystemMeetMeConferencingModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemMeetMeConferencingModifyRequest', @params );
}

sub UserMeetMeConferencingAddConferenceRequest {
    my $self     = shift;
    my $userId   = shift;
    my $bridgeId = shift;
    my $title    = shift;
    my @params   = @_;

    return $self->_send_query(
        'UserMeetMeConferencingAddConferenceRequest',
        userId   => $userId,
        bridgeId => $bridgeId,
        title    => $title,
        @params
    );
}

sub UserMeetMeConferencingDeleteConferenceListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserMeetMeConferencingDeleteConferenceListRequest', userId => $userId, @params );
}

sub UserMeetMeConferencingDeleteConferenceRecordingListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command(
        'UserMeetMeConferencingDeleteConferenceRecordingListRequest',
        userId => $userId,
        @params
    );
}

sub UserMeetMeConferencingGetBridgeListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserMeetMeConferencingGetBridgeListRequest', userId => $userId );
}

sub UserMeetMeConferencingGetConferenceListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserMeetMeConferencingGetConferenceListRequest', userId => $userId );
}

sub UserMeetMeConferencingGetConferenceRecordingListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserMeetMeConferencingGetConferenceRecordingListRequest', userId => $userId );
}

sub UserMeetMeConferencingGetConferenceRequest {
    my $self          = shift;
    my $userId        = shift;
    my $conferenceKey = shift;

    return $self->_send_query(
        'UserMeetMeConferencingGetConferenceRequest',
        userId        => $userId,
        conferenceKey => $conferenceKey
    );
}

sub UserMeetMeConferencingModifyConferenceRequest {
    my $self          = shift;
    my $userId        = shift;
    my $conferenceKey = shift;
    my @params        = @_;

    return $self->_send_command(
        'UserMeetMeConferencingModifyConferenceRequest',
        userId        => $userId,
        conferenceKey => $conferenceKey,
        @params
    );
}

sub GroupMusicOnHoldAddInstanceRequest16 {
    my $self                               = shift;
    my $serviceProviderId                  = shift;
    my $groupId                            = shift;
    my $department                         = shift;
    my $isActiveDuringCallHold             = shift;
    my $isActiveDuringCallPark             = shift;
    my $isActiveDuringBusyCampOn           = shift;
    my $source                             = shift;
    my $useAlternateSourceForInternalCalls = shift;
    my @params                             = @_;

    return $self->_send_command(
        'GroupMusicOnHoldAddInstanceRequest16',
        serviceProviderId                  => $serviceProviderId,
        groupId                            => $groupId,
        department                         => $department,
        isActiveDuringCallHold             => $isActiveDuringCallHold,
        isActiveDuringCallPark             => $isActiveDuringCallPark,
        isActiveDuringBusyCampOn           => $isActiveDuringBusyCampOn,
        source                             => $source,
        useAlternateSourceForInternalCalls => $useAlternateSourceForInternalCalls,
        @params
    );
}

sub GroupMusicOnHoldDeleteInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $department        = shift;

    return $self->_send_command(
        'GroupMusicOnHoldDeleteInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        department        => $department
    );
}

sub GroupMusicOnHoldGetInstanceRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupMusicOnHoldGetInstanceRequest16',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupMusicOnHoldGetDepartmentListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupMusicOnHoldGetDepartmentListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupMusicOnHoldModifyInstanceRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupMusicOnHoldModifyInstanceRequest16',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub SystemMusicOnHoldGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemMusicOnHoldGetRequest', @params );
}

sub SystemMusicOnHoldModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemMusicOnHoldModifyRequest', @params );
}

sub UserMusicOnHoldGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserMusicOnHoldGetRequest', userId => $userId );
}

sub UserMusicOnHoldModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserMusicOnHoldModifyRequest', userId => $userId, @params );
}

sub UserMusicOnHoldUserGetRequest16 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserMusicOnHoldUserGetRequest16', userId => $userId );
}

sub UserMusicOnHoldUserModifyRequest16 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserMusicOnHoldUserModifyRequest16', userId => $userId, @params );
}

sub GroupOutgoingCallingPlanAuthorizationCodeGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanAuthorizationCodeGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanCallMeNowGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanCallMeNowGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanCallMeNowModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanCallMeNowModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanDepartmentAuthorizationCodeAddListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanDepartmentAuthorizationCodeAddListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanDepartmentAuthorizationCodeDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanDepartmentAuthorizationCodeDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanDepartmentAuthorizationCodeGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupOutgoingCallingPlanDepartmentAuthorizationCodeGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanDigitPlanCallMeNowGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanDigitPlanCallMeNowGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanDigitPlanCallMeNowModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanDigitPlanCallMeNowModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanDigitPlanOriginatingGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanDigitPlanOriginatingGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanDigitPlanOriginatingModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanDigitPlanOriginatingModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanDigitPlanRedirectingGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanDigitPlanRedirectingGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanDigitPlanRedirectingModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanDigitPlanRedirectingModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanOriginatingGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanOriginatingGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanOriginatingModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanOriginatingModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanPinholeDigitPatternAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my $digitPattern      = shift;

    return $self->_send_command(
        'GroupOutgoingCallingPlanPinholeDigitPatternAddRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        digitPattern      => $digitPattern
    );
}

sub GroupOutgoingCallingPlanPinholeDigitPatternDeleteListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanPinholeDigitPatternDeleteListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanPinholeDigitPatternGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanPinholeDigitPatternGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanPinholeDigitPatternModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanPinholeDigitPatternModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanPinholeDigitPlanOriginatingGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanPinholeDigitPlanOriginatingGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanPinholeDigitPlanOriginatingModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanPinholeDigitPlanOriginatingModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanPinholeDigitPlanRedirectingGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanPinholeDigitPlanRedirectingGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanPinholeDigitPlanRedirectingModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanPinholeDigitPlanRedirectingModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanRedirectingGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanRedirectingGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanRedirectingModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanRedirectingModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanRedirectedGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanRedirectedGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanRedirectedModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanRedirectedModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupOutgoingCallingPlanTransferNumbersGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupOutgoingCallingPlanTransferNumbersGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupOutgoingCallingPlanTransferNumbersModifyListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupOutgoingCallingPlanTransferNumbersModifyListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub SystemOutgoingCallingPlanCallTypeAddMappingRequest {
    my $self        = shift;
    my $countryCode = shift;
    my $digitMap    = shift;
    my $callType    = shift;

    return $self->_send_command(
        'SystemOutgoingCallingPlanCallTypeAddMappingRequest',
        countryCode => $countryCode,
        digitMap    => $digitMap,
        callType    => $callType
    );
}

sub SystemOutgoingCallingPlanCallTypeDeleteMappingRequest {
    my $self        = shift;
    my $countryCode = shift;
    my $digitMap    = shift;

    return $self->_send_command(
        'SystemOutgoingCallingPlanCallTypeDeleteMappingRequest',
        countryCode => $countryCode,
        digitMap    => $digitMap
    );
}

sub SystemOutgoingCallingPlanCallTypeGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemOutgoingCallingPlanCallTypeGetListRequest', @params );
}

sub SystemOutgoingCallingPlanCallTypeGetMappingListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemOutgoingCallingPlanCallTypeGetMappingListRequest', @params );
}

sub SystemOutgoingCallingPlanGetRequest17sp3 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemOutgoingCallingPlanGetRequest17sp3', @params );
}

sub SystemOutgoingCallingPlanModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemOutgoingCallingPlanModifyRequest', @params );
}

sub UserOutgoingCallingPlanAuthorizationCodeAddListRequest {
    my $self      = shift;
    my $userId    = shift;
    my $codeEntry = shift;

    return $self->_send_command(
        'UserOutgoingCallingPlanAuthorizationCodeAddListRequest',
        userId    => $userId,
        codeEntry => $codeEntry
    );
}

sub UserOutgoingCallingPlanAuthorizationCodeDeleteListRequest {
    my $self   = shift;
    my $userId = shift;
    my $code   = shift;

    return $self->_send_command(
        'UserOutgoingCallingPlanAuthorizationCodeDeleteListRequest',
        userId => $userId,
        code   => $code
    );
}

sub UserOutgoingCallingPlanAuthorizationCodeGetListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanAuthorizationCodeGetListRequest', userId => $userId );
}

sub UserOutgoingCallingPlanAuthorizationCodeGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanAuthorizationCodeGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanAuthorizationCodeModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserOutgoingCallingPlanAuthorizationCodeModifyRequest', userId => $userId, @params );
}

sub UserOutgoingCallingPlanCallMeNowGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanCallMeNowGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanCallMeNowModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserOutgoingCallingPlanCallMeNowModifyRequest', userId => $userId, @params );
}

sub UserOutgoingCallingPlanDigitPlanCallMeNowGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanDigitPlanCallMeNowGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanDigitPlanCallMeNowModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserOutgoingCallingPlanDigitPlanCallMeNowModifyRequest', userId => $userId, @params );
}

sub UserOutgoingCallingPlanDigitPlanOriginatingGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanDigitPlanOriginatingGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanDigitPlanOriginatingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserOutgoingCallingPlanDigitPlanOriginatingModifyRequest', userId => $userId,
        @params );
}

sub UserOutgoingCallingPlanDigitPlanRedirectingGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanDigitPlanRedirectingGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanDigitPlanRedirectingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserOutgoingCallingPlanDigitPlanRedirectingModifyRequest', userId => $userId,
        @params );
}

sub UserOutgoingCallingPlanOriginatingGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanOriginatingGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanOriginatingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserOutgoingCallingPlanOriginatingModifyRequest', userId => $userId, @params );
}

sub UserOutgoingCallingPlanPinholeDigitPlanCallMeNowGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanPinholeDigitPlanCallMeNowGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanPinholeDigitPlanCallMeNowModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command(
        'UserOutgoingCallingPlanPinholeDigitPlanCallMeNowModifyRequest',
        userId => $userId,
        @params
    );
}

sub UserOutgoingCallingPlanPinholeDigitPlanOriginatingGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanPinholeDigitPlanOriginatingGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanPinholeDigitPlanOriginatingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command(
        'UserOutgoingCallingPlanPinholeDigitPlanOriginatingModifyRequest',
        userId => $userId,
        @params
    );
}

sub UserOutgoingCallingPlanPinholeDigitPlanRedirectingGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanPinholeDigitPlanRedirectingGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanPinholeDigitPlanRedirectingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command(
        'UserOutgoingCallingPlanPinholeDigitPlanRedirectingModifyRequest',
        userId => $userId,
        @params
    );
}

sub UserOutgoingCallingPlanRedirectingGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanRedirectingGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanRedirectingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserOutgoingCallingPlanRedirectingModifyRequest', userId => $userId, @params );
}

sub UserOutgoingCallingPlanRedirectedGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanRedirectedGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanRedirectedModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserOutgoingCallingPlanRedirectedModifyRequest', userId => $userId, @params );
}

sub UserOutgoingCallingPlanSustainedAuthorizationCodeGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanSustainedAuthorizationCodeGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanSustainedAuthorizationCodeModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command(
        'UserOutgoingCallingPlanSustainedAuthorizationCodeModifyRequest',
        userId => $userId,
        @params
    );
}

sub UserOutgoingCallingPlanTransferNumbersGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutgoingCallingPlanTransferNumbersGetRequest', userId => $userId );
}

sub UserOutgoingCallingPlanTransferNumbersModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserOutgoingCallingPlanTransferNumbersModifyRequest', userId => $userId, @params );
}

sub UserOutlookIntegrationGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserOutlookIntegrationGetRequest', userId => $userId );
}

sub UserOutlookIntegrationModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserOutlookIntegrationModifyRequest', userId => $userId, @params );
}

sub SystemPhysicalLocationGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemPhysicalLocationGetRequest', @params );
}

sub SystemPhysicalLocationModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemPhysicalLocationModifyRequest', @params );
}

sub UserPhysicalLocationGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserPhysicalLocationGetRequest', userId => $userId );
}

sub UserPhysicalLocationModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserPhysicalLocationModifyRequest', userId => $userId, @params );
}

sub GroupPolycomPhoneServicesGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupPolycomPhoneServicesGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupPolycomPhoneServicesModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupPolycomPhoneServicesModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub UserPolycomPhoneServicesGetRequest {
    my $self         = shift;
    my $userId       = shift;
    my $accessDevice = shift;

    return $self->_send_query( 'UserPolycomPhoneServicesGetRequest', userId => $userId, accessDevice => $accessDevice );
}

sub UserPolycomPhoneServicesModifyRequest {
    my $self         = shift;
    my $userId       = shift;
    my $accessDevice = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserPolycomPhoneServicesModifyRequest',
        userId       => $userId,
        accessDevice => $accessDevice,
        @params
    );
}

sub UserPolycomPhoneServicesGetPrimaryEndpointListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserPolycomPhoneServicesGetPrimaryEndpointListRequest', userId => $userId );
}

sub EnterprisePreAlertingAnnouncementGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterprisePreAlertingAnnouncementGetRequest', serviceProviderId => $serviceProviderId );
}

sub EnterprisePreAlertingAnnouncementModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'EnterprisePreAlertingAnnouncementModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub GroupPreAlertingAnnouncementGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupPreAlertingAnnouncementGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupPreAlertingAnnouncementModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupPreAlertingAnnouncementModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub UserPreAlertingAnnouncementGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserPreAlertingAnnouncementGetRequest', userId => $userId );
}

sub UserPreAlertingAnnouncementModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserPreAlertingAnnouncementModifyRequest', userId => $userId, @params );
}

sub UserPreAlertingAnnouncementAddCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserPreAlertingAnnouncementAddCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserPreAlertingAnnouncementModifyCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserPreAlertingAnnouncementModifyCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserPreAlertingAnnouncementDeleteCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_command(
        'UserPreAlertingAnnouncementDeleteCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserPreAlertingAnnouncementGetCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_query(
        'UserPreAlertingAnnouncementGetCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub GroupPreferredCarrierGroupGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupPreferredCarrierGroupGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupPreferredCarrierGroupModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupPreferredCarrierGroupModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub ServiceProviderPreferredCarrierAddRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $countryCode       = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderPreferredCarrierAddRequest',
        serviceProviderId => $serviceProviderId,
        countryCode       => $countryCode,
        @params
    );
}

sub ServiceProviderPreferredCarrierDeleteRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $countryCode       = shift;

    return $self->_send_command(
        'ServiceProviderPreferredCarrierDeleteRequest',
        serviceProviderId => $serviceProviderId,
        countryCode       => $countryCode
    );
}

sub ServiceProviderPreferredCarrierGetAvailableCountryCodeListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderPreferredCarrierGetAvailableCountryCodeListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderPreferredCarrierGetCarrierListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $countryCode       = shift;

    return $self->_send_query(
        'ServiceProviderPreferredCarrierGetCarrierListRequest',
        serviceProviderId => $serviceProviderId,
        countryCode       => $countryCode
    );
}

sub ServiceProviderPreferredCarrierGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderPreferredCarrierGetListRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderPreferredCarrierGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $countryCode       = shift;

    return $self->_send_query(
        'ServiceProviderPreferredCarrierGetRequest',
        serviceProviderId => $serviceProviderId,
        countryCode       => $countryCode
    );
}

sub ServiceProviderPreferredCarrierModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $countryCode       = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderPreferredCarrierModifyRequest',
        serviceProviderId => $serviceProviderId,
        countryCode       => $countryCode,
        @params
    );
}

sub SystemPreferredCarrierAddRequest {
    my $self            = shift;
    my $carrier         = shift;
    my $cic             = shift;
    my $countryCode     = shift;
    my $isIntraLata     = shift;
    my $isInterLata     = shift;
    my $isInternational = shift;

    return $self->_send_command(
        'SystemPreferredCarrierAddRequest',
        carrier         => $carrier,
        cic             => $cic,
        countryCode     => $countryCode,
        isIntraLata     => $isIntraLata,
        isInterLata     => $isInterLata,
        isInternational => $isInternational
    );
}

sub SystemPreferredCarrierDeleteRequest {
    my $self    = shift;
    my $carrier = shift;

    return $self->_send_command( 'SystemPreferredCarrierDeleteRequest', carrier => $carrier );
}

sub SystemPreferredCarrierGetGroupListRequest {
    my $self    = shift;
    my $carrier = shift;
    my @params  = @_;

    return $self->_send_query( 'SystemPreferredCarrierGetGroupListRequest', carrier => $carrier, @params );
}

sub SystemPreferredCarrierGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemPreferredCarrierGetListRequest', @params );
}

sub SystemPreferredCarrierGetRequest {
    my $self    = shift;
    my $carrier = shift;

    return $self->_send_query( 'SystemPreferredCarrierGetRequest', carrier => $carrier );
}

sub SystemPreferredCarrierGetUserListRequest {
    my $self    = shift;
    my $carrier = shift;
    my @params  = @_;

    return $self->_send_query( 'SystemPreferredCarrierGetUserListRequest', carrier => $carrier, @params );
}

sub SystemPreferredCarrierModifyRequest {
    my $self    = shift;
    my $carrier = shift;
    my @params  = @_;

    return $self->_send_command( 'SystemPreferredCarrierModifyRequest', carrier => $carrier, @params );
}

sub UserPreferredCarrierUserGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserPreferredCarrierUserGetRequest', userId => $userId );
}

sub UserPreferredCarrierUserModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserPreferredCarrierUserModifyRequest', userId => $userId, @params );
}

sub UserPrepaidGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserPrepaidGetRequest', userId => $userId );
}

sub UserPrepaidModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserPrepaidModifyRequest', userId => $userId, @params );
}

sub UserPriorityAlertAddCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserPriorityAlertAddCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserPriorityAlertDeleteCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_command(
        'UserPriorityAlertDeleteCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserPriorityAlertGetCriteriaListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserPriorityAlertGetCriteriaListRequest', userId => $userId );
}

sub UserPriorityAlertGetCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_query( 'UserPriorityAlertGetCriteriaRequest16', userId => $userId,
        criteriaName => $criteriaName );
}

sub UserPriorityAlertModifyActiveCriteriaListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserPriorityAlertModifyActiveCriteriaListRequest', userId => $userId, @params );
}

sub UserPriorityAlertModifyCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserPriorityAlertModifyCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub GroupServiceInstancePrivacyGetRequest17sp4 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupServiceInstancePrivacyGetRequest17sp4', serviceUserId => $serviceUserId );
}

sub GroupServiceInstancePrivacyModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupServiceInstancePrivacyModifyRequest', serviceUserId => $serviceUserId, @params );
}

sub UserPrivacyGetAvailableMonitorsUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserPrivacyGetAvailableMonitorsUserListRequest', userId => $userId, @params );
}

sub UserPrivacyGetRequest13mp17 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserPrivacyGetRequest13mp17', userId => $userId );
}

sub UserPrivacyModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserPrivacyModifyRequest', userId => $userId, @params );
}

sub UserPushToTalkGetAvailableUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserPushToTalkGetAvailableUserListRequest', userId => $userId, @params );
}

sub UserPushToTalkGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserPushToTalkGetRequest', userId => $userId );
}

sub UserPushToTalkModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserPushToTalkModifyRequest', userId => $userId, @params );
}

sub SystemBroadWorksReceptionistEnterpriseGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemBroadWorksReceptionistEnterpriseGetRequest', @params );
}

sub SystemBroadWorksReceptionistEnterpriseModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemBroadWorksReceptionistEnterpriseModifyRequest', @params );
}

sub UserBroadWorksReceptionistEnterpriseAddUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserBroadWorksReceptionistEnterpriseAddUserListRequest', userId => $userId, @params );
}

sub UserBroadWorksReceptionistEnterpriseDeleteUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserBroadWorksReceptionistEnterpriseDeleteUserListRequest', userId => $userId,
        @params );
}

sub UserBroadWorksReceptionistEnterpriseGetAvailableUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query(
        'UserBroadWorksReceptionistEnterpriseGetAvailableUserListRequest',
        userId => $userId,
        @params
    );
}

sub UserBroadWorksReceptionistEnterpriseGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserBroadWorksReceptionistEnterpriseGetRequest', userId => $userId );
}

sub UserBroadWorksReceptionistEnterpriseModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserBroadWorksReceptionistEnterpriseModifyRequest', userId => $userId, @params );
}

sub UserBroadWorksReceptionistOfficeGetAvailableUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query( 'UserBroadWorksReceptionistOfficeGetAvailableUserListRequest', userId => $userId,
        @params );
}

sub UserBroadWorksReceptionistOfficeGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserBroadWorksReceptionistOfficeGetRequest', userId => $userId );
}

sub UserBroadWorksReceptionistOfficeModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserBroadWorksReceptionistOfficeModifyRequest', userId => $userId, @params );
}

sub UserBroadWorksReceptionistSmallBusinessGetAvailableUserListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_query(
        'UserBroadWorksReceptionistSmallBusinessGetAvailableUserListRequest',
        userId => $userId,
        @params
    );
}

sub UserBroadWorksReceptionistSmallBusinessGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserBroadWorksReceptionistSmallBusinessGetRequest', userId => $userId );
}

sub UserBroadWorksReceptionistSmallBusinessModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserBroadWorksReceptionistSmallBusinessModifyRequest', userId => $userId, @params );
}

sub UserRemoteOfficeGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserRemoteOfficeGetRequest', userId => $userId );
}

sub UserRemoteOfficeModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserRemoteOfficeModifyRequest', userId => $userId, @params );
}

sub GroupRoutePointAddDNISRequest {
    my $self    = shift;
    my $dnisKey = shift;
    my @params  = @_;

    return $self->_send_command( 'GroupRoutePointAddDNISRequest', dnisKey => $dnisKey, @params );
}

sub GroupRoutePointAddInstanceRequest {
    my $self                   = shift;
    my $serviceProviderId      = shift;
    my $groupId                = shift;
    my $serviceUserId          = shift;
    my $serviceInstanceProfile = shift;
    my @params                 = @_;

    return $self->_send_command(
        'GroupRoutePointAddInstanceRequest',
        serviceProviderId      => $serviceProviderId,
        groupId                => $groupId,
        serviceUserId          => $serviceUserId,
        serviceInstanceProfile => $serviceInstanceProfile,
        @params
    );
}

sub GroupRoutePointBouncedCallGetRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointBouncedCallGetRequest', serviceUserId => $serviceUserId );
}

sub GroupRoutePointBouncedCallModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupRoutePointBouncedCallModifyRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupRoutePointDeleteDNISRequest {
    my $self    = shift;
    my $dnisKey = shift;

    return $self->_send_command( 'GroupRoutePointDeleteDNISRequest', dnisKey => $dnisKey );
}

sub GroupRoutePointDeleteInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_command( 'GroupRoutePointDeleteInstanceRequest', serviceUserId => $serviceUserId );
}

sub GroupRoutePointDistinctiveRingingGetRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointDistinctiveRingingGetRequest', serviceUserId => $serviceUserId );
}

sub GroupRoutePointDistinctiveRingingModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupRoutePointDistinctiveRingingModifyRequest',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupRoutePointGetAnnouncementRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointGetAnnouncementRequest', serviceUserId => $serviceUserId );
}

sub GroupRoutePointGetDNISAgentListRequest {
    my $self    = shift;
    my $dnisKey = shift;

    return $self->_send_query( 'GroupRoutePointGetDNISAgentListRequest', dnisKey => $dnisKey );
}

sub GroupRoutePointGetDNISAnnouncementRequest {
    my $self    = shift;
    my $dnisKey = shift;

    return $self->_send_query( 'GroupRoutePointGetDNISAnnouncementRequest', dnisKey => $dnisKey );
}

sub GroupRoutePointGetDNISListRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointGetDNISListRequest', serviceUserId => $serviceUserId );
}

sub GroupRoutePointGetDNISRequest {
    my $self    = shift;
    my $dnisKey = shift;

    return $self->_send_query( 'GroupRoutePointGetDNISRequest', dnisKey => $dnisKey );
}

sub GroupRoutePointGetFailoverPolicyRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointGetFailoverPolicyRequest', serviceUserId => $serviceUserId );
}

sub GroupRoutePointGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupRoutePointGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupRoutePointGetInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointGetInstanceRequest', serviceUserId => $serviceUserId );
}

sub GroupRoutePointForcedForwardingGetRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointForcedForwardingGetRequest', serviceUserId => $serviceUserId );
}

sub GroupRoutePointForcedForwardingModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupRoutePointForcedForwardingModifyRequest',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupRoutePointHolidayServiceGetRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointHolidayServiceGetRequest17sp1', serviceUserId => $serviceUserId );
}

sub GroupRoutePointHolidayServiceModifyRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupRoutePointHolidayServiceModifyRequest17sp1',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupRoutePointModifyActiveInstanceListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'GroupRoutePointModifyActiveInstanceListRequest', @params );
}

sub GroupRoutePointModifyAnnouncementRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupRoutePointModifyAnnouncementRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupRoutePointModifyDNISAnnouncementRequest {
    my $self    = shift;
    my $dnisKey = shift;
    my @params  = @_;

    return $self->_send_command( 'GroupRoutePointModifyDNISAnnouncementRequest', dnisKey => $dnisKey, @params );
}

sub GroupRoutePointModifyDNISParametersRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupRoutePointModifyDNISParametersRequest', serviceUserId => $serviceUserId,
        @params );
}

sub GroupRoutePointModifyDNISRequest {
    my $self    = shift;
    my $dnisKey = shift;
    my @params  = @_;

    return $self->_send_command( 'GroupRoutePointModifyDNISRequest', dnisKey => $dnisKey, @params );
}

sub GroupRoutePointManualFailoverRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_command( 'GroupRoutePointManualFailoverRequest', serviceUserId => $serviceUserId );
}

sub GroupRoutePointModifyFailoverPolicyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupRoutePointModifyFailoverPolicyRequest', serviceUserId => $serviceUserId,
        @params );
}

sub GroupRoutePointModifyInstanceRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupRoutePointModifyInstanceRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupRoutePointNightServiceGetRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointNightServiceGetRequest17sp1', serviceUserId => $serviceUserId );
}

sub GroupRoutePointNightServiceModifyRequest17sp1 {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupRoutePointNightServiceModifyRequest17sp1',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub GroupRoutePointOverflowGetRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointOverflowGetRequest', serviceUserId => $serviceUserId );
}

sub GroupRoutePointOverflowModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupRoutePointOverflowModifyRequest', serviceUserId => $serviceUserId, @params );
}

sub GroupRoutePointQueueCallDispositionCodeAddRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my $code          = shift;
    my $isActive      = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupRoutePointQueueCallDispositionCodeAddRequest',
        serviceUserId => $serviceUserId,
        code          => $code,
        isActive      => $isActive,
        @params
    );
}

sub GroupRoutePointQueueCallDispositionCodeDeleteRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my $code          = shift;

    return $self->_send_command(
        'GroupRoutePointQueueCallDispositionCodeDeleteRequest',
        serviceUserId => $serviceUserId,
        code          => $code
    );
}

sub GroupRoutePointQueueCallDispositionCodeGetListRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointQueueCallDispositionCodeGetListRequest',
        serviceUserId => $serviceUserId );
}

sub GroupRoutePointQueueCallDispositionCodeGetRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my $code          = shift;

    return $self->_send_query(
        'GroupRoutePointQueueCallDispositionCodeGetRequest',
        serviceUserId => $serviceUserId,
        code          => $code
    );
}

sub GroupRoutePointQueueCallDispositionCodeModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my $code          = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupRoutePointQueueCallDispositionCodeModifyRequest',
        serviceUserId => $serviceUserId,
        code          => $code,
        @params
    );
}

sub GroupRoutePointQueueCallDispositionCodeSettingsGetRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'GroupRoutePointQueueCallDispositionCodeSettingsGetRequest',
        serviceUserId => $serviceUserId );
}

sub GroupRoutePointQueueCallDispositionCodeSettingsModifyRequest {
    my $self          = shift;
    my $serviceUserId = shift;
    my @params        = @_;

    return $self->_send_command(
        'GroupRoutePointQueueCallDispositionCodeSettingsModifyRequest',
        serviceUserId => $serviceUserId,
        @params
    );
}

sub UserRoutePointCallDispositionCodeGetAvailableListRequest {
    my $self          = shift;
    my $serviceUserId = shift;

    return $self->_send_query( 'UserRoutePointCallDispositionCodeGetAvailableListRequest',
        serviceUserId => $serviceUserId );
}

sub UserRoutePointSupervisorGetListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserRoutePointSupervisorGetListRequest', userId => $userId );
}

sub UserRoutePointSupervisorModifyListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserRoutePointSupervisorModifyListRequest', userId => $userId, @params );
}

sub SystemSMDIMessageDeskAddServerRequest {
    my $self       = shift;
    my $deviceName = shift;
    my $netAddress = shift;
    my $port       = shift;
    my @params     = @_;

    return $self->_send_command(
        'SystemSMDIMessageDeskAddServerRequest',
        deviceName => $deviceName,
        netAddress => $netAddress,
        port       => $port,
        @params
    );
}

sub SystemSMDIMessageDeskDeleteServerRequest {
    my $self       = shift;
    my $deviceName = shift;

    return $self->_send_command( 'SystemSMDIMessageDeskDeleteServerRequest', deviceName => $deviceName );
}

sub SystemSMDIMessageDeskGetServerListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSMDIMessageDeskGetServerListRequest', @params );
}

sub SystemSMDIMessageDeskModifyServerRequest {
    my $self       = shift;
    my $deviceName = shift;
    my @params     = @_;

    return $self->_send_command( 'SystemSMDIMessageDeskModifyServerRequest', deviceName => $deviceName, @params );
}

sub SystemSMDIMessageDeskAddServerRouteRequest {
    my $self             = shift;
    my $routeDestination = shift;
    my $deviceName       = shift;

    return $self->_send_command(
        'SystemSMDIMessageDeskAddServerRouteRequest',
        routeDestination => $routeDestination,
        deviceName       => $deviceName
    );
}

sub SystemSMDIMessageDeskDeleteServerRouteRequest {
    my $self             = shift;
    my $routeDestination = shift;

    return $self->_send_command( 'SystemSMDIMessageDeskDeleteServerRouteRequest',
        routeDestination => $routeDestination );
}

sub SystemSMDIMessageDeskGetServerRouteListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSMDIMessageDeskGetServerRouteListRequest', @params );
}

sub SystemSMDIMessageDeskModifyServerRouteRequest {
    my $self             = shift;
    my $routeDestination = shift;
    my @params           = @_;

    return $self->_send_command(
        'SystemSMDIMessageDeskModifyServerRouteRequest',
        routeDestination => $routeDestination,
        @params
    );
}

sub UserSMDIMessageDeskAddServerRequest {
    my $self       = shift;
    my $userId     = shift;
    my $deviceName = shift;
    my $netAddress = shift;
    my $port       = shift;

    return $self->_send_command(
        'UserSMDIMessageDeskAddServerRequest',
        userId     => $userId,
        deviceName => $deviceName,
        netAddress => $netAddress,
        port       => $port
    );
}

sub UserSMDIMessageDeskDeleteServerListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSMDIMessageDeskDeleteServerListRequest', userId => $userId, @params );
}

sub UserSMDIMessageDeskGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserSMDIMessageDeskGetRequest', userId => $userId );
}

sub UserSMDIMessageDeskGetServerListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserSMDIMessageDeskGetServerListRequest', userId => $userId );
}

sub UserSMDIMessageDeskModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSMDIMessageDeskModifyRequest', userId => $userId, @params );
}

sub UserSelectiveCallAcceptanceAddCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserSelectiveCallAcceptanceAddCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserSelectiveCallAcceptanceDeleteCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_command(
        'UserSelectiveCallAcceptanceDeleteCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserSelectiveCallAcceptanceGetCriteriaListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserSelectiveCallAcceptanceGetCriteriaListRequest', userId => $userId );
}

sub UserSelectiveCallAcceptanceGetCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_query(
        'UserSelectiveCallAcceptanceGetCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserSelectiveCallAcceptanceModifyActiveCriteriaListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command(
        'UserSelectiveCallAcceptanceModifyActiveCriteriaListRequest',
        userId => $userId,
        @params
    );
}

sub UserSelectiveCallAcceptanceModifyCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserSelectiveCallAcceptanceModifyCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserSelectiveCallRejectionAddCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserSelectiveCallRejectionAddCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserSelectiveCallRejectionDeleteCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_command(
        'UserSelectiveCallRejectionDeleteCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserSelectiveCallRejectionGetCriteriaListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserSelectiveCallRejectionGetCriteriaListRequest', userId => $userId );
}

sub UserSelectiveCallRejectionGetCriteriaRequest16sp1 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_query(
        'UserSelectiveCallRejectionGetCriteriaRequest16sp1',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserSelectiveCallRejectionModifyActiveCriteriaListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSelectiveCallRejectionModifyActiveCriteriaListRequest', userId => $userId,
        @params );
}

sub UserSelectiveCallRejectionModifyCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserSelectiveCallRejectionModifyCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserSequentialRingAddCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserSequentialRingAddCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserSequentialRingDeleteCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_command(
        'UserSequentialRingDeleteCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserSequentialRingGetCriteriaRequest16 {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_query(
        'UserSequentialRingGetCriteriaRequest16',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserSequentialRingGetRequest14sp4 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserSequentialRingGetRequest14sp4', userId => $userId );
}

sub UserSequentialRingModifyCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserSequentialRingModifyCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserSequentialRingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSequentialRingModifyRequest', userId => $userId, @params );
}

sub GroupSeriesCompletionAddInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupSeriesCompletionAddInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupSeriesCompletionDeleteInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_command(
        'GroupSeriesCompletionDeleteInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupSeriesCompletionGetAvailableUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupSeriesCompletionGetAvailableUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupSeriesCompletionGetInstanceListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupSeriesCompletionGetInstanceListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupSeriesCompletionGetInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;

    return $self->_send_query(
        'GroupSeriesCompletionGetInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name
    );
}

sub GroupSeriesCompletionModifyInstanceRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupSeriesCompletionModifyInstanceRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub UserSeriesCompletionGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserSeriesCompletionGetRequest', userId => $userId );
}

sub GroupServiceScriptsGroupClearLogRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_command(
        'GroupServiceScriptsGroupClearLogRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupServiceScriptsGroupGetLogRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupServiceScriptsGroupGetLogRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupServiceScriptsGroupGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupServiceScriptsGroupGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupServiceScriptsGroupModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupServiceScriptsGroupModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub UserServiceScriptsUserClearLogRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_command( 'UserServiceScriptsUserClearLogRequest', userId => $userId );
}

sub UserServiceScriptsUserGetLogRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserServiceScriptsUserGetLogRequest', userId => $userId );
}

sub UserServiceScriptsUserGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserServiceScriptsUserGetRequest', userId => $userId );
}

sub UserServiceScriptsUserModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserServiceScriptsUserModifyRequest', userId => $userId, @params );
}

sub UserSharedCallAppearanceAddEndpointRequest14sp2 {
    my $self                 = shift;
    my $userId               = shift;
    my $accessDeviceEndpoint = shift;
    my $isActive             = shift;
    my $allowOrigination     = shift;
    my $allowTermination     = shift;

    return $self->_send_command(
        'UserSharedCallAppearanceAddEndpointRequest14sp2',
        userId               => $userId,
        accessDeviceEndpoint => $accessDeviceEndpoint,
        isActive             => $isActive,
        allowOrigination     => $allowOrigination,
        allowTermination     => $allowTermination
    );
}

sub UserSharedCallAppearanceDeleteEndpointListRequest14 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSharedCallAppearanceDeleteEndpointListRequest14', userId => $userId, @params );
}

sub UserSharedCallAppearanceGetEndpointRequest {
    my $self                 = shift;
    my $userId               = shift;
    my $accessDeviceEndpoint = shift;

    return $self->_send_query(
        'UserSharedCallAppearanceGetEndpointRequest',
        userId               => $userId,
        accessDeviceEndpoint => $accessDeviceEndpoint
    );
}

sub UserSharedCallAppearanceGetRequest16sp2 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserSharedCallAppearanceGetRequest16sp2', userId => $userId );
}

sub UserSharedCallAppearanceModifyEndpointRequest {
    my $self                 = shift;
    my $userId               = shift;
    my $accessDeviceEndpoint = shift;
    my @params               = @_;

    return $self->_send_command(
        'UserSharedCallAppearanceModifyEndpointRequest',
        userId               => $userId,
        accessDeviceEndpoint => $accessDeviceEndpoint,
        @params
    );
}

sub UserSharedCallAppearanceModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSharedCallAppearanceModifyRequest', userId => $userId, @params );
}

sub UserSimultaneousRingFamilyAddCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserSimultaneousRingFamilyAddCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserSimultaneousRingFamilyDeleteCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_command(
        'UserSimultaneousRingFamilyDeleteCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserSimultaneousRingFamilyGetCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_query(
        'UserSimultaneousRingFamilyGetCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserSimultaneousRingFamilyGetRequest17 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserSimultaneousRingFamilyGetRequest17', userId => $userId );
}

sub UserSimultaneousRingFamilyModifyCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserSimultaneousRingFamilyModifyCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserSimultaneousRingFamilyModifyRequest17 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSimultaneousRingFamilyModifyRequest17', userId => $userId, @params );
}

sub UserSimultaneousRingPersonalAddCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserSimultaneousRingPersonalAddCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserSimultaneousRingPersonalDeleteCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_command(
        'UserSimultaneousRingPersonalDeleteCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserSimultaneousRingPersonalGetCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;

    return $self->_send_query(
        'UserSimultaneousRingPersonalGetCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName
    );
}

sub UserSimultaneousRingPersonalGetRequest17 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserSimultaneousRingPersonalGetRequest17', userId => $userId );
}

sub UserSimultaneousRingPersonalModifyCriteriaRequest {
    my $self         = shift;
    my $userId       = shift;
    my $criteriaName = shift;
    my @params       = @_;

    return $self->_send_command(
        'UserSimultaneousRingPersonalModifyCriteriaRequest',
        userId       => $userId,
        criteriaName => $criteriaName,
        @params
    );
}

sub UserSimultaneousRingPersonalModifyRequest17 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSimultaneousRingPersonalModifyRequest17', userId => $userId, @params );
}

sub GroupSpeedDial100GetRequest17sp1 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupSpeedDial100GetRequest17sp1',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupSpeedDial100ModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupSpeedDial100ModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub SystemSpeedDial100GetRequest17sp1 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemSpeedDial100GetRequest17sp1', @params );
}

sub SystemSpeedDial100ModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemSpeedDial100ModifyRequest', @params );
}

sub UserSpeedDial100AddListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSpeedDial100AddListRequest', userId => $userId, @params );
}

sub UserSpeedDial100DeleteListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSpeedDial100DeleteListRequest', userId => $userId, @params );
}

sub UserSpeedDial100GetListRequest17sp1 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserSpeedDial100GetListRequest17sp1', userId => $userId );
}

sub UserSpeedDial100GetRequest {
    my $self      = shift;
    my $userId    = shift;
    my $speedCode = shift;

    return $self->_send_command( 'UserSpeedDial100GetRequest', userId => $userId, speedCode => $speedCode );
}

sub UserSpeedDial100ModifyListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSpeedDial100ModifyListRequest', userId => $userId, @params );
}

sub UserSpeedDial8GetListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserSpeedDial8GetListRequest', userId => $userId );
}

sub UserSpeedDial8ModifyListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserSpeedDial8ModifyListRequest', userId => $userId, @params );
}

sub UserThirdPartyVoiceMailSupportGetRequest17 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserThirdPartyVoiceMailSupportGetRequest17', userId => $userId );
}

sub UserThirdPartyVoiceMailSupportModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserThirdPartyVoiceMailSupportModifyRequest', userId => $userId, @params );
}

sub GroupThirdPartyVoiceMailSupportGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupThirdPartyVoiceMailSupportGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupThirdPartyVoiceMailSupportModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupThirdPartyVoiceMailSupportModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub SystemThirdPartyVoiceMailSupportGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemThirdPartyVoiceMailSupportGetRequest', @params );
}

sub SystemThirdPartyVoiceMailSupportModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemThirdPartyVoiceMailSupportModifyRequest', @params );
}

sub EnterpriseEnterpriseTrunkAddRequest {
    my $self                   = shift;
    my $serviceProviderId      = shift;
    my $enterpriseTrunkName    = shift;
    my $maximumRerouteAttempts = shift;
    my $routeExhaustionAction  = shift;
    my @params                 = @_;

    return $self->_send_command(
        'EnterpriseEnterpriseTrunkAddRequest',
        serviceProviderId      => $serviceProviderId,
        enterpriseTrunkName    => $enterpriseTrunkName,
        maximumRerouteAttempts => $maximumRerouteAttempts,
        routeExhaustionAction  => $routeExhaustionAction,
        @params
    );
}

sub EnterpriseEnterpriseTrunkAddUserListRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $enterpriseTrunkName = shift;
    my @params              = @_;

    return $self->_send_command(
        'EnterpriseEnterpriseTrunkAddUserListRequest',
        serviceProviderId   => $serviceProviderId,
        enterpriseTrunkName => $enterpriseTrunkName,
        @params
    );
}

sub EnterpriseEnterpriseTrunkDeleteRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $enterpriseTrunkName = shift;

    return $self->_send_command(
        'EnterpriseEnterpriseTrunkDeleteRequest',
        serviceProviderId   => $serviceProviderId,
        enterpriseTrunkName => $enterpriseTrunkName
    );
}

sub EnterpriseEnterpriseTrunkDeleteUserListRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $enterpriseTrunkName = shift;
    my @params              = @_;

    return $self->_send_command(
        'EnterpriseEnterpriseTrunkDeleteUserListRequest',
        serviceProviderId   => $serviceProviderId,
        enterpriseTrunkName => $enterpriseTrunkName,
        @params
    );
}

sub EnterpriseEnterpriseTrunkGetAvailableTrunkGroupListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseEnterpriseTrunkGetAvailableTrunkGroupListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseEnterpriseTrunkGetAvailableUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseEnterpriseTrunkGetAvailableUserListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub EnterpriseEnterpriseTrunkGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'EnterpriseEnterpriseTrunkGetListRequest', serviceProviderId => $serviceProviderId );
}

sub EnterpriseEnterpriseTrunkGetRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $enterpriseTrunkName = shift;

    return $self->_send_query(
        'EnterpriseEnterpriseTrunkGetRequest',
        serviceProviderId   => $serviceProviderId,
        enterpriseTrunkName => $enterpriseTrunkName
    );
}

sub EnterpriseEnterpriseTrunkGetUserListRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $enterpriseTrunkName = shift;
    my @params              = @_;

    return $self->_send_query(
        'EnterpriseEnterpriseTrunkGetUserListRequest',
        serviceProviderId   => $serviceProviderId,
        enterpriseTrunkName => $enterpriseTrunkName,
        @params
    );
}

sub EnterpriseEnterpriseTrunkModifyRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $enterpriseTrunkName = shift;
    my @params              = @_;

    return $self->_send_command(
        'EnterpriseEnterpriseTrunkModifyRequest',
        serviceProviderId   => $serviceProviderId,
        enterpriseTrunkName => $enterpriseTrunkName,
        @params
    );
}

sub GroupEnterpriseTrunkAddRequest {
    my $self                   = shift;
    my $serviceProviderId      = shift;
    my $groupId                = shift;
    my $enterpriseTrunkName    = shift;
    my $maximumRerouteAttempts = shift;
    my $routeExhaustionAction  = shift;
    my @params                 = @_;

    return $self->_send_command(
        'GroupEnterpriseTrunkAddRequest',
        serviceProviderId      => $serviceProviderId,
        groupId                => $groupId,
        enterpriseTrunkName    => $enterpriseTrunkName,
        maximumRerouteAttempts => $maximumRerouteAttempts,
        routeExhaustionAction  => $routeExhaustionAction,
        @params
    );
}

sub GroupEnterpriseTrunkAddUserListRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $groupId             = shift;
    my $enterpriseTrunkName = shift;
    my @params              = @_;

    return $self->_send_command(
        'GroupEnterpriseTrunkAddUserListRequest',
        serviceProviderId   => $serviceProviderId,
        groupId             => $groupId,
        enterpriseTrunkName => $enterpriseTrunkName,
        @params
    );
}

sub GroupEnterpriseTrunkDeleteRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $groupId             = shift;
    my $enterpriseTrunkName = shift;

    return $self->_send_command(
        'GroupEnterpriseTrunkDeleteRequest',
        serviceProviderId   => $serviceProviderId,
        groupId             => $groupId,
        enterpriseTrunkName => $enterpriseTrunkName
    );
}

sub GroupEnterpriseTrunkDeleteUserListRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $groupId             = shift;
    my $enterpriseTrunkName = shift;
    my @params              = @_;

    return $self->_send_command(
        'GroupEnterpriseTrunkDeleteUserListRequest',
        serviceProviderId   => $serviceProviderId,
        groupId             => $groupId,
        enterpriseTrunkName => $enterpriseTrunkName,
        @params
    );
}

sub GroupEnterpriseTrunkGetAvailableTrunkGroupListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupEnterpriseTrunkGetAvailableTrunkGroupListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupEnterpriseTrunkGetAvailableUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupEnterpriseTrunkGetAvailableUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupEnterpriseTrunkGetListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupEnterpriseTrunkGetListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupEnterpriseTrunkGetRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $groupId             = shift;
    my $enterpriseTrunkName = shift;

    return $self->_send_query(
        'GroupEnterpriseTrunkGetRequest',
        serviceProviderId   => $serviceProviderId,
        groupId             => $groupId,
        enterpriseTrunkName => $enterpriseTrunkName
    );
}

sub GroupEnterpriseTrunkGetUserListRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $groupId             = shift;
    my $enterpriseTrunkName = shift;
    my @params              = @_;

    return $self->_send_query(
        'GroupEnterpriseTrunkGetUserListRequest',
        serviceProviderId   => $serviceProviderId,
        groupId             => $groupId,
        enterpriseTrunkName => $enterpriseTrunkName,
        @params
    );
}

sub GroupEnterpriseTrunkModifyRequest {
    my $self                = shift;
    my $serviceProviderId   = shift;
    my $groupId             = shift;
    my $enterpriseTrunkName = shift;
    my @params              = @_;

    return $self->_send_command(
        'GroupEnterpriseTrunkModifyRequest',
        serviceProviderId   => $serviceProviderId,
        groupId             => $groupId,
        enterpriseTrunkName => $enterpriseTrunkName,
        @params
    );
}

sub GroupTrunkGroupAddInstanceRequest17sp4 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $name              = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupTrunkGroupAddInstanceRequest17sp4',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        name              => $name,
        @params
    );
}

sub GroupTrunkGroupDeleteInstanceRequest14sp4 {
    my $self          = shift;
    my $trunkGroupKey = shift;

    return $self->_send_command( 'GroupTrunkGroupDeleteInstanceRequest14sp4', trunkGroupKey => $trunkGroupKey );
}

sub GroupTrunkGroupGetInstanceListRequest14sp4 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupTrunkGroupGetInstanceListRequest14sp4',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupTrunkGroupGetInstanceRequest17sp4 {
    my $self          = shift;
    my $trunkGroupKey = shift;

    return $self->_send_query( 'GroupTrunkGroupGetInstanceRequest17sp4', trunkGroupKey => $trunkGroupKey );
}

sub GroupTrunkGroupGetAvailableHostedUserListRequest {
    my $self          = shift;
    my $trunkGroupKey = shift;
    my @params        = @_;

    return $self->_send_query(
        'GroupTrunkGroupGetAvailableHostedUserListRequest',
        trunkGroupKey => $trunkGroupKey,
        @params
    );
}

sub GroupTrunkGroupGetInstanceUserListRequest14sp4 {
    my $self          = shift;
    my $trunkGroupKey = shift;
    my @params        = @_;

    return $self->_send_query(
        'GroupTrunkGroupGetInstanceUserListRequest14sp4',
        trunkGroupKey => $trunkGroupKey,
        @params
    );
}

sub GroupTrunkGroupGetRequest14sp9 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupTrunkGroupGetRequest14sp9',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupTrunkGroupModifyInstanceRequest15 {
    my $self          = shift;
    my $trunkGroupKey = shift;
    my @params        = @_;

    return $self->_send_command( 'GroupTrunkGroupModifyInstanceRequest15', trunkGroupKey => $trunkGroupKey, @params );
}

sub GroupTrunkGroupModifyRequest14sp9 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupTrunkGroupModifyRequest14sp9',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupTrunkGroupUserCreationTaskAddRequest14sp4 {
    my $self              = shift;
    my $trunkGroupKey     = shift;
    my $taskName          = shift;
    my $userIdFormat      = shift;
    my $userIdDomain      = shift;
    my $populateExtension = shift;
    my $linePortFormat    = shift;
    my $linePortDomain    = shift;
    my $populateContact   = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupTrunkGroupUserCreationTaskAddRequest14sp4',
        trunkGroupKey     => $trunkGroupKey,
        taskName          => $taskName,
        userIdFormat      => $userIdFormat,
        userIdDomain      => $userIdDomain,
        populateExtension => $populateExtension,
        linePortFormat    => $linePortFormat,
        linePortDomain    => $linePortDomain,
        populateContact   => $populateContact,
        @params
    );
}

sub GroupTrunkGroupUserCreationTaskDeleteRequest14sp4 {
    my $self          = shift;
    my $trunkGroupKey = shift;
    my $taskName      = shift;

    return $self->_send_command(
        'GroupTrunkGroupUserCreationTaskDeleteRequest14sp4',
        trunkGroupKey => $trunkGroupKey,
        taskName      => $taskName
    );
}

sub GroupTrunkGroupUserCreationTaskGetListRequest14sp4 {
    my $self          = shift;
    my $trunkGroupKey = shift;

    return $self->_send_query( 'GroupTrunkGroupUserCreationTaskGetListRequest14sp4', trunkGroupKey => $trunkGroupKey );
}

sub GroupTrunkGroupUserCreationTaskGetRequest14sp4 {
    my $self          = shift;
    my $trunkGroupKey = shift;
    my $taskName      = shift;

    return $self->_send_query(
        'GroupTrunkGroupUserCreationTaskGetRequest14sp4',
        trunkGroupKey => $trunkGroupKey,
        taskName      => $taskName
    );
}

sub ServiceProviderTrunkGroupGetRequest14sp1 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderTrunkGroupGetRequest14sp1', serviceProviderId => $serviceProviderId );
}

sub ServiceProviderTrunkGroupModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderTrunkGroupModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub SystemTrunkGroupUserCreationTaskGetListRequest14sp4 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemTrunkGroupUserCreationTaskGetListRequest14sp4', @params );
}

sub UserTwoStageDialingGetRequest13Mp20 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserTwoStageDialingGetRequest13Mp20', userId => $userId );
}

sub UserTwoStageDialingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserTwoStageDialingModifyRequest', userId => $userId, @params );
}

sub SystemTwoStageDialingAddDnRequest {
    my $self        = shift;
    my $phoneNumber = shift;
    my @params      = @_;

    return $self->_send_command( 'SystemTwoStageDialingAddDnRequest', phoneNumber => $phoneNumber, @params );
}

sub SystemTwoStageDialingDeleteDnRequest {
    my $self        = shift;
    my $phoneNumber = shift;

    return $self->_send_command( 'SystemTwoStageDialingDeleteDnRequest', phoneNumber => $phoneNumber );
}

sub SystemTwoStageDialingGetDnListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemTwoStageDialingGetDnListRequest', @params );
}

sub SystemTwoStageDialingModifyDnRequest {
    my $self        = shift;
    my $phoneNumber = shift;
    my @params      = @_;

    return $self->_send_command( 'SystemTwoStageDialingModifyDnRequest', phoneNumber => $phoneNumber, @params );
}

sub UserVideoAddOnGetRequest14 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserVideoAddOnGetRequest14', userId => $userId );
}

sub UserVideoAddOnModifyRequest14 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserVideoAddOnModifyRequest14', userId => $userId, @params );
}

sub EnterpriseVirtualOnNetEnterpriseExtensionsGetUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_query(
        'EnterpriseVirtualOnNetEnterpriseExtensionsGetUserListRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub GroupVirtualOnNetEnterpriseExtensionsAddUserRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupVirtualOnNetEnterpriseExtensionsAddUserRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupVirtualOnNetEnterpriseExtensionsDeleteUserRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $phoneNumber       = shift;

    return $self->_send_command(
        'GroupVirtualOnNetEnterpriseExtensionsDeleteUserRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        phoneNumber       => $phoneNumber
    );
}

sub GroupVirtualOnNetEnterpriseExtensionsGetUserListRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_query(
        'GroupVirtualOnNetEnterpriseExtensionsGetUserListRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupVirtualOnNetEnterpriseExtensionsGetUserRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $phoneNumber       = shift;

    return $self->_send_query(
        'GroupVirtualOnNetEnterpriseExtensionsGetUserRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        phoneNumber       => $phoneNumber
    );
}

sub GroupVirtualOnNetEnterpriseExtensionsModifyUserRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my $phoneNumber       = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupVirtualOnNetEnterpriseExtensionsModifyUserRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        phoneNumber       => $phoneNumber,
        @params
    );
}

sub SystemVirtualOnNetCallTypeAddRequest {
    my $self                         = shift;
    my $virtualOnNetCallTypeName     = shift;
    my $virtualOnNetCallTypeCdrValue = shift;

    return $self->_send_command(
        'SystemVirtualOnNetCallTypeAddRequest',
        virtualOnNetCallTypeName     => $virtualOnNetCallTypeName,
        virtualOnNetCallTypeCdrValue => $virtualOnNetCallTypeCdrValue
    );
}

sub SystemVirtualOnNetCallTypeDeleteRequest {
    my $self                     = shift;
    my $virtualOnNetCallTypeName = shift;

    return $self->_send_command( 'SystemVirtualOnNetCallTypeDeleteRequest',
        virtualOnNetCallTypeName => $virtualOnNetCallTypeName );
}

sub SystemVirtualOnNetCallTypeGetListRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemVirtualOnNetCallTypeGetListRequest', @params );
}

sub SystemVirtualOnNetCallTypeModifyRequest {
    my $self                     = shift;
    my $virtualOnNetCallTypeName = shift;
    my @params                   = @_;

    return $self->_send_command(
        'SystemVirtualOnNetCallTypeModifyRequest',
        virtualOnNetCallTypeName => $virtualOnNetCallTypeName,
        @params
    );
}

sub GroupVoiceMessagingGroupGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupVoiceMessagingGroupGetRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupVoiceMessagingGroupGetVoicePortalBrandingRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupVoiceMessagingGroupGetVoicePortalBrandingRequest16',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupVoiceMessagingGroupGetVoicePortalRequest17 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;

    return $self->_send_query(
        'GroupVoiceMessagingGroupGetVoicePortalRequest17',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId
    );
}

sub GroupVoiceMessagingGroupModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupVoiceMessagingGroupModifyRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupVoiceMessagingGroupModifyVoicePortalBrandingRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupVoiceMessagingGroupModifyVoicePortalBrandingRequest16',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub GroupVoiceMessagingGroupModifyVoicePortalRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my $groupId           = shift;
    my @params            = @_;

    return $self->_send_command(
        'GroupVoiceMessagingGroupModifyVoicePortalRequest',
        serviceProviderId => $serviceProviderId,
        groupId           => $groupId,
        @params
    );
}

sub ServiceProviderVoiceMessagingGroupGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderVoiceMessagingGroupGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingRequest16',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderVoiceMessagingGroupGetVoicePortalRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderVoiceMessagingGroupGetVoicePortalRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderVoiceMessagingGroupModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderVoiceMessagingGroupModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderVoiceMessagingGroupModifyVoicePortalBrandingRequest16 {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderVoiceMessagingGroupModifyVoicePortalBrandingRequest16',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub ServiceProviderVoiceMessagingGroupModifyVoicePortalRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderVoiceMessagingGroupModifyVoicePortalRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub SystemVoiceMessageSummaryUpdateGetRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemVoiceMessageSummaryUpdateGetRequest', @params );
}

sub SystemVoiceMessageSummaryUpdateModifyRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemVoiceMessageSummaryUpdateModifyRequest', @params );
}

sub SystemVoiceMessagingGroupGetRequest16sp2 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_query( 'SystemVoiceMessagingGroupGetRequest16sp2', @params );
}

sub SystemVoiceMessagingGroupGetVoicePortalMenusRequest14 {
    my $self               = shift;
    my $getDefaultMenuKeys = shift;

    return $self->_send_query( 'SystemVoiceMessagingGroupGetVoicePortalMenusRequest14',
        getDefaultMenuKeys => $getDefaultMenuKeys );
}

sub SystemVoiceMessagingGroupModifyRequest16 {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemVoiceMessagingGroupModifyRequest16', @params );
}

sub SystemVoiceMessagingGroupModifyVoicePortalMenusRequest {
    my $self   = shift;
    my @params = @_;

    return $self->_send_command( 'SystemVoiceMessagingGroupModifyVoicePortalMenusRequest', @params );
}

sub UserVoiceMessagingUserAddAliasListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserVoiceMessagingUserAddAliasListRequest', userId => $userId, @params );
}

sub UserVoiceMessagingUserDeleteAliasListRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserVoiceMessagingUserDeleteAliasListRequest', userId => $userId, @params );
}

sub UserVoiceMessagingUserGetAdvancedVoiceManagementRequest14sp3 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserVoiceMessagingUserGetAdvancedVoiceManagementRequest14sp3', userId => $userId );
}

sub UserVoiceMessagingUserGetAliasListRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserVoiceMessagingUserGetAliasListRequest', userId => $userId );
}

sub UserVoiceMessagingUserGetDistributionListRequest {
    my $self   = shift;
    my $userId = shift;
    my $listId = shift;

    return $self->_send_query( 'UserVoiceMessagingUserGetDistributionListRequest', userId => $userId,
        listId => $listId );
}

sub UserVoiceMessagingUserGetGreetingRequest16 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserVoiceMessagingUserGetGreetingRequest16', userId => $userId );
}

sub UserVoiceMessagingUserGetOutgoingSMDIMWIRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserVoiceMessagingUserGetOutgoingSMDIMWIRequest', userId => $userId );
}

sub UserVoiceMessagingUserGetVoiceManagementRequest17 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserVoiceMessagingUserGetVoiceManagementRequest17', userId => $userId );
}

sub UserVoiceMessagingUserGetVoicePortalRequest16 {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserVoiceMessagingUserGetVoicePortalRequest16', userId => $userId );
}

sub UserVoiceMessagingUserModifyAdvancedVoiceManagementRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command(
        'UserVoiceMessagingUserModifyAdvancedVoiceManagementRequest',
        userId => $userId,
        @params
    );
}

sub UserVoiceMessagingUserModifyDistributionListRequest {
    my $self   = shift;
    my $userId = shift;
    my $listId = shift;
    my @params = @_;

    return $self->_send_command(
        'UserVoiceMessagingUserModifyDistributionListRequest',
        userId => $userId,
        listId => $listId,
        @params
    );
}

sub UserVoiceMessagingUserModifyGreetingRequest16 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserVoiceMessagingUserModifyGreetingRequest16', userId => $userId, @params );
}

sub UserVoiceMessagingUserModifyOutgoingSMDIMWIRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserVoiceMessagingUserModifyOutgoingSMDIMWIRequest', userId => $userId, @params );
}

sub UserVoiceMessagingUserModifyVoiceManagementRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserVoiceMessagingUserModifyVoiceManagementRequest', userId => $userId, @params );
}

sub UserVoiceMessagingUserModifyVoicePortalRequest16 {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserVoiceMessagingUserModifyVoicePortalRequest16', userId => $userId, @params );
}

sub UserVoicePortalCallingGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserVoicePortalCallingGetRequest', userId => $userId );
}

sub UserVoicePortalCallingModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserVoicePortalCallingModifyRequest', userId => $userId, @params );
}

sub ServiceProviderZoneCallingRestrictionsGetRequest {
    my $self              = shift;
    my $serviceProviderId = shift;

    return $self->_send_query( 'ServiceProviderZoneCallingRestrictionsGetRequest',
        serviceProviderId => $serviceProviderId );
}

sub ServiceProviderZoneCallingRestrictionsModifyRequest {
    my $self              = shift;
    my $serviceProviderId = shift;
    my @params            = @_;

    return $self->_send_command(
        'ServiceProviderZoneCallingRestrictionsModifyRequest',
        serviceProviderId => $serviceProviderId,
        @params
    );
}

sub UserZoneCallingRestrictionsGetRequest {
    my $self   = shift;
    my $userId = shift;

    return $self->_send_query( 'UserZoneCallingRestrictionsGetRequest', userId => $userId );
}

sub UserZoneCallingRestrictionsModifyRequest {
    my $self   = shift;
    my $userId = shift;
    my @params = @_;

    return $self->_send_command( 'UserZoneCallingRestrictionsModifyRequest', userId => $userId, @params );
}
# ------------------------------------------------------------------------

no Moose;
__PACKAGE__->meta->make_immutable;
1;

__END__

=head3 EnterpriseBroadWorksMobileManagerAddRequest

Add the C<BroadWorks> Mobile Manager.
 Only one C<BroadWorks> Mobile Manager
can be added per
 enterprise.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item informationFile

=item certificateFile

=item isActive

=item localToCarrier

=item maxTxPerSecondEnabled

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerGetRequest

Get the C<BroadWorks> Mobile Manager.
 The response is either
C<EnterpriseBroadWorksMobileManagerGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerGetDomainListRequest

Get the list of domains of the C<BroadWorks> Mobile Manager.
 The response is
either C<EnterpriseBroadWorksMobileManagerGetDomainListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerDeleteRequest

Delete the C<BroadWorks> Mobile Manager.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerModifyRequest

Modify the C<BroadWorks> Mobile Manager settings.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerActivationRequest

Activates or Deactivates the C<BroadWorks> Mobile Manager.
 The
C<deactivationReason> is required when C<isActive> is set to false. 
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item isActive

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerSendCarrierFilesRequest

Sends an email with the carrier information and certificate files.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item emailTo

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerAddHomeZoneRequest

Add a home zone to the C<BroadWorks> Mobile Manager.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item homeZoneDomainName

=item mobileCountryCode

=item mobileNetworkCode

=item locationAreaCode

=item cellIdentity

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerGetHomeZoneListRequest

Get the list of home zones of the C<BroadWorks> Mobile Manager.
 The response
is either C<EnterpriseBroadWorksMobileManagerGetHomeZoneListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerGetHomeZoneRequest

Get a home zone from the C<BroadWorks> Mobile Manager.
 The response is either
C<EnterpriseBroadWorksMobileManagerGetHomeZoneResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item homeZoneId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerDeleteHomeZoneRequest

Delete a home zone from the C<BroadWorks> Mobile Manager.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item homeZoneId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerDeleteHomeZoneListRequest

Delete a list of home zones from the C<BroadWorks> Mobile Manager.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item homeZoneId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseBroadWorksMobileManagerModifyHomeZoneRequest

Modify an existing home zone in the C<BroadWorks> Mobile Manager.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item homeZoneId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCommonPhoneListAddListRequest

Add one or more entries to an enterprise's common phone list.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item entry

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCommonPhoneListDeleteListRequest

Delete one or more entries from an enterprise's common phone list.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item entryName

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCommonPhoneListGetListRequest

Get an enterprise's common phone list.
 The response is either a
C<EnterpriseCommonPhoneListGetListResponse> or an C<ErrorResponse>.
 The search
can be done using multiple criterion.
 If the C<searchCriteriaModeOr> is
present, any result matching any one criteria is included in the results. 
Otherwise, only results matching all the search criterion are included in the
results. 
 If no search criteria is specified, all results are returned.
Specifying C<searchCriteriaModeOr> without any search criteria results in an
C<ErrorResponse>.
 In all cases, if a C<responseSizeLimit> is specified and the
number of matching results is more than this limit, then an
 C<ErrorResponse>
is returned.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCommonPhoneListModifyRequest

Modify an entry in an enterprise's common phone list.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item entryName

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseDepartmentAddRequest

Add a department to enterprise.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item enterpriseId

=item departmentName

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseDepartmentDeleteRequest

Delete a department from an enterprise.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item enterpriseId

=item departmentName

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseDepartmentGetAvailableParentListRequest

Get a list of enterprise level departments in an enterprise that could be the
parent of the
 specified department. The department itself and all its
decendents are not eligible to be
 the parent department.
 The response is
either C<EnterpriseDepartmentGetAvailableParentListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item enterpriseId

=item departmentName

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseDepartmentGetListRequest

Request a list of departments in an enterprise. You may request only the
 list
of departments defined at the enterprise-level, or you may request
 the list of
all departments in the enterprise including all the departments
 defined within
the groups inside the enterprise.
 The response is either
C<EnterpriseDepartmentGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item enterpriseId

=item includeGroupDepartments

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseDepartmentModifyRequest

Modify a department of an enterprise.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item enterpriseId

=item departmentName

=back

Additionally there are generic tagged parameters.

=head3 EnterprisePhoneDirectoryGetListRequest17

Request a table containing the phone directory for an enterprise.
 The
directory includes all users in the enterprise and all entries in the
enterprise common phone list.
 It is possible to search by various criteria to
restrict the number of rows returned.
 Multiple search criteria are logically
C<ANDed> together.
 The response is either
C<EnterprisePhoneDirectoryGetListResponse17> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item enterpriseId

=item isExtendedInfoRequested

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseSessionAdmissionControlGetAvailableDeviceListRequest

Request to get the list of devices can be assigned to session admission control
group for the enterprise.
 The response is either an
C<EnterpriseSessionAdmissionControlGetAvailableDeviceListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseSessionAdmissionControlGroupAddDeviceListRequest

Request to add one or more devices to an enterprise level session admission
control group.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseSessionAdmissionControlGroupAddRequest

Request to add a session admission control group for the enterprise.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=item maxSession

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseSessionAdmissionControlGroupDeleteDeviceListRequest

Request to delete one or more devices from an enterprise level session
admission control group.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseSessionAdmissionControlGroupDeleteListRequest

Request to delete one or more session admission control groups for the
enterprise.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseSessionAdmissionControlGroupGetListRequest

Request to get the list of session admission control group for the enterprise.
The response is either an
C<EnterpriseSessionAdmissionControlGroupGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseSessionAdmissionControlGroupGetRequest

Request to get a session admission control group for the enterprise.
 The
response is either an C<EnterpriseSessionAdmissionControlGroupGetResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseSessionAdmissionControlGroupModifyRequest

Request to modify a session admission control group for the enterprise.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseVoiceVPNAddPolicyRequest

Add the enterprise level data associated with a Voice VPN location code.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item locationDialingCode

=item minExtensionLength

=item maxExtensionLength

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseVoiceVPNDeletePolicyRequest

Delete a enterprise voice VPN location.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item locationDialingCode

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseVoiceVPNGetDefaultRequest

Request the Voice VPN default settings for the enterprise.
 The response is
C<EnterpriseVoiceVPNGetDefaultResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseVoiceVPNGetPolicyRequest

Request the enterprise level data associated with Voice VPN location code.
 The
response is either a C<EnterpriseVoiceVPNGetPolicyResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item locationDialingCode

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseVoiceVPNGetRequest14sp3

Request the enterprise level data associated with Voice VPN.
 The response is
either a C<EnterpriseVoiceVPNGetResponse14sp3> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseVoiceVPNGetPolicyListRequest

Request the list of Voice VPN locations.
 It is possible to search by various
criteria to restrict the number of rows returned.
 Multiple search criteria are
logically C<ANDed> together.
 The response is either a
C<EnterpriseVoiceVPNGetPolicyListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseVoiceVPNModifyPolicyRequest

Modify the enterprise level data associated with a Voice VPN location code.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item locationDialingCode

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseVoiceVPNModifyRequest

Modify the enterprise voice VPN level data associated with voice VPN.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceAddRequest14

Request to add a group access device.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceCustomTagAddRequest

Request to add a static configuration tag for a group access device.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=item tagName

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceCustomTagDeleteListRequest

Request to delete static configuration tags for a group access device.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceCustomTagGetListRequest

Request to get the list of custom configuration tags managed by the Device
Management System, on a per-device profile basis.
 The response is either
C<GroupAccessDeviceCustomTagGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceCustomTagModifyRequest

Request to modify a static configuration tag for a group access device.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=item tagName

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceDeleteRequest

Request to delete a specified group access device.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceFileGetListRequest14sp8

Request to get the list of device files managed by the Device Management
System, on a per-device profile basis.
 The response is either
C<GroupAccessDeviceFileGetListResponse14sp8> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceFileGetRequest16sp1

Request to get a group device profile file.
 The response is either
C<GroupAccessDeviceFileGetResponse16sp1> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceFileModifyRequest14sp8

Request to modify a specified group access device file.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceGetEnhancedConfigurationTypeListRequest

Requests the list of configurable device types of devices that have already
been
 added to the group.
 The response is either
C<GroupAccessDeviceGetEnhancedConfigurationTypeListResponse>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceGetEnhancedConfigurationTypeRequest14

Requests the details of a specified configurable device type for a group.
 The
response is either C<GroupAccessDeviceGetEnhancedConfigurationTypeResponse14>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceGetAvailableDetailListRequest14

Requests the list of available access devices for assignment to a user
 within
a group. The list includes devices created at the system, service provider, and
group levels.
 The response is either
C<GroupAccessDeviceGetAvailableDetailListResponse14> or
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item isMusicOnHold

=item onlyVideoCapable

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceGetListRequest

Requests the list of access devices in a group.
 The response is either
C<GroupAccessDeviceGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceGetRequest16

Requests the configuration of a specified group access device.
 The response is
either C<GroupAccessDeviceGetResponse16> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceGetUserListRequest

Requests the configuration of a specified group access device.
 The response is
either C<GroupAccessDeviceGetUserListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceModifyRequest14

Request to modify a specified group access device.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceModifyUserRequest

Request to modify attributes for line/ports assigned on the group device
profile.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=item linePort

=back

Additionally there are generic tagged parameters.

=head3 GroupAccessDeviceResetRequest

Reset a specific group SIP device that supports the reset operation.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupApplicationServerSetGetRequest

Get the Application Server set for a group.
 The response is either a
C<GroupApplicationServerSetGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item groupId

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 GroupApplicationServerSetModifyRequest

Modify the Application Server set for a group.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupDialableCallerIDCriteriaAddRequest

Add a new Dialable Caller ID Criteria. Criteria are added at the bottom of the
list with the lowest priority. The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupDialableCallerIDCriteriaDeleteRequest

Delete a Dialable Caller ID Criteria.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupDialableCallerIDCriteriaGetRequest

Get an existing Dialable Caller ID Criteria.
 The response is either a  
C<GroupDialableCallerIDCriteriaGetRequest> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupDialableCallerIDCriteriaModifyRequest

Modify a Dialable Caller ID Criteria.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupDialableCallerIDGetRequest

Get the Group&#146;s Dialable Caller ID settings and criteria list.
 The
response is either a C<GroupDialableCallerIDGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDialableCallerIDModifyRequest

Modify the group&#146;s Dialable Caller ID settings and criteria list.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupAddRequest

Add a group.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item defaultDomain

=item userLimit

=back

Additionally there are generic tagged parameters.

=head3 GroupAdminAddRequest

Add a group administrator.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupAdminDeleteRequest

Delete a group administrator.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupAdminGetListRequest

Get a list of group and department administrators within the group.
 The
response is either a C<GroupAdminGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupAdminGetRequest

Get a group administrators profile.
 The response is either a
C<GroupAdminGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupAdminGetPolicyRequest17sp3

Requests the Group administrator's policy settings.
 The response is either
C<GroupAdminGetPolicyResponse17sp3> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupAdminModifyRequest

Modify a group administrator.
 Since old password is not specified here, any
password rule related to old password
 does not apply.        
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupAdminModifyPolicyRequest

Request to modify the group administrator's policy settings.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.
 The following elements are only
used in AS data mode:
 C<dialableCallerIDAccess>

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerAddRequest

Add the C<BroadWorks> Mobile Manager.
 Only one C<BroadWorks> Mobile Manager
can be added per group.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item informationFile

=item certificateFile

=item isActive

=item localToCarrier

=item maxTxPerSecondEnabled

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerGetRequest

Get the C<BroadWorks> Mobile Manager.
 The response is either
C<GroupBroadWorksMobileManagerGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerGetDomainListRequest

Get the list of domains of the C<BroadWorks> Mobile Manager.
 The response is
either C<GroupBroadWorksMobileManagerGetDomainListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerDeleteRequest

Delete the C<BroadWorks> Mobile Manager.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerModifyRequest

Modify the C<BroadWorks> Mobile Manager settings.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerActivationRequest

Activates or Deactivates the C<BroadWorks> Mobile Manager.
 The
C<deactivationReason> is required when C<isActive> is set to false. 
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item isActive

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerSendCarrierFilesRequest

Sends an email with the carrier information and certificate files.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item emailTo

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerAddHomeZoneRequest

Add a home zone to the C<BroadWorks> Mobile Manager.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item homeZoneDomainName

=item mobileCountryCode

=item mobileNetworkCode

=item locationAreaCode

=item cellIdentity

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerGetHomeZoneListRequest

Get the list of home zones of the C<BroadWorks> Mobile Manager.
 The response
is either C<GroupBroadWorksMobileManagerGetHomeZoneListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerGetHomeZoneRequest

Get a home zone from the C<BroadWorks> Mobile Manager.
 The response is either
C<GroupBroadWorksMobileManagerGetHomeZoneResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item homeZoneId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerDeleteHomeZoneRequest

Delete a home zone from the C<BroadWorks> Mobile Manager.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item homeZoneId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerDeleteHomeZoneListRequest

Delete a list of home zones from the C<BroadWorks> Mobile Manager.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item homeZoneId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobileManagerModifyHomeZoneRequest

Modify an existing home zone in the C<BroadWorks> Mobile Manager.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item homeZoneId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallProcessingGetPolicyRequest17sp4

Request the group level data associated with Call Processing Policy.
 The
response is either a C<GroupCallProcessingGetPolicyResponse17sp4> or an
C<ErrorResponse>.
 The C<useGroupCLIDSetting> attribute controls the CLID
settings 
 (C<clidPolicy>, C<emergencyClidPolicy>,
C<allowAlternateNumbersForRedirectingIdentity>, C<useGroupName>,
C<allowConfigurableCLIDForRedirectingIdentity>)
 The C<useGroupMediaSetting>
attribute controls the Media settings 
 (C<medisPolicySelection>,
C<supportedMediaSetName>)
 The C<useGroupCallLimitsSetting> attribute controls
the Call Limits settings 
 (C<useMaxSimultaneousCalls>,
C<maxSimultaneousCalls>, 
 C<useMaxSimultaneousVideoCalls>,
C<maxSimultaneousVideoCalls>, C<useMaxCallTimeForAnsweredCalls>,
C<maxCallTimeForAnsweredCallsMinutes>, C<useMaxCallTimeForUnansweredCalls>,
C<maxCallTimeForUnansweredCallsMinutes>, C<useMaxConcurrentRedirectedCalls>,
C<useMaxFindMeFollowMeDepth>, C<maxRedirectionDepth>,
C<useMaxConcurrentFindMeFollowMeInvocations>,
C<maxConcurrentFindMeFollowMeInvocations>)
 The
C<useGroupTranslationRoutingSetting> attribute controls the routing and
translation settings 
 (C<networkUsageSelection>,
C<enforceGroupCallingLineIdentityRestriction>, 
C<allowEnterpriseGroupCallTypingForPrivateDialingPlan>,
C<allowEnterpriseGroupCallTypingForPublicDialingPlan>,
C<overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan>,
C<enableEnterpriseExtensionDialing>)
 The C<useGroupDCLIDSetting> controls the
Dialable Caller ID settings (C<enableDialableCallerID>)
 The following elements
are only used in AS data mode:
 C<useGroupDCLIDSetting>
C<enableDialableCallerID>

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallProcessingModifyPolicyRequest15sp2

Modify the group level data associated with Call Procesing Policy.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.
 The
C<useGroupCLIDSetting> attribute controls the CLID settings 
 (C<clidPolicy>,
C<emergencyClidPolicy>, C<allowAlternateNumbersForRedirectingIdentity>,
C<useGroupName>, C<allowConfigurableCLIDForRedirectingIdentity>)
 The
C<useGroupMediaSetting> attribute controls the Media settings 
(C<medisPolicySelection>, C<supportedMediaSetName>)
 The
C<useGroupCallLimitsSetting> attribute controls the Call Limits settings 
(C<useMaxSimultaneousCalls>, C<maxSimultaneousCalls>,
C<useMaxSimultaneousVideoCalls>, C<maxSimultaneousVideoCalls>,
C<useMaxCallTimeForAnsweredCalls>, C<maxCallTimeForAnsweredCallsMinutes>,
C<useMaxCallTimeForUnansweredCalls>, C<maxCallTimeForUnansweredCallsMinutes>,
C<useMaxConcurrentRedirectedCalls>, C<useMaxFindMeFollowMeDepth>,
C<maxRedirectionDepth>, C<useMaxConcurrentFindMeFollowMeInvocations>,
C<maxConcurrentFindMeFollowMeInvocations>)
 The
C<useGroupTranslationRoutingSetting> attribute controls the routing and
translation settings (C<networkUsageSelection>,
C<enforceGroupCallingLineIdentityRestriction>, 
C<allowEnterpriseGroupCallTypingForPrivateDialingPlan>,
C<allowEnterpriseGroupCallTypingForPublicDialingPlan>,
C<overrideCLIDRestrictionForExternalCallsViaPrivateDialingPlan>,
C<enableEnterpriseExtensionDialing>)
 The C<useGroupDCLIDSetting> controls the
Dialable Caller ID settings (C<enableDialableCallerID>)
 The following elements
are only used in AS data mode:
 C<useGroupDCLIDSetting>
C<enableDialableCallerID>
 C<allowConfigurableCLIDForRedirectingIdentity>

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCommonPhoneListAddListRequest

Add one or more entries to a group's common phone list.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item entry

=back

Additionally there are generic tagged parameters.

=head3 GroupCommonPhoneListDeleteListRequest

Delete one or more entries from a group's common phone list.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item entryName

=back

Additionally there are generic tagged parameters.

=head3 GroupCommonPhoneListGetListRequest

Get a group's common phone list.
 The response is either a
C<GroupCommonPhoneListGetListResponse> or an C<ErrorResponse>.
 The search can
be done using multiple criterion.
 If the C<searchCriteriaModeOr> is present,
any result matching any one criteria is included in the results. 
 Otherwise,
only results matching all the search criterion are included in the results. 
If no search criteria is specified, all results are returned.
 Specifying
C<searchCriteriaModeOr> without any search criteria results in an
C<ErrorResponse>.
 In all cases, if a C<responseSizeLimit> is specified and the
number of matching results is more than this limit, then an
 C<ErrorResponse>
is returned.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCommonPhoneListModifyRequest

Modify an entry in a group's common phone list.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item entryName

=back

Additionally there are generic tagged parameters.

=head3 GroupCommunicationBarringAuthorizationCodeAddListRequest

Add a list of Communication Barring Authorization codes to a group.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCommunicationBarringAuthorizationCodeDeleteListRequest

Delete a list of Communication Barring Authorization codes from a group.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCommunicationBarringAuthorizationCodeGetListRequest

Get a list of Communication Barring Authorization Codes for a group.
 The
response is either a
C<GroupCommunicationBarringAuthorizationCodeGetListResponse> 
 or an
C<ErorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCommunicationBarringGetRequest

Gets Communication Barring setting for a group.  
 The response is either a
C<GroupCommunicationBarringGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCommunicationBarringModifyRequest

Gets Communication Barring setting for a group.  
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCPEConfigRebuildConfigFileRequest

Rebuild the group default config file for the specified device type.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 GroupCPEConfigRebuildDeviceConfigFileRequest

Rebuild the config file for a specified device.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupCPEConfigReorderDeviceLinePortsRequest

Reorder the lines of a group device. You can not add or delete line ports, only
 re-ordering the list is allowed. The ordered list of line ports can be
obtained
 with the C<GroupAccessDeviceGetRequest14sp6> command.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupCPEConfigResetDeviceRequest

Reset a specific group device.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupCPEConfigResetDeviceTypeRequest

Reset all the devices of the specified device type in a group.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 GroupCPEConfigSetConfigFileRequest

Request to set a new group default configuration file for a device type.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceType

=item configFile

=back

Additionally there are generic tagged parameters.

=head3 GroupCustomContactDirectoryAddRequest17

Adds a Custom Contact Directory to a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCustomContactDirectoryDeleteRequest

Deletes a Custom Contact Directory to a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCustomContactDirectoryGetAvailableUserListRequest17

Get a list of users that can be part of a custom contact directory.
 The
response is either C<GroupCustomContactDirectoryGetAvailableUserListResponse17>
or  C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCustomContactDirectoryGetListRequest

Gets the list of Custom Contact Directories for a group.
 The response is
either C<GroupCustomContactDirectoryGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCustomContactDirectoryGetRequest17

Gets a Custom Contact Directory in a group.
 The response is either
C<GroupCustomContactDirectoryGetResponse17> or 
 C<ErrorResponse>.
 The search
can be done using multiple criterion.
 If the C<searchCriteriaModeOr> is
present, any result matching any one criteria is included in the results. 
Otherwise, only results matching all the search criterion are included in the
results. 
 If no search criteria is specified, all results are returned.
Specifying C<searchCriteriaModeOr> without any search criteria results in an
C<ErrorResponse>.
 In all cases, if a C<responseSizeLimit> is specified and the
number of matching results is more than this limit, then an
 C<ErrorResponse>
is returned.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCustomContactDirectoryModifyRequest17

Adds a Custom Contact Directory to a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupDeleteRequest

Delete a group.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDepartmentAddRequest

Add a department to a group.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item departmentName

=back

Additionally there are generic tagged parameters.

=head3 GroupDepartmentAdminAddRequest

Add a department administrator to a group department.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item departmentKey

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupDepartmentAdminDeleteRequest

Delete a group department administrator.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupDepartmentAdminGetListRequest

Get a list of department administrators for the department.
 The response is
either a C<GroupDepartmentAdminGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item departmentKey

=back

Additionally there are generic tagged parameters.

=head3 GroupDepartmentAdminGetRequest

Get a group department administrators profile.
 The response is either a
C<GroupDepartmentAdminGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupDepartmentAdminModifyRequest

Modify a group department administrator.
 Since old password is not specified
here, any password rule related to old password
 does not apply.        
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupDepartmentDeleteRequest

Delete a department from a group.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item departmentName

=back

Additionally there are generic tagged parameters.

=head3 GroupDepartmentGetAvailableParentListRequest

Get a list of departments that could be the parent department of the specified
department. The department itself and all its descendents are not eligible to
be
 the parent department. If the group belongs to an enterprise, it also
returns the
 departments defined in the enterprise it belongs to.
 The response
is either C<GroupDepartmentGetAvailableParentListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item departmentName

=back

Additionally there are generic tagged parameters.

=head3 GroupDepartmentGetListRequest

Request a list of departments in a group. You may request only the
 list of
departments defined at the group-level, or you may request
 the list of all
departments in the group including all the departments
 defined within the
enterprise the group belongs to.
 The response is either
C<GroupDepartmentGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item includeEnterpriseDepartments

=back

Additionally there are generic tagged parameters.

=head3 GroupDepartmentModifyRequest

Modify a department of a group.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item departmentName

=back

Additionally there are generic tagged parameters.

=head3 GroupDeviceTypeCustomTagAddRequest

Request to add a static configuration tag for an access device type used in a
group.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceType

=item tagName

=back

Additionally there are generic tagged parameters.

=head3 GroupDeviceTypeCustomTagDeleteListRequest

Request to delete static configuration tags for an access device type used in a
group.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 GroupDeviceTypeCustomTagModifyRequest

Request to modify a static configuration tag for an access device type used in
a group.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceType

=item tagName

=back

Additionally there are generic tagged parameters.

=head3 GroupDeviceTypeCustomTagGetListRequest

Request to get the list of custom configuration tags managed by the Device
Management System, on a per-device type basis for a group.
 The response is
either C<GroupDeviceTypeCustomTagGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 GroupDeviceTypeFileModifyRequest14sp8

Request to modify a specified device type file for a group.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceType

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 GroupDeviceTypeFileGetListRequest14sp8

Request to get the list of device type files managed by the Device Management
System, on a per-group basis.
 The response is either
C<GroupDeviceTypeFileGetListResponse14sp8> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 GroupDeviceTypeFileGetRequest16sp1

Request to get a group device type file.
 The response is either
C<GroupDeviceTypeFileGetResponse16sp1> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item deviceType

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 GroupDialPlanPolicyGetRequest17

Request the Group level data associated with Dial Plan Policy.
 The response is
either a C<GroupDialPlanPolicyGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDialPlanPolicyModifyRequest

Modify the Group level data associated with Dial Plan Policy.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDialPlanPolicyGetAccessCodeListRequest

Request the Group level data associated with Dial Plan Policy.
 The response is
either a C<GroupDialPlanPolicyGetAccessCodeListResponse>
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDialPlanPolicyGetAccessCodeRequest

Request access code data associated with Group level Dial Plan Policy access
codes.
 The response is either a C<GroupDialPlanPolicyGetAccessCodeResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item accessCode

=back

Additionally there are generic tagged parameters.

=head3 GroupDialPlanPolicyAddAccessCodeRequest

Request to add a Group level Dial Plan Access Code and its all attribues.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item accessCode

=item includeCodeForNetworkTranslationsAndRouting

=item includeCodeForScreeningServices

=item enableSecondaryDialTone

=back

Additionally there are generic tagged parameters.

=head3 GroupDialPlanPolicyDeleteAccessCodeRequest

Request to delete a Group level Dial Plan Access Code and its all attribues.
The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item accessCode

=back

Additionally there are generic tagged parameters.

=head3 GroupDialPlanPolicyModifyAccessCodeRequest

Request to modify a Group level Dial Plan Access Code and its attribues.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item accessCode

=back

Additionally there are generic tagged parameters.

=head3 GroupDigitCollectionGetRequest13mp4

Request the group's digit collection attributes.
 The response is either a
C<GroupDigitCollectionGetResponse13mp4> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDigitCollectionModifyRequest

Modifies the group's digit collection attributes.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDnActivateListRequest

Activate a list of assigned DNs on a group. It is possible to activate either:
a single DN,
 or a list of DNs, or a range of DNs, or any combination thereof.
The DNs must have previously been assigned to a user or virtual service.
 It is
not an error to activate an already activated DN
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDnAssignListRequest

Assign a list of service provider DNs to a group. It is possible to assign
either: a single DN,
 or a list of DNs, or a range of DNs, or any combination
thereof.
 The DNs must have previously been added to the service provider or
enterprise.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDnDeactivateListRequest

Deactivate a list of activated DNs on a group. The DNs then become available
for
 activation again. It is possible to deactivate either: a single DN,
 or a
list of DNs, or a range of DNs, or any combination thereof.
 It is not an error
to deactivate an already deactivated DN.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDnGetActivationListRequest

Get the list of activated and deactivated DNs in a group. Ranges of DNs with
identical assignment and activation properties are coalesced to a single table
row entry.  Only DNs assigned to a users are listed in the response.
 The
response is either a C<GroupDnGetActivationListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDnGetAssignmentListRequest

Get the list of assigned and unassigned DNs in a group. Each DN can be assigned
   to a user and/or department. Ranges of DNs with identical assignment and
activation properties
   are coalesced to a single table row entry.
   The
response is either a C<GroupDnGetAssignmentListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDnGetDetailedAvailableListRequest

Get the list of DNs that are assigned to a group and still available for
assignment to users within the group with the department name, if the DN
 is
assigned to the department.
 The response is either a
C<GroupDnGetDetailedAvailableListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDnGetAvailableListRequest

Get the list of DNs that are assigned to a group and still available for
assignment to users or service instances within the group.
 The response is
either a C<GroupDnGetAvailableListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDnGetListRequest

Get the list of DNs that are assigned to a group.
 The response is either a
C<GroupDnGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDnGetSummaryListRequest

Get the list of assigned and unassigned DN ranges in a group.
 The response is
either a C<GroupDnGetSummaryListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDnListAssignDepartmentRequest

Assign a list of group DNs to a department. If the department is not specified,
this
 will make the DNs become unassigned from any department.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDnUnassignListRequest

Unassign a list of service provider DNs from a group. The DNs then become
available for
 assignment to other groups. It is possible to unassign either: a
single DN,
 or a list of DNs, or a range of DNs, or any combination thereof.
The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDomainAssignListRequest

Assign a list of domains to a group.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item domain

=back

Additionally there are generic tagged parameters.

=head3 GroupDomainGetAssignedUserListRequest

Request a list of users within in a group that have a given domain assigned.
The response is either C<GroupDomainGetAssignedUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item domain

=back

Additionally there are generic tagged parameters.

=head3 GroupDomainGetAssignedListRequest

Requests the list of all domains assigned to a group.
 The response is either
C<GroupDomainGetAssignedListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupDomainUnassignListRequest

Unassign a list of domains from a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item domain

=back

Additionally there are generic tagged parameters.

=head3 GroupEndpointGetListRequest

Request to search endpoints in the group.
 The response is either
C<GroupEndpointGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupExistingUsersAssignUserServiceListRequest

Request to assign the user services and service packs to all existing users
within the group.
 C<BroadSoft> recommends using this command only for small
groups with less than 100 users.  This 
 command will return an error if the
group has over 500 users.  The recommended way to bulk 
 assign/unassign
services is Service Pack Migration.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupExistingUsersUnassignUserServiceListRequest

Requests to unassign the user services and service packs for all existing users
within the group.
 C<BroadSoft> recommends using this command only for small
groups with less than 100 users.  This 
 command will return an error if the
group has over 500 users.  The recommended way to bulk 
 assign/unassign
services is Service Pack Migration.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupExtensionLengthGetRequest17

Request the group's extension length.
 The response is either a
C<GroupExtensionLengthGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupExtensionLengthModifyRequest17

Modify the group's extension length range.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupFeatureAccessCodeGetRequest

Get group FAC code level and the list of feature access codes for a group.
 The
response is either a C<GroupFeatureAccessCodeGetResponse> or an
C<ErrorResponse>.
 Returned Feature Access Codes may be group specific, or
Service Provider Feature Access Codes, depending on FAC code level.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupFeatureAccessCodeModifyRequest

Modify group FAC code level and the list of feature access codes for a group.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.
 Note:
choice element is only valid when C<useFeatureAccessCodeLevel> is set to
"Group", otherwise an C<ErrorResponse> will be returned.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupFileRepositoryDeviceUserAddRequest

Add a new group file repository user.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item fileRepositoryName

=item userName

=item password

=item allowPut

=item allowDelete

=item allowGet

=back

Additionally there are generic tagged parameters.

=head3 GroupFileRepositoryDeviceUserDeleteRequest

Delete a group file repository user.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item fileRepositoryName

=item userName

=back

Additionally there are generic tagged parameters.

=head3 GroupFileRepositoryDeviceUserModifyRequest

Modify a group file repository user.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item fileRepositoryName

=item userName

=back

Additionally there are generic tagged parameters.

=head3 GroupFileRepositoryDeviceUserGetListRequest

Request the list of group users for a file repository in the system.
 The
response is either a C<GroupFileRepositoryDeviceUserGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item fileRepositoryName

=back

Additionally there are generic tagged parameters.

=head3 GroupGetDefaultRequest

Request the default profile for a group.
 The response is either a
C<GroupGetDefaultResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 GroupGetListInServiceProviderRequest

Request the list of groups in a service provider or enterprise.
 It is possible
to search by various criteria to restrict the number of rows returned.
Multiple search criteria are logically C<ANDed> together.
 The response is
either a C<GroupGetListInServiceProviderResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 GroupGetListInSystemRequest

Request the list of groups in the system.
 It is possible to search by various
criteria to restrict the number of rows returned.
 Multiple search criteria are
logically C<ANDed> together.
 The response is either a
C<GroupGetListInSystemResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupGetRequest14sp7

Get the profile for a group.
 The response is either a C<GroupGetResponse14sp7>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupGetUserServiceAssignedUserListRequest

Get the list of users assigned the user service or service pack.
 The response
is either a C<GroupGetUserServiceAssignedUserListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupModifyRequest

Modify the profile for a group.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupNetworkClassOfServiceAssignListRequest

Assign a list of Network Classes of Service to a group.
 The Element
C<defaultNetworkClassOfService> is required only for the first     
assignment, for subsequent assignments it is optional.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupNetworkClassOfServiceAssignToAllUsersRequest

Assign a Network Classes of Service to all users with in a 
 group. The Network
Classes of Service must be currently assigned to 
 the group. The response is
either a C<SuccessResponse> or
 an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item networkClassOfService

=back

Additionally there are generic tagged parameters.

=head3 GroupNetworkClassOfServiceGetAssignedListRequest

Get a list of Network Classes of Service assigned to a group.
 The response is
either a C<GroupNetworkClassOfServiceGetAssignedListResponse> 
 or an
C<ErorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupNetworkClassOfServiceGetAssignedUserListRequest

Get a list of users within a group that have a given Network Class
 of Service
assigned.
 The response is either a
C<GroupNetworkClassOfServiceGetAssignedUserListResponse> 
 or an
C<ErorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item networkClassOfService

=back

Additionally there are generic tagged parameters.

=head3 GroupNetworkClassOfServiceModifyDefaultRequest

Modifies the default Network Classes of Service of a group.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item networkClassOfService

=back

Additionally there are generic tagged parameters.

=head3 GroupNetworkClassOfServiceUnassignListRequest

Unassign a list of Network Classes of Service from a group.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupNewUserTemplateAssignUserServiceListRequest

Request to assign the user services and service packs to all new users created
within the group
 after the completion of this request.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupNewUserTemplateUnassignUserServiceListRequest

Requests to unassign the user services and service packs for all new users
created within the group
 after the completion of this request.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOfficeZoneAssignListRequest

Assign a list of Office Zones to a group.
 The Element C<defaultOfficeZone> is
required only for the first assignment, for subsequent assignments it is
optional.
 Office Zones can only be assigned if the Location-Based Calling
Restrictions has been authorized to the group otherwise the request will fail.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOfficeZoneGetAssignedListRequest

Get a list of Office Zones assigned to a group.
 The response is either a
C<GroupOfficeZoneGetAssignedListResponse> 
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOfficeZoneGetAssignedUserListRequest

Get a list of users within a group that have a given Office Zone assigned.
 The
response is either a C<GroupOfficeZoneGetAssignedUserListResponse> 
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item officeZoneName

=back

Additionally there are generic tagged parameters.

=head3 GroupOfficeZoneUnassignListRequest

Unassign a list of C<OfficeZones> from a group.  Note: a new default must be
provided if unassigning the current default.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupPasswordRulesGetRequest16

Requests the group's password rules setting that is applicable to
 users within
the group.
 The response is either C<GroupPasswordRulesGetResponse16> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupPasswordRulesModifyRequest

Request to modify the group's password rules setting that apply to the
 users
within the group. The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupPhoneDirectoryGetListRequest17

Request a table containing the phone directory for a group.
 If the specified
group is part of an enterprise, the directory 
 includes all users in the
enterprise and all entries in the enterprise 
 common phone list and the common
phone list of the specified group.
 If the specified group is part of a service
provider, the directory 
 includes all users in the group and all entries in
the common phone 
 list of the specified group.
 It is possible to search by
various criteria to restrict the number of 
 rows returned.
 Multiple search
criteria are logically C<ANDed> together.
 The response is either
C<GroupPhoneDirectoryGetListResponse17> or 
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item isExtendedInfoRequested

=back

Additionally there are generic tagged parameters.

=head3 GroupPolicyGetRequest17

Requests the Group's policy settings.
 The response is either
C<GroupPolicyGetResponse17> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupPolicyModifyRequest

Request to modify the policies for a Group.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceGetAuthorizationListRequest

Requests the group's service authorization status.
 The response is either
C<GroupServiceGetAuthorizationListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceGetAuthorizedListRequest

Requests the list of services and service packs authorized to a group.
 The
response is either C<GroupServiceGetAuthorizedListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceModifyAuthorizationListRequest

Requests to change the group's service authorization status.
 The boolean flags
are used to authorize or unauthorize services and packs.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupPortalPasscodeRulesGetRequest

Requests the group's passcode rules setting.
 The response is either
C<GroupPortalPasscodeRulesGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupPortalPasscodeRulesModifyRequest

Request to modify the group's passcode rules setting.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointExternalSystemAssignListRequest

Assign a list of route point external systems to a group.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointExternalSystemGetAssignedListRequest

Requests the list of all Route Point External Systems assigned to a group.
 The
response is either C<GroupRoutePointExternalSystemGetAssignedListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointExternalSystemGetAssignedRoutePointListRequest

Request a list of route points within in a group that have a given external
system assigned.
 The response is either
C<GroupRoutePointExternalSystemGetAssignedRoutePointListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item externalSystem

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointExternalSystemUnassignListRequest

Unassign a list of route point external systems from a group.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutingProfileGetRequest

Request the routing profile for the group.
 The response is either a
C<GroupRoutingProfileGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutingProfileModifyRequest

Requests to modify the routing profile for a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupScheduleAddEventRequest

Add an event to group schedule. 
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item scheduleKey

=item eventName

=item startDate

=item endDate

=back

Additionally there are generic tagged parameters.

=head3 GroupScheduleAddRequest

Add a group schedule.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item scheduleName

=item scheduleType

=back

Additionally there are generic tagged parameters.

=head3 GroupScheduleDeleteEventListRequest

Delete a list of events from a group schedule.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 GroupScheduleDeleteListRequest

Delete a list of group schedule.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 GroupScheduleGetEventListRequest

Get the list of events of a group schedule.
 The response is either a
C<GroupScheduleGetEventListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 GroupScheduleGetEventRequest

Get an event from a group schedule.
 The response is either a
C<GroupScheduleGetEventResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 GroupScheduleGetListRequest17sp1

Get the list of schedules viewable by a group. The list can be filtered by
schedule type.
 The response is either a C<GroupScheduleGetListResponse17sp1>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupScheduleModifyEventRequest

Modify an event of a group schedule.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 GroupScheduleModifyRequest

Modify a group schedule.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceAssignListRequest

Assign one or more group services to the group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceIsAssignedRequest

Request to determine if a C<GroupService> is assigned to the group.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceUnassignListRequest

Unassign one or more of the group's assigned services.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceName

=back

Additionally there are generic tagged parameters.

=head3 GroupSessionAdmissionControlGetAvailableDeviceListRequest

Request to get the list of devices can be assigned to session admission control
group for the group.
 The response is either an
C<GroupSessionAdmissionControlGetAvailableDeviceListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupSessionAdmissionControlGetRequest

Get the session admission control capacity for the group.
 The response is
either a C<GroupSessionAdmissionControlGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupSessionAdmissionControlModifyRequest

Request to modify session admission control capacity for the group.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupSessionAdmissionControlGroupAddDeviceListRequest

Request to add one ore more devices to a group level session admission control
group.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupSessionAdmissionControlGroupAddRequest

Request to add a session admission control group for the group.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=item maxSession

=back

Additionally there are generic tagged parameters.

=head3 GroupSessionAdmissionControlGroupDeleteDeviceListRequest

Request to delete one or more devices from a group level session admission
control group.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupSessionAdmissionControlGroupDeleteListRequest

Request to delete one or more session admission control groups for the group.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupSessionAdmissionControlGroupGetListRequest

Request to get the list of session admission control group for the group.
 The
response is either a C<GroupSessionAdmissionControlGroupGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupSessionAdmissionControlGroupGetRequest

Request to get a session admission control group for the group.
 The response
is either a C<GroupSessionAdmissionControlGroupGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupSessionAdmissionControlGroupModifyRequest

Request to modify a session admission control group for the group.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupShInterfaceGetUserListRequest

Returns a list of all Public User Identities and associated data in a group.
The response is either a C<GroupShInterfaceGetUserListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupGetAvailableDetailListRequest

Requests the list of available trunk groups within a group.
 The response is
either C<GroupTrunkGroupGetAvailableDetailListResponse> or
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 AuthenticationRequest

C<AuthenticationRequest> is 1st stage of the 2 stage OCI login process.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 AuthenticationVerifyRequest14sp8

C<AuthenticationVerifyRequest14sp8> is used to authenticate a user either by
userId/password or dn/passcode. 
 The phone number may be any DN associated
with a user.
 The response is a C<AuthenticationVerifyResponse14sp8> or an
C<ErrorResponse>

Additionally there are generic tagged parameters.

=head3 AvailabilityTestRequest

C<AvailabilityTestRequest> is for high-availability support. Response is either
C<SuccessResponse>
 or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 DeviceManagementFileAuthLocationGetRequest17

Get the address and credentials of the File Repository hosting the requested
access device file. 
 Also get the file name and path on the File Repository. 
The response is either a C<DeviceManagementFileAuthLocationGetResponse17> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceAccessProtocol

=item deviceAccessMethod

=item deviceAccessURI

=back

Additionally there are generic tagged parameters.

=head3 DeviceManagementPutFileRequest

Informs C<BroadWorks> that a file was uploaded to the repository. The response
is always a C<SuccessResponse>.

Fixed parameters are:-

=over 4

=item deviceAccessURI

=item ipAddress

=back

Additionally there are generic tagged parameters.

=head3 ExternalAuthenticationAuthorizeTokenRequest

This command is part of the Portal API.
 Sent when a Web or CLI user logs in
using external authentication.
 The password must be hashed. The password
hashing algorithm is:
 1) The message digest of the user's plain password is
calculated using the SHA algorithm.
 2) For every four bits in the 160-bit
digest, starting from the first bit, it is
 converted into a character in ASCII
Hex format (0 through 9, a through f).
 The result is a 40-character string,
for example, f7a9e24777ec23212c54d7a350bc5bea5477fdbb.
 3) The above string
then is used to populate the password field in the request.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 LoginRequest14sp4

C<LoginRequest14sp4> is 2nd stage of the 2 stage OCI login process.
 The
C<signedPassword> is not required for external authentication login from a
trusted host (ACL).

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 LogoutRequest

C<LogoutRequest> is sent when an OCI user logs out or when connection is lost.
This command can be sent either to the server, or to the client from OCS.
Response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 PasswordModifyRequest

Modify the password for a user/administrator.
 When C<oldPassword> is
specified, password rule applies. If C<oldPassword> in not specified,
 any
password rule related to old password does not apply.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 PrimaryInfoGetRequest

Requests information about the primary server for high-availability support.

Fixed parameters are:-

=over 4

=item isPrivate

=item isAddressInfoRequested

=back

Additionally there are generic tagged parameters.

=head3 PublicClusterGetFullyQualifiedDomainNameRequest

Get the public cluster fully qualified domain name (FQDN).
 The response is
either a C<PublicClusterGetFullyQualifiedDomainNameResponse>
 or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 TutorialFlagGetRequest

Get the tutorial flag setting for a user or admin.
 The response is either a
C<TutorialFlagGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 TutorialFlagModifyRequest

Modify the tutorial flag setting for a user or admin.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserGetLoginInfoRequest

C<UserGetLoginInfoRequest> is used to access login information for a user
either by a userId or dn.  The phone number may be any
 DN associated with a
user.
 The response is a C<UserGetLoginInfoResponse> or an C<ErrorResponse>

Additionally there are generic tagged parameters.

=head3 VerifySessionIsValidRequest

Query the provisioning server to verify the session is authorized. Most
applications should not need this command, because the provisioning server
verifies the session is authorized for all commands.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceAddRequest14

Request to add a service provider access device.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceCustomTagAddRequest

Request to add a static configuration tag for a service provider access device.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=item tagName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceCustomTagDeleteListRequest

Request to delete static configuration tags for a service provider access
device.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceCustomTagGetListRequest

Request to get the list of custom configuration tags managed by the Device
Management System, on a per-device profile basis.
 The response is either
C<ServiceProviderAccessDeviceCustomTagGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceCustomTagModifyRequest

Request to modify a static configuration tag for a service provider access
device.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=item tagName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceDeleteRequest

Request to delete a specified service provider access device.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceFileModifyRequest14sp8

Request to modify a specified service provider/enterprise access device file.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceFileGetListRequest14sp8

Request to get the list of device files managed by the Device Management
System, on a per-device profile basis.
 The response is either
C<ServiceProviderAccessDeviceFileGetListResponse14sp8> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceFileGetRequest16sp1

Request to get a service provider device profile file.
 The response is either
C<ServiceProviderAccessDeviceFileGetResponse16sp1> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceGetListRequest

Requests the list of access devices in a service provider.
 The response is
either C<ServiceProviderAccessDeviceGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceGetRequest16

Requests the configuration of a specified service provider access device.
 The
response is either C<ServiceProviderAccessDeviceGetResponse16> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceGetUserListRequest

Requests the list of users on a specified device.
 The response is either
C<ServiceProviderAccessDeviceGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceModifyRequest14

Request to modify a specified service provider access device.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceModifyUserRequest

Request to modify attributes for line/ports assigned on the service provider
device profile.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=item linePort

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAccessDeviceResetRequest

Reset a specific service provider SIP device that supports the reset operation.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAddRequest13mp2

Add a service provider or enterprise.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item defaultDomain

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAdminAddRequest14

Add a service provider administrator.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item userId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAdminDeleteRequest

Delete a service provider administrator.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAdminGetListRequest14

Get a list of service provider administrators.
 The response is either a
C<ServiceProviderAdminGetListResponse14> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAdminGetPolicyRequest17sp3

Requests the service provider administrator's policy settings.
 The response is
either C<ServiceProviderAdminGetPolicyResponse17sp3> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAdminGetRequest14

Get a service provider administrators profile.
 The response is either a
C<ServiceProviderAdminGetResponse14> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAdminModifyPolicyRequest14

Request to modify the service provider administrator's policy settings.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.
 The
C<networkPolicyAccess> is only modified for the enterprise administrator.
 The
following elements are only used in AS data mode:
 C<dialableCallerIDAccess>
The following elements are only used in HSS data mode:
C<communicationBarringAccess>

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAdminModifyRequest

Modify a service provider administrator.
 Since old password is not specified
here, any password rule related to old password
 does not apply.        
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAnswerConfirmationGetRequest16

Get a service provider or enterprise's answer confirmation settings.
 The
response is either a C<ServiceProviderAnswerConfirmationGetResponse16> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderAnswerConfirmationModifyRequest16

Modify a service provider or enterprise's answer confirmation settings.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCallProcessingGetPolicyRequest17sp4

Request the service provider level data associated with Call Processing
Policy. The response is either a
C<ServiceProviderCallProcessingGetPolicyResponse17sp4> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCallProcessingModifyPolicyRequest15

Modify the service provider level data associated with Call Procesing
 Policy.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.
 The
following elements are only used in AS data mode:
C<useServiceProviderDCLIDSetting>
 C<enableDialableCallerID>
C<allowConfigurableCLIDForRedirectingIdentity>

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringCriteriaAssignListRequest

Assign a list of Communication Barring Criteria to a service provider.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringCriteriaGetAssignedListRequest

Get a list of Communication Barring Criteria assigned to a service provider.
The response is either a
C<ServiceProviderCommunicationBarringCriteriaGetAssignedListResponse> 
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringCriteriaUnassignListRequest

Unassign a list of Communication Barring Criteria from a service provider.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringDigitPatternCriteriaAddRequest

Add a new Communication Barring Digit Pattern Criteria.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringDigitPatternCriteriaDeleteRequest

Delete an existing Communication Barring Digit Pattern Criteria.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringDigitPatternCriteriaGetListRequest

Get the list of all Digit Pattern Criteria defined for the service provider.
The response is either a
C<ServiceProviderCommunicationBarringDigitPatternCriteriaGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringDigitPatternCriteriaGetPatternListRequest

Get an existing Digit Pattern Criteria.
 The response is either a
C<ServiceProviderCommunicationBarringDigitPatternCriteriaGetPatternListResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringDigitPatternCriteriaGetRequest

Get an existing Digit Pattern Criteria.
 The response is either a
C<ServiceProviderCommunicationBarringDigitPatternCriteriaGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringDigitPatternCriteriaModifyRequest

Modify an existing Communication Barring Digit Pattern Criteria.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringProfileAddRequest17sp3

Add a new Communication Barring Profile.
 The priorities for
C<OriginatingRules>, C<RedirectingRules>, C<CallMeNowRules> and
C<IncomingRules> are requantized to consecutive integers as part of the add.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.
 The
following elements are only used in AS data mode:
 C<callMeNowDefaultAction>,
use value "Block" in HSS data mode
 C<callMeNowDefaultCallTimeout>
C<callMeNowRule>

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringProfileDeleteRequest

Deletes an existing Communication Barring Profile.  Optionally, a new default
profile can be chosen if the current default profile is being deleted.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringProfileGetAssignedGroupListRequest

Get a list of groups within a service provider that have a given
 Communication
Barring Profile assigned.
 The response is either a
C<ServiceProviderCommunicationBarringProfileGetAssignedGroupListResponse> 
 or
an C<ErorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item profile

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringProfileGetCriteriaUsageListRequest

Get a list of Communication Barring profiles within a service provider that
have a given Communication Barring Criteria assigned.
 The response is either a
C<ServiceProviderCommunicationBarringProfileGetCriteriaUsageListResponse> 
 or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest

Get the list of Profiles that use a specific Digit Pattern Criteria.
 The
response is either a
C<ServiceProviderCommunicationBarringProfileGetDigitPatternCriteriaUsageListResponse>
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringProfileGetListRequest

Get the list of all Communication Barring Profiles.
 The response is either a 
C<ServiceProviderCommunicationBarringProfileGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringProfileGetRequest17sp3

Get an existing Communication Barring Profile.
 The response is either a
C<ServiceProviderCommunicationBarringProfileGetResponse17sp3>
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringProfileModifyDefaultRequest

Modifies the default Communication Barring Profile of a Service Provider.  If a
default has been previously selected, this command will swap the default
profile with the profile provided.  Selecting a nil profile will cause the
service provider to not have a default Communicaton Barring Profile.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCommunicationBarringProfileModifyRequest

Modify an existing Communication Barring Profile.
 The priorities for
C<OriginatingRules>, C<RedirectingRules>, C<CallMeNowRules> and
C<IncomingRules> are requantized to consecutive integers as part of the modify.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.
 The
following elements are only used in AS data mode:
 C<callMeNowDefaultAction>
C<callMeNowDefaultCallTimeout>
 C<callMeNowRule>

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCPEConfigRebuildDeviceConfigFileRequest

Rebuild the config file for a specified device.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCPEConfigResetDeviceRequest

Reset a specific service provider or enterprise device.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderCPEConfigReorderDeviceLinePortsRequest

Reorder the lines of a Service Provider device. You can not add or delete line
ports, only
 re-ordering the list is allowed. The ordered list of line ports
can be obtained
 with the C<ServiceProviderAccessDeviceGetRequest> command.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDeleteRequest

Delete a service provider or enterprise.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialableCallerIDCriteriaAddRequest

Add a new Dialable Caller ID Criteria. Criteria are added at the bottom of the
list with the lowest priority. The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialableCallerIDCriteriaDeleteRequest

Delete a Dialable Caller ID Criteria.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialableCallerIDCriteriaGetRequest

Get an existing Dialable Caller ID Criteria.
 The response is either a  
C<ServiceProviderDialableCallerIDCriteriaGetRequest> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialableCallerIDCriteriaModifyRequest

Modify a Dialable Caller ID Criteria.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialableCallerIDGetRequest

Get the service provider?s Dialable Caller ID settings and criteria list.
 The
response is either a 
 C<ServiceProviderDialableCallerIDGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialableCallerIDModifyRequest

Modify the service provider?s Dialable Caller ID settings and criteria list.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialPlanPolicyGetRequest17

Request the Service Provider level data associated with Dial Plan Policy.
 The
response is either a C<ServiceProviderDialPlanPolicyGetResponse17>
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialPlanPolicyModifyRequest

Modify the Service Provider level data associated with Dial Plan Policy.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialPlanPolicyGetAccessCodeListRequest

Request the Service Provider level data associated with Dial Plan Policy.
 The
response is either a C<ServiceProviderDialPlanPolicyGetAccessCodeListResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialPlanPolicyGetAccessCodeRequest

Request access code data associated with Service Provider level Dial Plan
Policy access codes.
 The response is either a
C<ServiceProviderDialPlanPolicyGetAccessCodeResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item accessCode

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialPlanPolicyAddAccessCodeRequest

Request to add a Service Provider level Dial Plan Access Code and its all
attribues.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item accessCode

=item includeCodeForNetworkTranslationsAndRouting

=item includeCodeForScreeningServices

=item enableSecondaryDialTone

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialPlanPolicyDeleteAccessCodeRequest

Request to delete a Service Provider level Dial Plan Access Code and its all
attribues.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item accessCode

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDialPlanPolicyModifyAccessCodeRequest

Request to modify a Service Provider level Dial Plan Access Code and its
attribues.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item accessCode

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDigitCollectionGetRequest13mp4

Request the service provider's digit collection attributes.
 The response is
either a C<ServiceProviderDigitCollectionGetResponse13mp4> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDigitCollectionModifyRequest

Modifies the service provider's digit collection attributes.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDnAddListRequest

Adds DNs to a service provider. It is possible to add either: a single DN,
 or
a list of DNs, or a range of DNs, or any combination thereof.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDnDeleteListRequest

Deletes DNs from a service provider. It is possible to delete either: a single
DN,
 or a list of DNs, or a range of DNs, or any combination thereof.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDnGetAvailableListRequest

Request a list of available DNs not yet assigned to any group.
 The response is
either C<ServiceProviderDnGetAvailableListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDnGetSummaryListRequest

Request a summary table of all DNs in a service provider.
 The response is
either C<ServiceProviderDnGetSummaryListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDomainAssignListRequest

Assign a list of domains to a service provider.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item domain

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDomainGetAssignedGroupListRequest

Requests a list of groups within a service provider that have a given domain
assigned.
 It is possible to search by various criteria to restrict the number
of rows returned.
 Multiple search criteria are logically C<ANDed> together.
The response is either a C<ServiceProviderDomainGetAssignedGroupListResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item domain

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDomainGetAssignedListRequest

Requests the list of all domains assigned to a service provider.
 The response
is either C<ServiceProviderDomainGetAssignedListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderDomainUnassignListRequest

Unassign a list of domains from a service provider.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item domain

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderEndpointGetListRequest

Request to search endpoints in the service provider/enterprise.
 The response
is either C<ServiceProviderEndpointGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderFeatureAccessCodeGetListRequest

Get the list of feature access codes for a service provider or enterprise.
 The
response is either a C<ServiceProviderFeatureAccessCodeGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderFeatureAccessCodeModifyListRequest

Modify a list of feature access codes for a service provider or enterprise.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderFileRepositoryDeviceUserAddRequest

Add a new service provider file repository user.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item fileRepositoryName

=item userName

=item password

=item allowPut

=item allowDelete

=item allowGet

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderFileRepositoryDeviceUserDeleteRequest

Delete a service provider file repository user.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item fileRepositoryName

=item userName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderFileRepositoryDeviceUserModifyRequest

Modify a service provider file repository user.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item fileRepositoryName

=item userName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderFileRepositoryDeviceUserGetListRequest

Request the list of service provider users for a file repository in the system.
 The response is either a
C<ServiceProviderFileRepositoryDeviceUserGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item fileRepositoryName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderGetDefaultRequest

Request the default profile for a service provider or enterprise.
 The response
is either a C<ServiceProviderGetDefaultResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 ServiceProviderGetListRequest

Request a list of service providers and/or enterprises in the system.
 It is
possible to search by various criteria to restrict the number of rows returned.
 Multiple search criteria are logically C<ANDed> together.
 The response is
either a C<ServiceProviderGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 ServiceProviderGetRequest17sp1

Get the profile for a service provider or enterprise.
 The response is either a
C<ServiceProviderGetResponse17sp1> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderModifyRequest

Modify the profile for a service provider or enterprise.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderNetworkClassOfServiceModifyDefaultRequest

Modifies the default Network Classes of Service of a Service Provider.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item networkClassOfService

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderNetworkClassOfServiceAssignListRequest

Assign a list of Network Classes of Service to a service provider.
 The Element
C<defaultNetworkClassOfService> is required only for the first assignment, 
for subsequent assignments it is optional.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderNetworkClassOfServiceAssignListToAllGroupsRequest

Assign a list of Network Classes of Service to all groups with in a 
 service
provider. If it is the first assigned Network Class of Service in 
 the group,
it will be set as the default one.
 The Network Classes of Service must be
currently
 assigned to the service provider. The response is either a 
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderNetworkClassOfServiceAssignToAllUsersRequest

Assign a Network Classes of Service to all users with in a 
 service provider.
This will also assign the Network Class of Service
 to all the groups in the
service provider if it is not assigned yet.
 If it is the first assigned
Network Class of Service in the group, 
 it will be set as the default one.
However, the Network Classes of Service must be currently assigned to 
 the
service provider. The response is either a C<SuccessResponse> or
 an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item networkClassOfService

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderNetworkClassOfServiceGetAssignedListRequest

Get a list of Network Classes of Service assigned to a service provider.
 The
response is either a
C<ServiceProviderNetworkClassOfServiceGetAssignedListResponse> 
 or an
C<ErorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderNetworkClassOfServiceGetAssignedGroupListRequest

Get a list of groups within a service provider that have a given
 Network Class
of Service assigned.
 The response is either a
C<ServiceProviderNetworkClassOfServiceGetAssignedGroupListResponse> 
 or an
C<ErorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item networkClassOfService

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderNetworkClassOfServiceUnassignListRequest

Unassign a list of Network Classes of Service from a service provider.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderOfficeZoneAssignListRequest

Assign a list of Office Zones to a service provider.
 The Element
C<defaultOfficeZone> is required only for the first assignment, for subsequent
assignments it is optional.
 Office Zones can only be assigned if the
Location-Based Calling Restrictions has been authorized to the service provider
otherwise the request will fail.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderOfficeZoneGetAssignedListRequest

Get a list of Office Zones assigned to a service provider.
 The response is
either a C<ServiceProviderOfficeZoneGetAssignedListResponse> 
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderOfficeZoneGetAssignedGroupListRequest

Get a list of groups within a service provider that have a given Office Zone
assigned.
 The response is either a
C<ServiceProviderOfficeZoneGetAssignedGroupListResponse> 
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item officeZoneName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderOfficeZoneUnassignListRequest

Unassign a list of C<OfficeZones> from a service provider.  Note: a new default
must be provided if unassigning the current default.
 Office Zones can only be
unassigned if the Location-Based Calling Restrictions has been authorized to
the service provider otherwise the request will fail.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderPortalPasscodeRulesGetRequest

Requests the service provider's passcode rules setting.
 The response is either
C<ServiceProviderPortalPasscodeRulesGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderPortalPasscodeRulesModifyRequest

Request to modify the service provider's passcode rules setting.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderPasswordRulesGetRequest16

Requests the service provider's password rules setting applicable to
Administrators (Group and Department) and Users.
 The response is either
C<ServiceProviderPasswordRulesGetResponse16> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderPasswordRulesModifyRequest14sp3

Request to modify the service provider's password rules settings
 setting
applicable to Administrators (Group and Department) and Users.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderRoutePointExternalSystemAssignListRequest

Assign a list of route point external systems to a service provider.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderRoutePointExternalSystemGetAssignedGroupListRequest

Requests a list of groups within a service provider that have a given external
system assigned.
 It is possible to search by various criteria to restrict the
number of rows returned.
 Multiple search criteria are logically C<ANDed>
together.
 The response is either a
C<ServiceProviderRoutePointExternalSystemGetAssignedGroupListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item externalSystem

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderRoutePointExternalSystemGetAssignedListRequest

Requests the list of all Route Point External Systems assigned to a service
provider.
 The response is either
C<ServiceProviderRoutePointExternalSystemGetAssignedListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderRoutePointExternalSystemUnassignListRequest

Unassign a list of route point external systems from a service provider.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderRoutingProfileGetRequest

Request the routing profile for the service provider/enterprise.
 The response
is either a C<ServiceProviderRoutingProfileGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderRoutingProfileModifyRequest

Requests to modify the routing profile for a service provider.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderScheduleAddEventRequest

Add an event to service provider schedule. 
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item scheduleKey

=item eventName

=item startDate

=item endDate

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderScheduleAddRequest

Add a service provider schedule.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item scheduleName

=item scheduleType

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderScheduleDeleteEventListRequest

Delete a list of events from a service provider schedule.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderScheduleDeleteListRequest

Delete a list of service provider schedule.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderScheduleGetEventListRequest

Get the list of events of a service provider schedule.
 The response is either
a C<ServiceProviderScheduleGetEventListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderScheduleGetEventRequest

Get an event from a service provider schedule.
 The response is either a
C<ServiceProviderScheduleGetEventResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderScheduleGetListRequest

Get the list of a service provider schedules. The list can be filtered by
schedule type.
 The response is either a
C<ServiceProviderScheduleGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderScheduleModifyEventRequest

Modify an event of a service provider schedule.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderScheduleModifyRequest

Modify a service provider schedule.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServiceGetAuthorizationListRequest

Requests the service provider's service authorization status.
 The response is
either C<ServiceProviderServiceGetAuthorizationListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServiceGetUserAssignableListRequest

Requests the list of all user services assignable to users in the specified
service provider.
 The response is either
C<ServiceProviderServiceGetUserAssignableListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServiceModifyAuthorizationListRequest

Requests to change the service provider's service authorization status.
 The
boolean flags are used to authorize or unauthorize services.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackAddRequest

Request to add a service pack to a service provider.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item servicePackName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackAddServiceListRequest

Request to add services to a service pack if the pack has not been authorized
to a group.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item servicePackName

=item serviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackDeleteRequest

Request to delete a service pack from a service provider.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item servicePackName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackGetDetailListRequest

Request to get a service pack details.
 The response is either
C<ServiceProviderServicePackGetDetailListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item servicePackName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackGetListRequest

Request to get a list of defined service packs for a service provider.
 The
response is either C<ServiceProviderServicePackGetListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackGetServiceUsageListRequest

Request to get the list of service packs containing a specified service.
 The
response is either C<ServiceProviderServicePackGetServiceUsageListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item serviceName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackGetUtilizationListRequest

Request to get the service pack utilization for a service provider.
 For each
service pack, a table of groups utilizing the pack is returned.
 The response
is either C<ServiceProviderServicePackGetUtilizationListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskAddRequest

Modify the properties of a specified service pack migration task.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item taskName

=item startTimestamp

=item maxDurationHours

=item sendReportEmail

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskCopyRequest

Makes a copy of one or more existing service pack migration tasks. A copied
task
 can be edited with other commands and scheduled for future execution. The
 name of the new task is chosen automatically. The name will
 be "Copy (number)
of C<taskName>".
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item taskName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskDeleteRequest

Deletes a service pack migration task. It is not possible to delete a task
while it is
 currently executing.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item taskName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskGetAvailableGroupListRequest

Requests a list of groups to migrate.
 The response is either
C<ServiceProviderServicePackMigrationTaskGetAvailabeGroupListResponse>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskGetListRequest

Requests a list of all service pack migration task for a service provider.
 The
response is either C<ServiceProviderServicePackMigrationTaskGetListResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskGetRequest14sp4

Requests the details of a specified service pack migration task.
 The response
is either C<ServiceProviderServicePackMigrationTaskGetResponse14sp4>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item taskName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskModifyAssignmentListRequest

Replace the list of services and packs to be assigned to users during the
service pack migration.
 Modification is only allowed prior to task execution.
The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item taskName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskModifyGroupListRequest

Replace the list of groups to be migrated for a specified service pack
migration task.
 Modification is only allowed prior to task execution.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item taskName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskModifyRemovalListRequest

Replace the list of services and packs to be removed from users during the
service pack migration.
 Modification is only allowed prior to task execution.
The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item taskName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskModifyRequest

Modify the properties of a specified service pack migration task.
 Modification
is only allowed prior to task execution.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item taskName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskModifyUserSelectionRequest

Replace the list of services and packs used to select which users will be
migrated.
 Modification is only allowed prior to task execution.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item taskName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackMigrationTaskTerminateRequest

Terminates a service pack migration task that is currently executing.
Modification is only allowed prior to task execution.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item taskName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderServicePackModifyRequest

Requests to modify a service pack for a service provider.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item servicePackName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderSessionAdmissionControlGetRequest

Get the session admission control capacity for the service provider.
 The
response is either a C<ServiceProviderSessionAdmissionControlGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderSessionAdmissionControlModifyRequest

Request to modify session admission control capacity for the service provider.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderLanguageAddRequest

Request to add a language for a service provder.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item language

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderLanguageModifyRequest

Request to modify a language properties for a service provider/enterprise.
 If
the C<becomeDefaultLanguage> element is present, the language in this request
Becomes the default language for the service provider/enterprise.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item language

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderLanguageDeleteRequest

Request to delete a language from a service provider supported languages.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item language

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderLanguageGetListRequest

Request the defined languages for a service provider.
 The response is either a
C<ServiceProviderLanguageGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderLanguageGetAvailableListRequest

Request the list of languages that a user or admin in a service provider is
allowed to use.  
 The list will either be the system or service provider
languages list, depending on the C<useServiceProviderLanguages> flag.
 The
response is either a C<ServiceProviderLanguageGetAvailableListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderApplicationServerSetModifyRequest

Modify the Application Server set assigned to the service provider or
enterprise.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderApplicationServerSetGetRequest

Get the Application Server set for a service provider or enterprise.
 The
response is either a C<ServiceProviderApplicationServerSetGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceAddRequest

Request to add a system-level access device.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceCustomTagAddRequest

Request to add a static configuration tag for a system access device.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=item tagName

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceCustomTagDeleteListRequest

Request to delete static configuration tags for a system access device.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceCustomTagGetListRequest

Request to get the list of custom configuration tags managed by the Device
Management System, on a per-device profile basis.
 The response is either
C<SystemAccessDeviceCustomTagGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceCustomTagModifyRequest

Request to modify a static configuration tag for a system access device.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=item tagName

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceDeleteRequest

Request to delete a specified system access device.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceFileModifyRequest14sp8

Request to modify a specified system access device file.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceFileGetListRequest14sp8

Request to get the list of device files managed by the Device Management
System, on a per-device profile basis.
 The response is either
C<SystemAccessDeviceFileGetListResponse14sp8> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceFileGetRequest16sp1

Request to get a device profile file.
 The response is either
C<SystemAccessDeviceFileGetResponse16sp1> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceGetAllRequest

Requests the list of all access devices in the entire system.
 Prior to release
14, this functionality was provided with the
C<SystemAccessDeviceGetListRequest>.
 The response is either
C<SystemAccessDeviceGetAllResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceGetListRequest14

Requests the list of access devices defined at the System-level.
 Prior to
release 14, this command requested a list of all devices in the entire system.
That
 functionality is now moved to the C<SystemAccessDeviceGetAllRequest>.
The response is either C<SystemAccessDeviceGetListResponse14> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceGetRequest16

Requests the configuration of a specified system access device.
 The response
is either C<SystemAccessDeviceGetResponse16> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceGetUserListRequest

Requests the users associated with a specified system access device.
 The
response is either C<SystemAccessDeviceGetUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceModifyRequest

Request to modify a specified system access device.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceModifyUserRequest

Request to modify attributes for line/ports assigned on the system device
profile.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=item linePort

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceMonitorAddDeviceTypeRequest

Add a device type to be monitored.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceMonitorDeleteDeviceTypeRequest

Remove a device type to be monitored.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceMonitorGetDeviceTypeListRequest

Get a list of monitored device types.
 The response is either a
C<SystemAccessDeviceMonitorGetDeviceTypeListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceMonitorParametersGetRequest

Request to get the list of Access Device Monitor system parameters.
 The
response is either C<SystemAccessDeviceMonitorParametersGetResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceMonitorParametersModifyRequest

Request to modify Access Device Monitor system parameters.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceResetRequest

Reset a specific system SIP device that supports the reset operation.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceTypeGetEnhancedConfigurableListRequest

Requests the list of device types supporting enhanced configuration.
 The
response is either C<SystemAccessDeviceTypeGetEnhancedConfigurableListResponse>
 or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAccessDeviceTypeGetListRequest

Requests the list of access device types.
 The response is either
C<SystemAccessDeviceTypeGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAccountingAddChargingFunctionElementServerRequest

Request to add a C<ChargingFunctionElement> Server to the system.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item address

=item isNetAddressExtended

=item type

=back

Additionally there are generic tagged parameters.

=head3 SystemAccountingAddRadiusServerRequest

Request to add a Radius Server to the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=item port

=back

Additionally there are generic tagged parameters.

=head3 SystemAccountingDeleteChargingFunctionElementServerRequest

Request to delete a C<ChargingFunctionElementServer> from the system.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item address

=back

Additionally there are generic tagged parameters.

=head3 SystemAccountingDeleteRadiusServerRequest

Request to delete a Radius Server from the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=item port

=back

Additionally there are generic tagged parameters.

=head3 SystemAccountingGetChargingFunctionElementServerListRequest

Request to get a list of C<ChargingFunctionElementServers> defined in the
system.
 The response is either a
C<SystemAccountingGetChargingFunctionElementServerListResponse>
 or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAccountingGetRadiusServerListRequest

Request to get a list of Radius Servers defined in the system.
 The response is
either a C<SystemAccountingGetRadiusServerListResponse>
 or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAccountingModifyChargingFunctionElementServerRequest

Request to modify a C<ChargingFunctionElementServer> in the system.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item address

=back

Additionally there are generic tagged parameters.

=head3 SystemAccountingModifyRadiusServerRequest

Request to modify a Radius Server in the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=item port

=back

Additionally there are generic tagged parameters.

=head3 SystemAccountingReorderChargingFunctionElementServerRequest

Reorder the charging function element servers. You can not add or delete
addresses,
 only re-ordering the list is allowed. The ordered list of addresses
can be obtained
 with the
C<SystemAccountingGetChargingFunctionElementServerListRequest> command.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAdminAddRequest

Add a system or provisioning administrator.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemAdminDeleteRequest

Delete a system or provisioning administrator.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemAdminGetListRequest

Get a list of system administrators.
 The response is either a
C<SystemAdminGetResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAdminGetRequest

Get a system or provisioning administrators profile.
 The response is either a
C<SystemAdminGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemAdminModifyRequest

Modify a system or provisioning administrator.
 Since old password is not
specified here, any password rule related to old password
 does not apply.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemAliasAddRequest

Add a system-level Application Server alias to the system.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item aliasNetAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemAliasDeleteRequest

Delete a system-level Application Server alias from the system.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item aliasNetAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemAliasGetListRequest

Requests the list of all system-level Application Server aliases.
 The response
is either C<SystemAliasGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemApplicationControllerAddRequest

Add an application controller, which is a server where remote 
 application
resides and controls the Route Point.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=item subscriberId

=item channelSetId

=back

Additionally there are generic tagged parameters.

=head3 SystemApplicationControllerDeleteRequest

Delete an application controller.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemApplicationControllerGetListRequest

Get a list of application controllers that are configured for the system.
 The
response is either C<SystemApplicationControllerGetListResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemApplicationServerSetDeleteRequest

Delete an Application Server set.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemApplicationServerSetGetListRequest

Get list of Application Server sets.
 The response is either
C<SystemApplicationServerSetGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemApplicationServerSetGetUsageRequest

Get list of enterprises, service providers, and service provider groups
currently associated to the specified Application Server set.
 The response is
either C<SystemApplicationServerSetGetUsageResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemASRParametersGetRequest14sp7

Request to get the list of Application Server Registration system parameters.
The response is either C<SystemASRParametersGetResponse14sp7> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemASRParametersModifyRequest14sp7

Request to modify Application Server Registration system parameters.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksMobileManagerGetRequest

Get the C<BroadWorks> Mobile Manager service system settings.
 The response is
either C<SystemBroadWorksMobileManagerGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksMobileManagerModifyRequest

Modify the C<BroadWorks> Mobile Manager service system settings.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterBaseDataGetRequest17sp3

Requests the list of System Diameter base parameters.
 The response is either
C<SystemBwDiameterBaseDataGetResponse17sp3> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterBaseDataModifyRequest

Modifies the System Diameter base parameters.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterPeerAddRequest

Add a static entry in the Diameter Peer Table.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item instance

=item identity

=back

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterPeerDeleteRequest

Remove a Diameter peer.  A peer cannot be removed if is referenced by a Realm
Routing Table entry.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item instance

=item identity

=back

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterPeerGetListRequest

Requests the list of Diameter peers.
 The response is either
C<SystemBwDiameterPeerGetListResponse> or C<ErrorResponse>

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterPeerModifyRequest

Modifies the attributes of an entry in the Diameter Peer Table.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item instance

=item identity

=back

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterRoutingRealmAddRequest

Add a static entry in the Realm Routing Table.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item instance

=item realm

=item applicationId

=item default

=back

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterRoutingRealmDeleteRequest

Delete a static entry in the Realm Routing Table.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item instance

=item realm

=item applicationId

=back

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterRoutingRealmGetListRequest

Requests the list of Diameter routing realms.
 The response is either
C<SystemBwDiameterRoutingRealmGetListResponse> or  C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterRoutingRealmModifyRequest

Modify a static entry in the Realm Routing Table.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item instance

=item realm

=item applicationId

=back

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterRoutingPeerAddRequest

Add a Diameter routing peer.  The realm must refer to a Diameter routing realm
whose action is relay.  The C<destinationPeerIdentity> must refer to an
existing Diameter peer whose mode is active.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item instance

=item realm

=item applicationId

=item identity

=item priority

=item weight

=back

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterRoutingPeerDeleteRequest

Remove a Diameter routing peer.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item instance

=item realm

=item applicationId

=item identity

=back

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterRoutingPeerGetListRequest

Requests the list of Diameter routing peers associated with the specified
realm. The response is either C<SystemBwDiameterRoutingPeerGetListResponse> or 
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBwDiameterRoutingPeerModifyRequest

Modify a Diameter routing peer.  The realm must refer to a Diameter routing
realm whose action is relay.  The C<destinationPeerIdentity> must refer to an
existing Diameter peer whose mode is active.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item instance

=item realm

=item applicationId

=item identity

=back

Additionally there are generic tagged parameters.

=head3 SystemCallProcessingGetPolicyRequest17sp4

The response is either a C<SystemCallProcessingGetPolicyResponse17sp4> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallProcessingModifyPolicyRequest15

Modify the system level data associated with Call Processing Policy.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.
 The following
elements are only used in AS data mode:
 C<enableDialableCallerID>
C<allowConfigurableCLIDForRedirectingIdentity>

Additionally there are generic tagged parameters.

=head3 SystemCAPAddACLEntryRequest14

Add an entry to the CAP access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemCAPDeleteACLEntryRequest

Delete an entry from the CAP access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemCAPGetACLListRequest14

Get the CAP access control list.
 The response is either
C<SystemCAPGetACLListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCAPModifyACLEntryRequest14

Modify an entry from the CAP access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemCAPParametersGetRequest14sp3

Request to get the list of CAP system parameters.
 The response is either
C<SystemCAPParametersGetResponse14sp3> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCAPParametersModifyRequest

Request to modify CAP system parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemClientSessionParametersGetRequest

Request to get the list of Client Session (web and CLI) system parameters.
 The
response is either C<SystemClientSessionParametersGetResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemClientSessionParametersModifyRequest

Request to modify Client Session (web and CLI) system parameters.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCodecAddRequest

Request to add a codec to the ordered list of codecs supported by the system.
The ordered list of codecs is sent to MGCP devices when creating connections.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item codec

=back

Additionally there are generic tagged parameters.

=head3 SystemCodecDeleteRequest

Request to delete a supported codec from the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item codec

=back

Additionally there are generic tagged parameters.

=head3 SystemCodecGetListRequest

Request to get the ordered list of supported codecs in the system.
 The ordered
list of codecs is sent to MGCP devices when creating connections.
 The response
is either a C<SystemCodecGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringAlternateCallIndicatorAddRequest

Add a Communication Barring Alternate Call Indicator.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item alternateCallIndicator

=item networkServerAlternateCallIndicator

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringAlternateCallIndicatorDeleteRequest

Delete a Communication Barring Alternate Call Indicator.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item alternateCallIndicator

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringAlternateCallIndicatorGetListRequest

Get all the Communication Barring Alternate Call Indicator defined
 in the
system. The response is either a
C<SystemCommunicationBarringAlternateCallIndicatorGetListResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringAlternateCallIndicatorModifyRequest

Modify a Communication Barring Alternate Call Indicator.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item alternateCallIndicator

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringCallTypeAddRequest

Add a Communication Barring Call Type.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item callType

=item networkServerCallType

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringCallTypeDeleteRequest

Delete a Communication Barring Call Type.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item callType

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringCallTypeGetListRequest

Get all the Communication Barring Call Types defined in the system.
 The
response is either a C<SystemCommunicationBarringCallTypeGetListResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringCallTypeModifyRequest

Modify a Communication Barring Call Type.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item callType

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringCriteriaAddRequest17

Add a new Communication Barring Criteria.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringCriteriaDeleteRequest

Delete an existing Communication Barring Criteria.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringCriteriaGetRequest17

Get an existing Communication Barring Criteria.
 The response is either a  
C<SystemCommunicationBarringCriteriaGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringCriteriaGetListRequest

Get the list of all Communication Barring Criteria.
 The response is either a 
C<SystemCommunicationBarringCriteriaGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringCriteriaModifyRequest

Modify an existing Communication Barring Criteria.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringDigitPatternCriteriaAddRequest

Add a new Communication Barring Digit Pattern Criteria.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringDigitPatternCriteriaDeleteRequest

Delete an existing Communication Barring Digit Pattern Criteria.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringDigitPatternCriteriaGetListRequest

Get the list of all Digit Pattern Criteria defined at the system level.
 The
response is either a
C<SystemCommunicationBarringDigitPatternCriteriaGetListResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringDigitPatternCriteriaGetPatternListRequest

Get an existing Digit Pattern Criteria.
 The response is either a
C<SystemCommunicationBarringDigitPatternCriteriaGetPatternListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringDigitPatternCriteriaGetRequest

Get an existing Communication Barring Digit Pattern Criteria.
 The response is
either a C<SystemCommunicationBarringDigitPatternCriteriaGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringDigitPatternCriteriaModifyRequest

Modify an existing Communication Barring Digit Pattern Criteria.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringGetRequest

Request the system level data associated with Communication Barring.
 The
response is either a C<SystemCommunicationBarringGetResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringModifyRequest

Modify the system level data associated with Communication Barring.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringProfileAddRequest17sp3

Add a new Communication Barring Profile.
 The priorities for C<IncomingRules>
are requantized to consecutive integers as part of the add.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.
 The following elements are
only used in AS data mode:
 C<callMeNowDefaultAction>, use value "Block" in HSS
data mode
 C<callMeNowDefaultCallTimeout>
 C<callMeNowRule>

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringProfileDeleteRequest

Delete an existing Communication Barring Profile.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringProfileGetCriteriaUsageListRequest

Get the list of Communication Barring Proifles that uses a specific
Communication Barring criteria.
 The response is either a
C<SystemCommunicationBarringProfileGetCriteriaUsageListResponse>
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringProfileGetDigitPatternCriteriaUsageListRequest

Get the list of Profiles that use a specific Digit Pattern Criteria.
 The
response is either a 
C<SystemCommunicationBarringProfileGetDigitPatternCriteriaUsageListResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringProfileGetListRequest

Get the list of all Communication Barring Profiles.
 The response is either a 
C<SystemCommunicationBarringProfileGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringProfileGetRequest17sp3

Get an existing Communication Barring Profile.
 The response is either a
C<SystemCommunicationBarringProfileGetResponse17sp3>
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringProfileModifyRequest

Modify an existing Communication Barring Profile.
 When the
C<originatingDefaultAction> is not Treatment, C<originatingDefaultTreatmentId>
will be automatically cleared. Also when the action of C<originatingRule> is
not Treatment,
 treatmentId will be automatically cleared for the rule.
 The
priorities for C<IncomingRules> are requantized to consecutive integers as part
of the modify.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.
  The following elements are only used in AS data mode:
C<callMeNowDefaultAction>
 C<callMeNowDefaultCallTimeout>
 C<callMeNowRule>

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringServiceProviderGetCriteriaUsageListRequest

Get the list of Service Providers that use a specific
 Communication Barring
Criteria.
 The response is either a
C<SystemCommunicationBarringServiceProviderGetCriteriaUsageListResponse>
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemConfigurableFileSystemGetRequest

Request to get the File System parameters.
 The response is either
C<SystemConfigurableFileSystemGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemConfigurableFileSystemModifyRequest

Request to modify File System parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemConfigurableTreatmentAddRequest

Add a configurable treatment.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item treatmentId

=item chargeIndicator

=back

Additionally there are generic tagged parameters.

=head3 SystemConfigurableTreatmentDeleteRequest

Delete a configurable treatment.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item treatmentId

=back

Additionally there are generic tagged parameters.

=head3 SystemConfigurableTreatmentGetListRequest

Get a list of configurable treatments.
 The response is either a
C<SystemConfigurableTreatmentGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemConfigurableTreatmentGetRequest16

Get all the attributes of a configurable treatment.
 The response is either a
C<SystemConfigurableTreatmentGetResponse16> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item treatmentId

=back

Additionally there are generic tagged parameters.

=head3 SystemConfigurableTreatmentModifyRequest

Modify the fields for a configurable treatment.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item treatmentId

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingAccessSIPStatusAddRequest

Add an Access SIP Status Code Mapping.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item sipStatusCode

=item treatmentId

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingAccessSIPStatusDeleteRequest

Delete an Access SIP Status Code mapping.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item sipStatusCode

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingAccessSIPStatusGetListRequest

Requests a table of all the existing Access Side SIP Status Code Mappings in
the system.
 The response is either an
C<SystemTreatmentMappingAccessSIPStatusGetListResponse>
 or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingAccessSIPStatusModifyRequest

Modify the fields for an Access SIP Status Code mapping.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item sipStatusCode

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingCallBlockingServiceAddRequest

Add a Call Blocking Service mapping.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item callBlockingService

=item treatmentId

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingCallBlockingServiceDeleteRequest

Delete a Call Blocking Service mapping.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item callBlockingService

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingCallBlockingServiceGetListRequest

Requests a table of all the existing Call Blocking Service Mappings in the
system.
 The response is either a
C<SystemTreatmentMappingCallBlockingServicesGetListResponse>
 or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingCallBlockingServiceModifyRequest

Modify the fields for a Call Blocking Service mapping.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item callBlockingService

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingInternalReleaseCauseAddRequest

Add an Internal Release Cause mapping.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item internalReleaseCause

=item treatmentId

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingInternalReleaseCauseDeleteRequest

Delete an Internal Release Cause mapping.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item internalReleaseCause

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingInternalReleaseCauseGetListRequest

Requests a table of all the Internal Release Cause mappings in the system.
 The
response is either a
C<SystemTreatmentMappingInternalReleaseCauseGetListResponse>
 or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingInternalReleaseCauseModifyRequest

Modify the fields for an Internal Release Cause mapping.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item internalReleaseCause

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingNetworkServerTreatmentAddRequest

Add a Network Server Treatment mapping.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item nsTreatment

=item treatmentId

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingNetworkServerTreatmentDeleteRequest

Delete a NS Treatment mapping.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item nsTreatment

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingNetworkServerTreatmentGetListRequest

Requests a table of all the existing NS Treatment Mappings in the system.
 The
response is either a  
C<SystemTreatmentMappingNetworkServerTreatmentGetListResponse>
 or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingNetworkServerTreatmentModifyRequest

Modify the fields for a Network Server Treatment mapping.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item nsTreatment

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingNetworkSIPStatusAddRequest

Add a Network SIP Status Code mapping.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item sipStatusCode

=item treatmentId

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingNetworkSIPStatusDeleteRequest

Delete a Network SIP Status Code mapping.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item sipStatusCode

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingNetworkSIPStatusGetListRequest

Requests a table of all the existing Network SIP Status Code Mappings in the
system.
 The response is either an
C<SystemTreatmentMappingNetworkSIPStatusCodeGetListResponse>
 or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingNetworkSIPStatusModifyRequest

Modify the fields for a Network SIP Status Code mapping.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item sipStatusCode

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingQ850CauseAddRequest

Add a Q850 Cause Value mapping.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item q850CauseValue

=item treatmentId

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingQ850CauseDeleteRequest

Delete a Q850 Cause Value mapping.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item q850CauseValue

=back

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingQ850CauseGetListRequest

Requests a table of all the existing Q850 Cause Value Mappings in the system.
The response is either a C<SystemTreatmentMappingQ850CauseGetListResponse>
 or
an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemTreatmentMappingQ850CauseModifyRequest

Modify the fields for a C<Q850CauseValue> mapping.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item q850CauseValue

=back

Additionally there are generic tagged parameters.

=head3 SystemCountryCodeAddRequest

Add a country code to the system.
 If C<ringPeriodMilliseconds> is not
specified, a default of 6000 milliseconds is assumed.
 If
C<offHookWarningTimerSeconds> is not specified, a default of 30 seconds is
assumed.
 If C<enableNationalPrefix> is not specified, a default of false is
assumed.
 If C<nationalPrefix> is not specified, a default of null string is
assumed.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item countryCode

=item countryName

=back

Additionally there are generic tagged parameters.

=head3 SystemCountryCodeDeleteRequest

Delete a country code from the system.
 A country code cannot be deleted if it
is the default country code or
 if any carriers or call type mappings are
defined against it.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item countryCode

=back

Additionally there are generic tagged parameters.

=head3 SystemCountryCodeGetListRequest

Request data for all country codes.
 The response is either a
C<SystemCountryCodeGetListResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCountryCodeModifyRequest

Modify the attributes of a country code.
 If C<becomeDefaultCountryCode> is
true, the country code
 in this request becomes the default country code for
the system.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item countryCode

=back

Additionally there are generic tagged parameters.

=head3 SystemCallTypeAddMappingRequest

Add a system call type mapping.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item countryCode

=item digitMap

=item callType

=back

Additionally there are generic tagged parameters.

=head3 SystemCallTypeDeleteMappingRequest

Delete a system call type mapping.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item countryCode

=item digitMap

=back

Additionally there are generic tagged parameters.

=head3 SystemCallTypeGetListRequest

Get a list of system call types.
 The response is either
C<SystemCallTypeGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallTypeGetMappingListRequest

Get a list of system call type mappings.
 The response is either
C<SystemCallTypeGetMappingListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigAddFileServerRequest14sp6

Add a device CPE config file server.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=item fileRepositoryName

=back

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigDeleteFileServerRequest

Delete a device CPE config file server.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigGetFileServerListRequest14sp6

Requests the list of device CPE config file servers.
 The response is either
C<SystemCPEConfigGetFileServerListResponse14sp6> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigModifyFileServerRequest14sp6

Modify a device CPE config file server.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigParametersGetRequest14sp6

Request to get the list of CPE Config system parameters.
 The response is
either C<SystemCPEConfigParametersGetResponse14sp6> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigParametersModifyRequest

Request to modify CPE Config system parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigRebuildConfigFileRequest

Rebuild the system default config file for the specified device type.
 If the
device type is not specified, all files for all device types in the system are
rebuilt.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigRebuildDeviceConfigFileRequest

Rebuild the config file for a specified device.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigResetDeviceRequest

Reset a specific system device.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigResetDeviceTypeRequest

Reset all the devices of the specified device type in the system.
 If the
device type is not specified, all device in the system are reset.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigReorderDeviceLinePortsRequest

Reorder the lines of a System device. You can not add or delete line ports,
only
 re-ordering the list is allowed. The ordered list of line ports can be
obtained
 with the C<SystemAccessDeviceGetRequest> command.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemCPEConfigSetConfigFileRequest

Request to set a new system default configuration file for a device type.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=item configFile

=back

Additionally there are generic tagged parameters.

=head3 SystemDeviceManagementTagAddRequest

Request to add a static configuration tag.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item tagName

=back

Additionally there are generic tagged parameters.

=head3 SystemDeviceManagementTagDeleteListRequest

Request to delete static configuration tags.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDeviceManagementTagGetListRequest

Request to get the list of custom configuration tags managed by the Device
Management System.
 The response is either
C<SystemDeviceManagementTagGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDeviceManagementTagModifyRequest

Request to modify a static configuration tag.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item tagName

=back

Additionally there are generic tagged parameters.

=head3 SystemDeviceManagementTagSetAddRequest

Request to add a static configuration tag set.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item tagSetName

=back

Additionally there are generic tagged parameters.

=head3 SystemDeviceManagementTagSetModifyRequest

Request to modify a static configuration tag set.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item tagSetName

=back

Additionally there are generic tagged parameters.

=head3 SystemDeviceManagementTagSetDeleteRequest

Request to delete a static configuration tag set.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item tagSetName

=back

Additionally there are generic tagged parameters.

=head3 SystemDeviceManagementTagSetGetListRequest

Request to get the list of custom configuration tag sets managed by the Device
Management System.
 The response is either
C<SystemDeviceManagementTagSetGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDeviceTypeExportRequest

Request to export an existing Device Type to a Device Type Archive File (DTAF).
 The response is either a C<SystemDeviceTypeExportResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemDeviceTypeImportRequest

Request to import a Device Type Archive File (DTAF) as a new Device Type.  The
URL supports the HTTP and the FILE protocols.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item file

=back

Additionally there are generic tagged parameters.

=head3 SystemDeviceTypeGetAvailableListRequest14sp3

Requests a list of non-obsolete Identity/device profile types defined in the
system. It is possible
 to get either all conference device types or all
non-conferernce types. This command is similar
 to the
C<SystemSIPDeviceTypeGetListRequest> and C<SystemMGCPDeviceTypeGetListRequest>
but gets both SIP and MGCP types.
 The response is either
C<SystemDeviceTypeGetlAvailableListResponse14sp1> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item allowConference

=item allowMusicOnHold

=item onlyConference

=item onlyVideoCapable

=item onlyOptionalIpAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemDeviceTypeGetRequest16sp1

Requests the information about the specified device type without regard to
whether the
 type is SIP or MGCP.
 The response is either
C<SystemDeviceTypeGetResponse16sp1> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemDialableCallerIDCriteriaAddRequest

Add a new Dialable Caller ID Criteria. Criteria are added at the bottom of the
list with the lowest priority. The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemDialableCallerIDCriteriaDeleteRequest

Delete a Dialable Caller ID Criteria.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemDialableCallerIDCriteriaGetRequest

Get an existing Dialable Caller ID Criteria.
 The response is either a  
C<SystemDialableCallerIDCriteriaGetRequest> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemDialableCallerIDCriteriaModifyRequest

Modify a Dialable Caller ID Criteria.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemDialableCallerIDGetRequest

Get the system level Dialable Caller ID criteria list.
 The response is either
a 
 C<SystemDialableCallerIDGetResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDialableCallerIDModifyRequest

Modify the system level Dialable Caller ID criteria list.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDialPlanPolicyGetRequest17

Request the system level data associated with Dial Plan Policy.
 The response
is either a C<SystemDialPlanPolicyGetResponse17> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDialPlanPolicyModifyRequest

Modify the system level data associated with Dial Plan Policy.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDialPlanPolicyGetAccessCodeListRequest

Request the system level Access Codes data associated with Dial Plan Policy.
The response is either a C<SystemDialPlanPolicyGetAccessCodeListResponse>
 or
an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDialPlanPolicyGetAccessCodeRequest

Request access code data associated with system level Dial Plan Policy access
codes.
 The response is either a C<SystemDialPlanPolicyGetAccessCodeResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item accessCode

=back

Additionally there are generic tagged parameters.

=head3 SystemDialPlanPolicyAddAccessCodeRequest

Request to add a system-level Dial Plan Access Code and its all attribues.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item accessCode

=item includeCodeForNetworkTranslationsAndRouting

=item includeCodeForScreeningServices

=item enableSecondaryDialTone

=back

Additionally there are generic tagged parameters.

=head3 SystemDialPlanPolicyDeleteAccessCodeRequest

Request to delete a system-level Dial Plan Access Code and its all attribues.
The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item accessCode

=back

Additionally there are generic tagged parameters.

=head3 SystemDialPlanPolicyModifyAccessCodeRequest

Request to modify a system-level Dial Plan Access Code and its attribues.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item accessCode

=back

Additionally there are generic tagged parameters.

=head3 SystemDigitCollectionGetRequest13mp4

Request the system's digit collection attributes.
 The response is either a
C<SystemDigitCollectionGetResponse13mp4> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDigitCollectionModifyRequest

Modifies the system's digit collection attributes.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDnGetSummaryListRequest

Request a summary table of all DNs in the system.
 The response is either
C<SystemDnGetSummaryListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDnGetUtilizationListRequest

Request a list of DN utilizations by service providers.
 The response is either
C<SystemDnUtilizationGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDnGetUtilizationRequest14sp3

Get the utilization of a single DN.
 The response is either
C<SystemDnGetUtilizationResponse14sp3> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 SystemDomainAddRequest

Add a system domain to the system.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item domain

=back

Additionally there are generic tagged parameters.

=head3 SystemDomainDeleteRequest

Delete a system domain from the system.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item domain

=back

Additionally there are generic tagged parameters.

=head3 SystemDomainGetAssignedServiceProviderListRequest

Request a list of service providers that have a given domain assigned.
 The
response is either C<SystemDomainGetAssignedServiceProviderListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item domain

=back

Additionally there are generic tagged parameters.

=head3 SystemDomainGetListRequest

Requests the list of all system-level domain names.
 The response is either
C<SystemDomainGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDomainParametersGetRequest

Request to get the list of system Domain parameters.
 The response is either
C<SystemDomainParametersGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDomainParametersModifyRequest

Request to modify system Domain parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDTMFTransmissionGetRequest

Get the system DTMF transmission configurations.
 The response is either
C<SystemDTMFTransmissionGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemDTMFTransmissionModifyRequest

Modify the DTMF transmission settings.
 The response is either
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemEndpointGetListRequest

Request to search endpoints in the system.
 The response is either
C<SystemEndpointGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemExpensiveCallNotificationGetRequest

Request to get the expensive call notification service parameters.
 The
response is either a C<SystemExpensiveCallNotificationGetResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemExpensiveCallNotificationModifyRequest

Modify the expensive call notification service parameters.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemExpensiveCallTypeAddRequest

Add an alternate call indicator to the list of expensive alternate call
indicators.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item alternateCallIndicator

=back

Additionally there are generic tagged parameters.

=head3 SystemExpensiveCallTypeDeleteRequest

Delete an alternate call indicator from the list of expensive alternate call
indicators.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item alternateCallIndicator

=back

Additionally there are generic tagged parameters.

=head3 SystemExpensiveCallTypeGetListRequest16sp1

Request to get the list of expensive alternate call indicators in the system.
The response is either a C<SystemExpensiveCallTypeGetListResponse16sp1>     
or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemExpensiveCallTypeModifyRequest

Modify an existing call indicator in the list of expensive alternate call
indicators.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item alternateCallIndicator

=back

Additionally there are generic tagged parameters.

=head3 SystemExportAddressingDataRequest

Request to export Application Server addressing data, such as DNs, extensions,
alias and user ids
 to a file so they can be uploaded to a Network Server.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item fileName

=back

Additionally there are generic tagged parameters.

=head3 SystemExtensionLengthGetRequest

Request the system's extension range.
 The response is either a
C<SystemExtensionLengthGetResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemExtensionLengthModifyRequest

Modify the group's extension length range.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemExternalAuthenticationAddACLEntryRequest14sp2

Add an entry to the external authentication access control list.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemExternalAuthenticationDeleteACLEntryRequest14sp2

Delete an entry from the external authentication access control list.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemExternalAuthenticationGetACLListRequest

Get the external authentication access control list.
 The response is either
C<SystemExternalAuthenticationGetACLListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemExternalAuthenticationModifyACLEntryRequest14sp2

Modify an entry from the external authentication access control list.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemExternalEmergencyRoutingParametersGetRequest13mp13

Request to get the list of External Emergency Routing system parameters.
 The
response is either C<SystemExternalEmergencyRoutingParametersGetResponse13mp13>
or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemExternalEmergencyRoutingParametersModifyRequest13mp13

Request to modify Call External Emergency Routing system parameters.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemFeatureAccessCodeGetListRequest

Request to get list of default Feature Access Codes defined on system level.
The response is either C<SystemFeatureAccessCodeGetListResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemFeatureAccessCodeModifyListRequest

Modify default Feature Access Codes.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemFileGetContentRequest

Requests the contents of a file.
 The response is either a
C<SystemFileGetContentResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item fileName

=back

Additionally there are generic tagged parameters.

=head3 SystemFileRepositoryDeviceAddRequest16

Add a new file repository.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemFileRepositoryDeviceDeleteRequest

Delete a file repository.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemFileRepositoryDeviceModifyRequest

Modify a file repository.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemFileRepositoryDeviceGetRequest16

Request to get the file repository information.  The response is either
C<SystemFileRepositoryDeviceGetResponse16> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemFileRepositoryDeviceGetListRequest

Request the list of file repositories in the system.
 The response is either a
C<SystemFileRepositoryDeviceGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemFileRepositoryDeviceUserAddRequest

Add a new file repository user.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item fileRepositoryName

=item userName

=item password

=item allowPut

=item allowDelete

=item allowGet

=back

Additionally there are generic tagged parameters.

=head3 SystemFileRepositoryDeviceUserDeleteRequest

Delete a file repository user.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item fileRepositoryName

=item userName

=back

Additionally there are generic tagged parameters.

=head3 SystemFileRepositoryDeviceUserModifyRequest

Modify a file repository user.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item fileRepositoryName

=item userName

=back

Additionally there are generic tagged parameters.

=head3 SystemFileRepositoryDeviceUserGetRequest

Request a user of a file repository in the system.
 The response is either a
C<SystemFileRepositoryDeviceUserGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item fileRepositoryName

=item userName

=back

Additionally there are generic tagged parameters.

=head3 SystemFileRepositoryDeviceUserGetListRequest

Request the list of users for a file repository in the system.
 The response is
either a C<SystemFileRepositoryDeviceUserGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item fileRepositoryName

=back

Additionally there are generic tagged parameters.

=head3 SystemGetRegistrationContactListRequest

Get the list of registration contacts.
 This request handles all levels of
administration privileges.  The content of the response will only contain items
within the scope of the requester's login id.  At the system level any of the
choice parameters may be specified to filter the registrations listed.  At the
service provider level the C<serviceProviderId> must be specified for the
service provider and group options.  When using the userId or C<linePort>
options the specified value must be valid for that service provider login.  At
the group level the C<servicProviderId> and the groupId must be specified for
the group option. When using the userId or C<linePort> options the specified
value must be valid for that group login.  The C<serviceProviderId> option is
not valid at the group level.  At the user level when using the userId or
C<linePort> options the specified value must be valid for that user login.  The
C<serviceProviderId> and groupId options are not valid at the user level.
 The
response is either C<SystemGetRegistrationContactListResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemHomeNetworkAddRequest

Add a Home Network.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item mscAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemHomeNetworkDeleteRequest

Delete a Home Network.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item mscAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemHomeNetworkGetListRequest

Get the list of all Home Networks.
 The response is either a
C<SystemHomeNetworkGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemLanguageAddRequest

Request to add a language to the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item language

=item locale

=item encoding

=back

Additionally there are generic tagged parameters.

=head3 SystemLanguageDeleteRequest

Request to delete a language from the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item language

=back

Additionally there are generic tagged parameters.

=head3 SystemLanguageGetListRequest

Request the defined languages in the system.
 The response is either a
C<SystemLanguageGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemLanguageModifyRequest

Request to modify a language properties in the system.
 If the
C<becomeDefaultLanguage> element is present, the language in this request
becomes
 the default language for the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item language

=back

Additionally there are generic tagged parameters.

=head3 SystemLicensingGetRequest14sp3

Get all the licensing information.
 The response is either
C<SystemLicensingGetResponse14sp3> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemLicensingGetSystemLicenseListRequest

Request to get the list of system licenses in the system.
 The response is
either a C<SystemLicensingGetSystemLicenseListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemLicensingReloadRequest

Load a new license file.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemLogConfigModifyRequest

Modify the log configuration file.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMailParametersGetRequest

Request to get the list of Mail system parameters.
 The response is either
C<SystemMailParametersGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMailParametersModifyRequest

Request to modify Mail system parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMediaAddRequest16

Request to add a Media to the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item mediaName

=item codecName

=item mediaType

=item bandwidthEnforcementType

=back

Additionally there are generic tagged parameters.

=head3 SystemMediaDeleteRequest

Request to delete a Media from the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item mediaName

=back

Additionally there are generic tagged parameters.

=head3 SystemMediaGetListRequest

Request to get a list of media in the system.
 The response is either a
C<SystemMediaGetListResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMediaModifyRequest

Request to modify a media.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item mediaName

=back

Additionally there are generic tagged parameters.

=head3 SystemMediaServerAddRequest14

Request to add a Media Server to the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemMediaServerDeleteRequest

Request to delete a Media Server from the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemMediaServerGetListRequest

Request to get a list of Media Servers defined in the system.
 The response is
either a C<SystemMediaServerGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMediaServerModifyRequest

Request to modify a Media Server in the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemMediaServerParametersGetRequest

Request to get the list of Media Server system parameters.
 The response is
either C<SystemMediaServerParametersGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMediaServerParametersModifyRequest

Request to modify Media Server system parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMediaSetAddRequest

Request to add a Media Set.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item setName

=back

Additionally there are generic tagged parameters.

=head3 SystemMediaSetDeleteRequest

Request to delete a Media Set.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item setName

=back

Additionally there are generic tagged parameters.

=head3 SystemMediaSetGetListRequest

Request to get the list of Media Sets in the system.
 The response is either a
C<SystemMediaSetGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMediaSetGetRequest

Request to get a Media Set.
 The response is either a
C<SystemMediaSetGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item setName

=back

Additionally there are generic tagged parameters.

=head3 SystemMediaSetModifyRequest

Request to modify a Media Set.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item setName

=back

Additionally there are generic tagged parameters.

=head3 SystemMGCPDeviceTypeGetListRequest

Request to get the list of mgcp device types in the system.
 See Also:
C<SystemDeviceTypeGetAvailableListRequest>.
 The response is either
C<SystemMGCPDeviceTypeGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMGCPDeviceTypeGetRequest

Request to get a mgcp device type.
 See Also: C<SystemDeviceTypeGetRequest>
The response is either C<SystemMGCPDeviceTypeGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemMGCPDeviceTypeModifyRequest

Request to modify a mgcp device type. In release 14, this is limited to
changing the obsolete flag.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemMigratedUsersGetListRequest

Get a list of migrated users.
 The response is either
C<SystemLicensingGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMultimediaPolicyGetRequest

Request the system level data associated with Multimedia Policy.
 The response
is either a C<SystemMultimediaPolicyGetResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMultimediaPolicyModifyRequest

Modify the system level data associated with Multimedia Policy.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemNetworkClassOfServiceAddRequest

Add a new Network Class of Service.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemNetworkClassOfServiceDeleteRequest

Delete a Network Class of Service.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemNetworkClassOfServiceGetRequest17

Get an existing Network Class of Service.
 The response is either a
C<SystemNetworkClassOfServiceGetResponse17>
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemNetworkClassOfServiceGetAssignedServiceProviderListRequest

Request a list of service providers that have a given Network Class
 of Service
assigned.
 The response is either a
C<SystemNetworkClassOfServiceGetAssignedServiceProviderListResponse> or 
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemNetworkClassOfServiceGetCommunicationBarringProfileUsageListRequest

Get the list of Network Classes of Service that contain a specific
Communication Barring Profile.
 The response is either a
C<SystemNetworkClassOfServiceGetCommunicationBarringProfileUsageListResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemNetworkClassOfServiceGetListRequest

Get the list of all Network Classes of Service.
 The response is either a
C<SystemNetworkClassOfServiceGetListResponse> 
 or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemNetworkClassOfServiceModifyRequest

Modify an existing Network Class of Service.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemNetworkDeviceMonitorParametersGetRequest

Request to get the list of Network Device Polling system parameters.
 The
response is either C<SystemNetworkDeviceMonitorParametersGetResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemNetworkDeviceMonitorParametersModifyRequest

Request to modify Network Device Polling system parameters.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemNetworkProgressionGetRequest

Request the system level data associated with network progression.
 The
response is either a C<SystemNetworkProgressionGetResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemNetworkProgressionModifyRequest

Modify the system level data associated with network progression.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemNetworkRoutingServerAddRequest

Request to add a routing Network Server to the system.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemNetworkRoutingServerDeleteRequest

Request to delete a routing Network Server from the system.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemNetworkRoutingServerGetListRequest

Request to get a list of routing Network Servers defined in the system.
 The
response is either a C<SystemNetworkRoutingServerGetListResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemNetworkRoutingServerModifyRequest

Request to modify a routing Network Server in the system.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemNetworkServerSyncParametersGetRequest17sp4

Request to get the list of Network Server Sync system parameters.
 The response
is either C<SystemNetworkServerSyncParametersGetResponse17sp4> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemNetworkServerSyncParametersModifyRequest

Request to modify Network Server Sync system parameters.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.
 The following elements are only
used in AS data mode:
 C<syncTrunkGroups>

Additionally there are generic tagged parameters.

=head3 SystemNetworkSynchingServerAddRequest

Request to add a Network Server to the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemNetworkSynchingServerDeleteRequest

Request to delete a Network Server from the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemNetworkSynchingServerGetListRequest

Request to get a list of Network Servers defined in the system.
 The response
is either a C<SystemNetworkSynchingServerGetListResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemNetworkSynchingServerModifyRequest

Request to modify a Network Server in the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemNumberActivationGetRequest

Request to get the Number Activation state.
 The response is either
C<SystemNumberActivationGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemNumberActivationModifyRequest

Request to modify system number activation setting.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemOCIAddACLEntryRequest

Add an entry to the OCI access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCIDeleteACLEntryRequest

Delete an entry from the OCI access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCIGetACLListRequest

Get the OCI access control list.
 The response is either
C<SystemOCIGetACLListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemOCIModifyACLEntryRequest

Modify an entry in the OCI access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlAddACLEntryRequest

Add an entry to the OCI call control access control list.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlDeleteACLEntryRequest

Delete an entry from the OCI call control access control list.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlGetACLListRequest

Get the OCI call control access control list.
 The response is either
C<SystemOCICallControlGetACLListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlModifyACLEntryRequest

Modify an entry from the call control access control list.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlApplicationAddRequest17

Add an application to the OCI call control application list.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item applicationId

=item enableSystemWide

=item notificationTimeoutSeconds

=back

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlApplicationDeleteRequest

Delete an entry from the OCI call control application list.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item applicationId

=back

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlApplicationGetListRequest

Get the OCI call control application list.
 The response is either
C<SystemOCICallControlApplicationGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlApplicationModifyRequest

Modify an application from the OCI call control application list.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item applicationId

=back

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlApplicationAddACLEntryRequest

Add an entry to the OCI call control application access control list.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item applicationId

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlApplicationDeleteACLEntryRequest

Delete an entry from the OCI call control application access control list.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item applicationId

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlApplicationGetACLListRequest

Get the OCI call control access control list.
 The response is either
C<SystemOCICallControlApplicationGetACLListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item applicationId

=back

Additionally there are generic tagged parameters.

=head3 SystemOCICallControlApplicationModifyACLEntryRequest

Modify an entry from the call control access control list.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item applicationId

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCIReportingAddACLEntryRequest13mp9

Add an entry to the OCI Reporting Access Control List.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCIReportingAddMessageNameListRequest

Add a list of reported messages for a host in the OCI Reporting
 Access Control
List. The response is either a C<SuccessResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=item messageNameStartsWith

=back

Additionally there are generic tagged parameters.

=head3 SystemOCIReportingDeleteACLEntryRequest

Delete an entry from the OCI Reporting Access Control List.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCIReportingDeleteMessageNameListRequest

Delete a list of reported messages from a host in the OCI Reporting
 Access
Control List. The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCIReportingGetACLListRequest

Get the OCI Reporting Access Control List.
 The response is either a
C<SystemOCIReportingACLListGetResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemOCIReportingGetMessageNameListRequest

Get a list of restricted messages from a host in the OCI Reporting
 Access
Control List. The response is either a
C<SystemOCIReportingGetMessageNameListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCIReportingModifyACLEntryRequest

Modify the description on an entry in the OCI Reporting Access Control List.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemOCIReportingParametersGetRequest14sp1

Request to get the list of C<OCIReporting> system parameters.
 The response is
either C<SystemOCIReportingParametersGetResponse14sp1> or
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemOCIReportingParametersModifyRequest

Request to modify OCI Reporting system parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemOfficeZoneAddRequest

Add a new Office Zone.  The C<zoneList> is an ordered list with the first
member being of the highest priority. 
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item officeZoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemOfficeZoneDeleteRequest

Delete an Office Zone.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item officeZoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemOfficeZoneGetRequest

Get an existing Office Zone.
 The response is either a
C<SystemOfficeZoneGetResponse>
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item officeZoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemOfficeZoneGetAssignedServiceProviderListRequest

Request a list of service providers that have a given Office Zone assigned. 
The response is either a
C<SystemOfficeZoneGetAssignedServiceProviderListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item officeZoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemOfficeZoneGetListRequest

Get the list of all Office Zones.
 The response is either a
C<SystemOfficeZoneGetListResponse> 
 or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemOfficeZoneGetZoneUsageListRequest

Get the list of Office Zones that contain a specific
 Zone.
 The response is
either a C<SystemOfficeZoneGetZoneUsageListResponse>
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item zoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemOfficeZoneModifyRequest

Modify an existing Office Zone.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item officeZoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemPasswordRulesGetRequest16

Requests the system's password rules setting applicable to
 System
administrator, Provisioning Administrator,
 and/or Service Provider
Administrator, Group Administrator, Department Administrator, user.
 The
response is either C<SystemPasswordRulesGetResponse16> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemPasswordRulesModifyRequest14sp3

Request to modify the system providers password rule
 setting applicable to
System Adminstrator, Provisioning Administrator,
 and/or Service Provider
Administrator, Group Administrator, Department Administrator, User.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemPerformanceMeasurementReportingAddFileServerRequest

Add a performance measurements reporting ftp server.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item ftpHostNetAddress

=item ftpUserId

=item ftpUserPassword

=back

Additionally there are generic tagged parameters.

=head3 SystemPerformanceMeasurementReportingDeleteFileServerRequest

Delete a performance measurements reporting ftp server.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item ftpHostNetAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemPerformanceMeasurementGenerateReportRequest

Generate a performance measurements report.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemPerformanceMeasurementReportingGetFileServerListRequest

Requests the list performance measurements reporting ftp servers.
 The response
is either C<SystemPerformanceMeasurementReportingGetFileServerListResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemPerformanceMeasurementReportingGetRequest

Requests the performance measurements reporting settings.
 The response is
either C<SystemPerformanceMeasurementReportingGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemPerformanceMeasurementReportingModifyFileServerRequest

Modify a performance measurements reporting ftp server.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item ftpHostNetAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemPerformanceMeasurementReportingModifyRequest

Modify the performance measurements reporting settings.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemPolicyGetDefaultRequest17sp3

Requests the system's default policy settings.
 The response is either
C<SystemPolicyGetDefaultResponse17sp3> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemPolicyModifyDefaultRequest14

Request to modify the system's default policy settings.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.
 The following elements are only used
in AS data mode:
 C<GroupAdminDialableCallerIDAccess>
C<ServiceProviderAdminDialableCallerIDAccess>
 The following elements are only
used in HSS data mode:
 C<serviceProviderAdminCommunicationBarringAccess>

Additionally there are generic tagged parameters.

=head3 SystemPortalAPIAddACLEntryRequest

Add an entry to the Portal API access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemPortalAPIDeleteACLEntryRequest

Delete an entry from the Portal API access control list.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemPortalAPIGetACLListRequest

Get the Portal API access control list.
 The response is either
C<SystemPortalAPIGetACLListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemPortalAPIModifyACLEntryRequest

Modify an entry within the Portal API access control list.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemPortalPasscodeRulesGetRequest

Requests the system passcode rules setting.
 The response is either
C<SystemPortalPasscodeRulesGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemPortalPasscodeRulesModifyRequest

Request to modify the system passcode rules setting.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemProvisioningValidationGetRequest14sp2

Request to get the system's provisioning validation attributes.
 The response
is either a C<SystemProvisioningValidationGetResponse14sp2> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemProvisioningValidationModifyRequest

Request to modify the system's provisioning validation attributes.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemRedundancyParametersGetRequest16sp2

Request to get the list of Redundancy system parameters.
 The response is
either C<SystemRedundancyParametersGetResponse16sp2> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemRedundancyParametersModifyRequest

Request to modify Redundancy system parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemRoamingNetworkAddRequest

Add a Roaming Network.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item mscAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemRoamingNetworkDeleteRequest

Delete a Roaming Network.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item mscAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemRoamingNetworkGetListRequest

Get the list of all Roaming Networks.
 The response is either a
C<SystemRoamingNetworkGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemRoamingNetworkModifyRequest

Modify a Roaming Network.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item mscAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutePointExternalSystemAddRequest

Add an Route Point External System, which is a cluster of Application 
Controllers.     
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutePointExternalSystemDeleteRequest

Delete an Route Point External System.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutePointExternalSystemGetListRequest

Get a list of Route Point External Systems that are configured for the system.
The response is either C<SystemRoutePointExternalSystemGetListResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemRoutePointExternalSystemModifyRequest

Modify an Route Point External System.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutePointExternalSystemGetRoutePointListRequest

Get a list of Route Points that are using the specified Route Point External
System.  
 The response is either a
C<SystemRoutePointExternalSystemGetRoutePointListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item routePointExternalSystem

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutePointExternalSystemApplicationControllerAddListRequest

Add an application controller to Route Point External System.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutePointExternalSystemApplicationControllerDeleteListRequest

Delete an application controller for Route Point External System.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutePointExternalSystemApplicationControllerGetRequest

Get a list of Application Controllers assigned to the Route Point External
Systems specified.
 The response is either
C<SystemRoutePointExternalSystemApplicationControllerGetResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item externalSystem

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutingAddRouteDeviceRequest14

Request to add a routing device to a route.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item routeName

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutingAddRouteRequest

Request to add a route to the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item routeName

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutingAddTranslationRequest

Request to add a digit routing table entry to the system.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item digits

=item routeName

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutingDeleteRouteDeviceRequest

Request to delete a routing device from a route.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item routeName

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutingDeleteRouteRequest

Request to delete a route from the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item routeName

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutingDeleteTranslationRequest

Request to delete a digit routing table entry from the system.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item digits

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutingGetRequest

Request the system's general routing attributes.
 The response is either a
C<SystemRoutingGetResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemRoutingGetRouteDeviceListRequest

Request to get a list of devices for a route.
 The response is either a
C<SystemRoutingGetRouteDeviceListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item routeName

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutingGetRouteListRequest

Request to get a list of routes in the system.
 The response is either a
C<SystemRoutingGetRouteListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemRoutingGetTranslationListRequest

Request to get the system digit routing table.
 The response is either a
C<SystemRoutingGetTranslationListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemRoutingModifyRequest

Modifies the system's general routing attributes.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemRoutingModifyRouteDeviceRequest

Request to modify a routing device.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item routeName

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutingModifyTranslationRequest

Request to modify a digit routing table entry in the system.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item digits

=back

Additionally there are generic tagged parameters.

=head3 SystemRoutingProfileGetListRequest

Request to get the list of system routing profiles.
 The response is either a
C<SystemRoutingProfileGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemScheduleAddEventRequest

Add an event to system schedule.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item scheduleKey

=item eventName

=item startDate

=item endDate

=back

Additionally there are generic tagged parameters.

=head3 SystemScheduleAddRequest

Add a system schedule.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item scheduleName

=item scheduleType

=back

Additionally there are generic tagged parameters.

=head3 SystemScheduleDeleteEventListRequest

Delete a list of events from a system schedule.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 SystemScheduleDeleteListRequest

Delete a list of system schedule.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 SystemScheduleGetEventListRequest

Get the list of events of a system schedule.
 The response is either a
C<SystemScheduleGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 SystemScheduleGetEventRequest

Get an event from a system schedule.
 The response is either a
C<SystemScheduleGetEventResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 SystemScheduleGetListRequest

Get the list of a system schedules. The list can be filtered by schedule type.
The response is either a C<SystemScheduleGetListResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemScheduleModifyEventRequest

Modify an event of a system schedule.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 SystemScheduleModifyRequest

Modify a system schedule.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 SystemServerAddressesGetRequest

Request to get the list of Server Addresses.
 The response is either
C<SystemServerAddressesGetResponse> or C<ErrorResponse>.
 See also:
C<PrimaryInfoGetRequest>
 C<PublicClusterGetFullyQualifiedDomainNameRequest>

Additionally there are generic tagged parameters.

=head3 SystemServerAddressesModifyRequest

Request to modify Server Addresses.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemServiceActivationAccessCodeGetRequest

Get the Service Activation Access Code system parameters.
 The response is
either a C<SystemServiceActivationAccessCodeGetResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemServiceActivationAccessCodeModifyRequest

Request to modify Service Activation Access Code system parameters.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemServiceCodeAddRequest

Request to add a service code for the purpose of providing free format routable
strings for dialing
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceCode

=item description

=back

Additionally there are generic tagged parameters.

=head3 SystemServiceCodeDeleteRequest

Request to delete a service code for the purpose of providing free format
routable strings for dialing
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceCode

=back

Additionally there are generic tagged parameters.

=head3 SystemServiceCodeGetListRequest

Request to get all service codes that have been defined in the system.
 It is
possible to search by various criteria to restrict the number of rows returned.
 Multiple search criteria are logically C<ANDed> together.
 The response is
either C<SystemServiceCodeGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemServiceCodeModifyRequest

Request to modify service code.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceCode

=back

Additionally there are generic tagged parameters.

=head3 SystemServiceControlParametersGetRequest

Request to get the list of Service Control system parameters.
 The response is
either C<SystemServiceControlParametersGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemServiceControlParametersModifyRequest

Request to modify Service Control system parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSessionAuditGetRequest17sp3

Request the system level data associated with session audit.
 The response is
either a C<SystemSessionAuditGetResponse17sp3> or
 an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSessionAuditModifyRequest14sp3

Modify the system level data associated with session audit.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemShInterfaceParametersGetRequest17

Retrieves the Sh Interface system parameters.
 The response is either a
C<SystemShInterfaceParametersGetResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemShInterfaceParametersModifyRequest17

Modifies the Sh Interface system parameters.  This request must be submitted on
both nodes in the redundant Application Server cluster in order for the changes
to take effect on each node without requiring a restart.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemShInterfaceRefreshTaskStartRequest

Dispatches the system refresh task on the local Application Server node.  At
most one instance of the system refresh task may run on an Application Server
node at a given point in time.  If the system refresh task is already running
when this request is made, an C<ErrorResponse> is returned.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemShInterfaceRefreshTaskGetRequest

Retrieves the status of the system refresh task on the local Application Server
node.
 The response is either a C<SystemShInterfaceRefreshTaskGetResponse> or
an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemShInterfaceRefreshTaskTerminateRequest

Terminates the system refresh task in progress on the local Application Server
node.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSIPAddACLEntryRequest14sp2

Add an entry to the SIP access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=item transportProtocol

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPAddContentTypeRequest

Add a content type for the SIP interface.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item contentType

=item interface

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeleteACLEntryRequest14sp2

Delete an entry from the SIP access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeleteContentTypeRequest

Delete a content type for the SIP interface.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item contentType

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeAddRequest17sp4

Request to add a sip device type.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=item numberOfPorts

=item profile

=item registrationCapable

=item isConferenceDevice

=item isMobilityManagerDevice

=item isMusicOnHoldDevice

=item RFC3264Hold

=item isTrusted

=item E164Capable

=item routeAdvance

=item forwardingOverride

=item wirelessIntegration

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeFileAddRequest16sp1

Request to add a sip device type file.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=item fileFormat

=item remoteFileFormat

=item fileCategory

=item fileCustomization

=item fileSource

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeDeleteRequest

Request to delete a sip device type.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeGetListRequest

Request to get the list of sip device types in the system.
 See Also:
C<SystemDeviceTypeGetAvailableListRequest>.
 The response is either
C<SystemSIPDeviceTypeGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeGetRequest17sp4

Request to get a sip device type.
 See Also: C<SystemDeviceTypeGetRequest>
 The
response is either C<SystemSIPDeviceTypeGetResponse17sp4> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeModifyRequest17

Request to modify a sip device type.
 The following elements are not
changeable:
 C<numberOfPorts>
 C<SignalingAddressType>
 C<isConferenceDevice>
C<isMusicOnHoldDevice>
 C<isMobilityManagerDevice>
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPGetACLListRequest

Get the SIP access control list.
 The response is either
C<SystemSIPGetACLListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSIPGetContentTypeListRequest

Get the content type list for the SIP interface.
 The response is either
C<SystemSIPGetContentTypeListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSIPModifyACLEntryRequest14sp2

Modify an entry from the SIP access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPModifyContentTypeRequest

Modify an content type for the SIP interface.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item contentType

=back

Additionally there are generic tagged parameters.

=head3 SystemSMDIAddACLEntryRequest14sp2

Add an entry to the SMDI access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemSMDIDeleteACLEntryRequest14sp2

Delete an entry from the SMDI access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemSMDIGetACLListRequest

Get the SMDI access control list.
 The response is either
C<SystemSMDIGetACLListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSMDIModifyACLEntryRequest14sp2

Modify an entry from the SMDI access control list.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemSMDIParametersGetRequest

Request to get the list of SMDI system parameters.
 The response is either
C<SystemSMDIParametersGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSMDIParametersModifyRequest

Request to modify SMDI system parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSMPPGetRequest14sp5

Request the system level data associated with SMPP external interface.
 The
response is either a C<SystemSMPPGetResponse14sp5> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSMPPModifyRequest

Request to modify the system level data associated with the SMPP external
interface.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSoftwareVersionGetRequest

Requests the software version of the Application Server.
 The response is
either C<SystemSoftwareVersionGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemStateOrProvinceGetListRequest

Requests the list of state and province names.
 The response is either
C<SystemStateOrProvinceGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSubscriberGetLoginParametersRequest

Get the system login configuration for all subscribers.
 The response is either
a C<SystemSubscriberGetLoginParametersResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSubscriberModifyLoginParametersRequest

Modify the system login configuration for all subscribers
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSubscriberModifyCallProcessingParametersRequest14sp7

Modify the system call processing configuration for all subscribers.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSubscriberGetCallProcessingParametersRequest17sp4

Get the system call processing configuration for all subscribers
 The response
is either a C<SystemSubscriberGetCallProcessingParametersResponse17sp4>
 or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemTimeZoneGetListRequest

Requests the list of time zone names.
 The response is either
C<SystemTimeZoneGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeLanguageMappingModifyRequest

Request to modify the device language name that is mapped to a C<BroadWorks>
language name. The request can be used to map many languages.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeLanguageMappingGetListRequest

Request to get the list of device language names mapped to C<BroadWorks>
language names, per-device type.
 The response is either
C<SystemSIPDeviceTypeLanguageMappingGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeFileDeleteRequest14sp8

Request to delete a sip device type file.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeFileModifyRequest16sp1

Request to modify a sip device type file.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeFileGetListRequest14sp8

Request to get the list of device files managed by the Device Management
System, on a per-device type basis.
 The response is either
C<SystemSIPDeviceTypeFileGetListResponse14sp8> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeFileGetRequest16sp1

Request to get a sip device type file.
 The response is either
C<SystemSIPDeviceTypeFileGetResponse16sp1> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeServiceModifyRequest

Request to set the level of integration that a device type has in relation to
C<BroadWorks> services.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemSIPDeviceTypeServiceGetRequest

Request to get the list of C<BroadWorks> services that can be integrated to a
device type and the level of integration for this device type.
 The response is
either C<SystemSIPDeviceTypeServiceGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceType

=back

Additionally there are generic tagged parameters.

=head3 SystemZoneAddRequest

Add a Zone and optional Net Addresses and Physical Locations.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item zoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemZoneDeleteRequest

Delete a Zone.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item zoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemZoneGetListRequest

Get the list of all Zones.
 The response is either a
C<SystemZoneGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemZoneCallingZonePhysicalLocationGetRequest

Returns a zone calling physical location for a given zone.
 Response is
C<SystemZoneCallingZonePhysicalLocationGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item zoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemZoneCallingZonePhysicalLocationModifyRequest

Modifies a zone calling physical location for a given zone.
 Response is a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item zoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemZoneLocationBasedPhysicalLocationAddListRequest

Adds a list of physical locations to a zone
 The response is C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item zoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemZoneLocationBasedPhysicalLocationDeleteListRequest

Deletes a list of physical addresses from a zone
 The response is
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item zoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemZoneLocationBasedPhysicalLocationGetListRequest

Gets a list of physical locations assigned to a zone.
 Response is
C<SystemZoneLocationBasedPhysicalLocationGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item zoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemZoneNetAddressAddListRequest

Adds a list of IP addresses to a zone
 The response is C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item zoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemZoneNetAddressDeleteListRequest

Deletes a list of IP addresses from a zone
 The response is C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item zoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemZoneNetAddressGetListRequest

Gets a list of IP Addresses and/or Ranges assigned to a zone.
 Response is
C<SystemZoneNetAddressGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item zoneName

=back

Additionally there are generic tagged parameters.

=head3 SystemSelectiveServicesGetRequest

Request the system level data associated with Selective Services.
 The response
is either a C<SystemSelectiveServicesGetResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSelectiveServicesModifyRequest

Modify the system level data associated with C<SystemSelectiveServicesRequest>.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserAccessDeviceFileGetListRequest

Request to get the list of Device Management user modifiable files.
 The
response is either C<UserAccessDeviceFileGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item accessDevice

=back

Additionally there are generic tagged parameters.

=head3 UserAccessDeviceFileGetRequest

Request to get a user modifiable file.
 The response is either
C<UserAccessDeviceFileGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item accessDevice

=item fileFormat

=back

Additionally there are generic tagged parameters.

=head3 UserAccessDeviceFileModifyRequest

Request to modify a user modifiable access device file.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item accessDevice

=item fileFormat

=item uploadFile

=back

Additionally there are generic tagged parameters.

=head3 UserAccessDeviceResetRequest

Reset a specific user SIP device that supports the reset operation.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item accessDevice

=back

Additionally there are generic tagged parameters.

=head3 UserAccessDeviceTagsGetRequest

Request to get all the device tag names and values for a specific device. The
resolved tags are returned only if the device is the main device for this user.
 The response is either a C<UserAccessDeviceTagsGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item accessDevice

=back

Additionally there are generic tagged parameters.

=head3 UserAddRequest17sp4

Request to add a user.
 The domain is required in the userId.
 The password is
not required if external authentication is enabled.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item userId

=item lastName

=item firstName

=item callingLineIdLastName

=item callingLineIdFirstName

=back

Additionally there are generic tagged parameters.

=head3 UserAssignedServicesGetListRequest

Get the list of assigned User and Group Services for the specified user.
 The
response is either an C<UserAssignedServicesGetListResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserDeleteRequest

Request to delete a user.  The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserDnGetActivationListRequest

Request to get a list of DNs associated with a user and their activation state.
 The response is either C<UserDnGetActivationListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserGetRequest17sp4

Request to get the user information.  The response is either 
C<UserGetResponse17sp4> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserGetRegistrationListRequest

Request to get a list of registrations for a user.
 The response is either a
C<UserGetRegistrationListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserModifyRequest17sp4

Request to modify a user. 
 When C<oldPassword> is specified, all password rule
applies. If C<oldPassword> in not specified,
 any password rule related to old
password does not apply.         
 The request will fail if C<officeZoneName>
or C<primaryZoneName> is present but the Location-Based Calling Restrictions
service is not assigned to the user.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.
 The following data elements are only used in AS data
mode:
 contact[2]-contact[5]

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallLogsClearRequest14sp4

Clear a user's call logs associated with Basic Call Logs and Enhanced
 Call
Logs features. The calls logs are deleted from both Basic Call Logs 
 and
Enhanced Call Logs if both features are assigned.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallPoliciesGetRequest17

Request the user level data associated with Call Policies.
 The response is
either a C<UserCallPoliciesGetResponse17>
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallPoliciesModifyRequest

Modify the user level data associated with Call Policies.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallProcessingGetPolicyRequest17sp4

Request the user level data associated with Call Processing Policy.
 The
response is either a C<UserCallProcessingGetPolicyResponse17sp4> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallProcessingModifyPolicyRequest14sp7

Modify the user level data associated with Call Procesing Policy.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.
 The
C<useUserCLIDSetting> attribute controls the CLID settings 
 (C<clidPolicy>,
C<emergencyClidPolicy>, C<allowAlternateNumbersForRedirectingIdentity>,
C<useGroupName>, C<allowConfigurableCLIDForRedirectingIdentity>)
 The
C<useUserMediaSetting> attribute controls the Media settings 
(C<medisPolicySelection>, C<supportedMediaSetName>)
 The
C<useUserCallLimitsSetting> attribute controls the Call Limits setting 
(C<useMaxSimultaneousCalls>, C<maxSimultaneousCalls>,
C<useMaxSimultaneousVideoCalls>, C<maxSimultaneousVideoCalls>,
C<useMaxCallTimeForAnsweredCalls>, C<maxCallTimeForAnsweredCallsMinutes>,
C<useMaxCallTimeForUnansweredCalls>, C<maxCallTimeForUnansweredCallsMinutes>,
C<useMaxConcurrentRedirectedCalls>, C<useMaxFindMeFollowMeDepth>,
C<maxRedirectionDepth>, C<useMaxConcurrentFindMeFollowMeInvocations>,
C<maxConcurrentFindMeFollowMeInvocations>)
 The C<useUserDCLIDSetting> controls
the Dialable Caller ID settings (C<enableDialableCallerID>)
 The following
elements are only used in AS data mode:
 C<useUserDCLIDSetting>
C<enableDialableCallerID>
 C<allowConfigurableCLIDForRedirectingIdentity>

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCommunicationBarringAuthorizationCodeAddListRequest

Add a list of Communication Barring Authorization codes to a user.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCommunicationBarringAuthorizationCodeDeleteListRequest

Delete a list of Communication Barring Authorization codes from a user.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCommunicationBarringAuthorizationCodeGetListRequest

Get a list of Communication Barring Authorization Code for a user.
 The
response is either a
C<UserCommunicationBarringAuthorizationCodeGetListResponse> 
 or an
C<ErorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserFeatureAccessCodeGetListRequest

Get the list of feature access codes for a user.
 The response is either a
C<UserFeatureAccessCodeGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserGetListInGroupRequest

Request the list of users in a group.
 It is possible to search by various
criteria to restrict the number of rows returned.
 Multiple search criteria are
logically C<ANDed> together.
 The response is either a
C<UserGetListInGroupResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item GroupId

=back

Additionally there are generic tagged parameters.

=head3 UserGetListInServiceProviderRequest

Request the list of users in a service provider or enterprise.
 It is possible
to search by various criteria to restrict the number of rows returned.
Multiple search criteria are logically C<ANDed> together.
 The response is
either a C<UserGetListInServiceProviderResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 UserGetListInSystemRequest

Request the list of users in the system.
 It is possible to search by various
criteria to restrict the number of rows returned.
 Multiple search criteria are
logically C<ANDed> together.
 The response is either a
C<UserGetListInSystemResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserGetServiceInstanceListInServiceProviderRequest

Request the list of Service Instances in a service provider or an enterprise.
It is possible to search by various criteria to restrict the number of rows
returned.
 Multiple search criteria are logically C<ANDed> together.
C<searchCriteriaExactUserDepartment> criteria is only applicable for an
enterprise and is ignored if set for a service provider. 
 The response is
either a C<UserGetServiceInstanceListInServiceProviderResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 UserGetServiceInstanceListInSystemRequest

Request the list of Service Instances in the system.
 It is possible to search
by various criteria to restrict the number of rows returned.
 Multiple search
criteria are logically C<ANDed> together.
 The response is either a
C<UserGetServiceInstanceListInSystemResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserLinePortGetListRequest

Request to get all user's configured line ports.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserModifyUserIdRequest

Modify the user id of a real or virtual user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item newUserId

=back

Additionally there are generic tagged parameters.

=head3 UserNetworkConferencingGetRequest

Request the Network-Based Conferencing data for a specified user.
 The response
is either a C<UserNetworkConferencingGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOCICallControlApplicationGetListRequest

Get the OCI call control application list that can be used by the user.
 The
response is either C<UserOCICallControlApplicationGetListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOCICallControlApplicationModifyRequest

Modify which OCI Call Control Applications are enabled on a user
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPasswordInfoGetRequest

Request the user's Web password information.
 The response is either a
C<UserPasswordInfoGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPersonalPhoneListAddListRequest

Add one or more entries to a user's personal phone list.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item entry

=back

Additionally there are generic tagged parameters.

=head3 UserPersonalPhoneListDeleteListRequest

Delete one or more entries from a user's personal phone list.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item entryName

=back

Additionally there are generic tagged parameters.

=head3 UserPersonalPhoneListGetListRequest

Get a user's personal phone list.
 The response is either a
C<UserPersonalPhoneListGetListResponse> or an C<ErrorResponse>.
 The search can
be done using multiple criterion.
 If the C<searchCriteriaModeOr> is present,
any result matching any one criteria is included in the results. 
 Otherwise,
only results matching all the search criterion are included in the results. 
If no search criteria is specified, all results are returned.
 Specifying
C<searchCriteriaModeOr> without any search criteria results in an
C<ErrorResponse>.
 In all cases, if a C<responseSizeLimit> is specified and the
number of matching results is more than this limit, then an
 C<ErrorResponse>
is returned.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPersonalPhoneListModifyRequest

Modify an entry in a user's personal phone list.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item entryName

=back

Additionally there are generic tagged parameters.

=head3 UserPhoneDirectoryGetListRequest

Request a table containing the phone directory for a user's group.
 If the
user's group is part of an enterprise, the directory includes all users in the
enterprise
 and all entries in the enterprise common phone list and the common
phone list of the specified
 group  (if C<includeCommonPhoneList> is set to
true).
 If the user's group is part of a service provider, the directory
includes all users in the group
 and all entries in the common phone list (if
C<includeCommonPhoneList> is set to true) of the
 specified group.
 The
response is either C<UserPhoneDirectoryGetListResponse> or C<ErrorResponse>.
If the C<searchCriteriaModeOr> is present, any result matching any one criteria
is included in the results. Otherwise, only
 results matching all the search
criterias are included in the results. 
 If no search criteria is specified,
all results are returned.
 In all cases, if a C<responseSizeLimit> is specified
and the number of matching results is more than this limit, then an
C<ErrorResponse> is returned.
 Specifying C<searchCriteriaModeOr> without any
search criteria results in an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item includeCommonPhoneList

=back

Additionally there are generic tagged parameters.

=head3 UserPhoneDirectoryGetPagedListRequest

Request a table containing the phone directory for a user.  
 Setting
C<isEnterpriseRequested> to true will return enterprise directory
 members in
the response if the user is in an enterprise. Otherwise,
 just the group
directory members for a user are returned in the 
 response.
 The response is
either C<UserPhoneDirectoryGetPagedListResponse> or 
 C<ErrorResponse>.
 The
search can be done using multiple criterias.
 If the C<searchCriteriaModeOr> is
present, any result matching any one criteria is included in the results.
Otherwise, only
 results matching all the search criterias are included in the
results.
 If no search criteria is specified, all results are returned.
 In all
cases, if a C<responseSizeLimit> is specified and the number of matching
results is more than this limit, then an
 C<ErrorResponse> is returned.
Specifying C<searchCriteriaModeOr> without any search criteria results in an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item isEnterpriseInfoRequested

=item responsePagingControl

=back

Additionally there are generic tagged parameters.

=head3 UserPhoneDirectoryGetSearchedListRequest

Request a table containing the phone directory for a user.
 If the specified
user is part of an enterprise, the directory includes all users in the
enterprise
 and all entries in the enterprise common phone list and the common
phone list of the specified user's group.
 If the specified user is part of a
service provider, the directory includes all users in the user's group
 and all
entries in the common phone list of the specified user's group.
 It is possible
to search the directory for names containing a specified search string. The
search includes
 matches on first name or last name or common phone list names.
 The response is either C<UserPhoneDirectoryGetSearchedListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPortalPasscodeGetInfoRequest

Request the user's portal passcode information.
 The response is either a
C<UserPortalPasscodeGetInfoResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPortalPasscodeModifyRequest

Modify the user's Portal passcode
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserScheduleAddEventRequest

Add an event to user schedule. 
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item scheduleKey

=item eventName

=item startDate

=item endDate

=back

Additionally there are generic tagged parameters.

=head3 UserScheduleAddRequest

Add a user schedule.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item scheduleName

=item scheduleType

=back

Additionally there are generic tagged parameters.

=head3 UserScheduleDeleteEventListRequest

Delete a list of events from a user schedule.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 UserScheduleDeleteListRequest

Delete a list of user schedule.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 UserScheduleGetEventListRequest

Get the list of events of a user schedule.
 The response is either a
C<UserScheduleGetEventListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 UserScheduleGetEventRequest

Get an event from a user schedule.
 The response is either a
C<UserScheduleGetEventResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 UserScheduleGetListRequest17sp1

Get the list of schedules viewable by a User. The list can be filtered by
schedule type.
 The response is either a C<UserScheduleGetListResponse17sp1> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserScheduleModifyEventRequest

Modify an event of a user schedule.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item scheduleKey

=item eventName

=back

Additionally there are generic tagged parameters.

=head3 UserScheduleModifyRequest

Modify a user schedule.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item scheduleKey

=back

Additionally there are generic tagged parameters.

=head3 UserServiceAssignListRequest

Request to assign the user services and service packs for a user.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserServiceGetAssignmentListRequest

Requests the user's service and service pack assignment list with status.
 The
response is either C<UserServiceGetAssignmentListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserServiceIsAssignedRequest

Request to determine if a C<UserService> or service pack is assigned to the
user.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserServiceUnassignListRequest

Requests to unassign the user services and service packs for a user.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserShInterfaceGetPublicIdDataRequest

Returns the Sh non-transparent data stored against a Public User Identity (a
SIP URI
 or TEL URI).
 The response is either a
C<UserShInterfaceGetPublicIdDataResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item publicUserIdentity

=back

Additionally there are generic tagged parameters.

=head3 UserShInterfaceGetUserIdDataRequest

Returns the Sh non-transparent data stored against a userId.
 The response is
either a C<UserShInterfaceGetUserIdDataResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserShInterfaceModifyRequest

Modifies the Sh Interface non-transparent data associated with a Public User
Identity.
 The response is a C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item publicUserIdentity

=back

Additionally there are generic tagged parameters.

=head3 UserShInterfacePublicIdentityRefreshTaskStartRequest

Dispatches a Public Identity refresh task on the local Application Server node
for the specified public identity.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item publicUserIdentity

=back

Additionally there are generic tagged parameters.

=head3 GroupAccountAuthorizationCodesAddListRequest

Add a list of account/authorization codes to a group.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item codeEntry

=back

Additionally there are generic tagged parameters.

=head3 GroupAccountAuthorizationCodesDeleteListRequest

Delete a list of account/authorization codes from a group.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupAccountAuthorizationCodesGetAvailableUserListRequest

Get a list of non restricted users for the account/authorization codes service.
 The response is either
C<GroupAccountAuthorizationCodesGetAvailableUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupAccountAuthorizationCodesGetListRequest

Request the list of account/authorization codes for a group.
 The response is
either a C<GroupAccountAuthorizationCodesGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupAccountAuthorizationCodesGetRequest

Request the group's account/authorization codes setting.
 The response is
either a C<GroupAccountAuthorizationCodesGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupAccountAuthorizationCodesModifyRequest

Change the group's account/authorization codes setting.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 SystemAdviceOfChargeGetRequest

Request to get the list of Advice of Charge system parameters.
 The response is
either C<SystemAdviceOfChargeGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAdviceOfChargeModifyRequest

Request to modify Advice of Charge system parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserAdviceOfChargeGetRequest

Request the user level data associated with Advice Of Charge.
 The response is
either a C<UserAdviceOfChargeGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAdviceOfChargeModifyRequest

Modify the user level data associated with Advice of Charge.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAlternateNumbersGetRequest17

Request the user level data associated with Alternate Numbers.
 The response is
either a C<UserAlternateNumbersGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAlternateNumbersModifyRequest

Modify the user level data associated with Alternate Numbers.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAnonymousCallRejectionGetRequest

Request the user level data associated with Anonymous Call Rejection.
 The
response is either a C<UserAnonymousCallRejectionGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAnonymousCallRejectionModifyRequest

Modify the user level data associated with Anonymous Call Rejection.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemAnonymousCallRejectionGetRequest

Get Anonymous Call Rejection system parameters.
 The response is either a
C<SystemAnonymousCallRejectionGetResponse> or 
 an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAnonymousCallRejectionModifyRequest

Modify a system Anonymous Call Rejection parameter.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAttendantConsoleGetRequest

Request to get the list of Attendant Console parameters.
 The response is
either C<SystemAttendantConsoleGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAttendantConsoleModifyRequest

Modify Attendant Console settings.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserAttendantConsoleAddUserListRequest

Add users to the Attendant Console monitored users list.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAttendantConsoleDeleteUserListRequest

Remove users from the Attendant Console monitored users list.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAttendantConsoleGetAvailableUserListRequest

Get a list of available users for the Attendant Console service.
 The response
is either C<UserAttendantConsoleGetAvailableUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAttendantConsoleGetRequest14sp2

Request user's attendant console settings.
 The response is either a
C<UserAttendantConsoleGetResponse14sp2> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAttendantConsoleModifyRequest

Modify user's attendant console settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAuthenticationGetRequest

Get the user's authentication service information.
 The response is either a
C<UserAuthenticationGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAuthenticationModifyRequest

Modify the user's authentication service information.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupAutoAttendantAddInstanceRequest17sp1

Add a Auto Attendant instance to a group.
 The domain is required in the
C<serviceUserId>.
 Only Group and Enterprise level schedules are accepted.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceUserId

=item serviceInstanceProfile

=item enableVideo

=back

Additionally there are generic tagged parameters.

=head3 GroupAutoAttendantDeleteInstanceRequest

Delete a Auto Attendant instance from a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupAutoAttendantGetInstanceListRequest

Get a list of Auto Attendant instances within a group.
 The response is either
C<GroupAutoAttendantGetInstanceListResponse> or C<ErrorResponse>.
 It is
possible to get the instances within a specified department.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupAutoAttendantGetInstanceRequest17sp1

Request to get all the information of a Auto Attendant instance.
 The response
is either C<GroupAutoAttendantGetInstanceResponse17sp1> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupAutoAttendantModifyActiveInstanceListRequest

Request to set the active status of Auto Attendant instances.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupAutoAttendantModifyInstanceRequest17sp1

Request to modify an Auto Attendant instance.
 Only Group and Enterprise level
schedules are accepted.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 SystemAutomaticCallbackGetRequest17

Request the system's automatic callback attributes.
 The response is either a
C<SystemAutomaticCallbackGetResponse17> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAutomaticCallbackModifyRequest15

Modifies the system's automatic callback attributes.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAutomaticCallbackGetReleaseCauseListRequest

Request the system's automatic callback attributes.
 The response is either a
C<SystemAutomaticCallbackGetReleaseCauseListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAutomaticCallbackAddReleaseCauseListRequest

Adds automatic callback release cause to the C<releaseCause> attribute.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemAutomaticCallbackDeleteReleaseCauseListRequest

Deletes automatic callback release causes from the release cause attribute.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserAutomaticCallbackGetRequest

Request the user level data associated with Automatic Callback.
 The response
is either a C<UserAutomaticCallbackGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAutomaticCallbackModifyRequest

Modify the user level data associated with Automatic Callback.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAutomaticHoldRetrieveGetRequest

Request the user level data associated with Automatic Hold/Retrieve.
 The
response is either a C<UserAutomaticHoldRetrieveGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserAutomaticHoldRetrieveModifyRequest

Modify the user level data associated with Automatic Hold/Retrieve.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBargeInExemptGetRequest

Request the user level data associated with Barge In Exempt.
 The response is
either a C<UserBargeInExemptGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBargeInExemptModifyRequest

Modify the user level data associated with Barge In Exempt.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBasicCallLogsGetListRequest14sp4

Request user's call logs.
 If the C<callLogType> is not specified, all types of
calls are returned.
 The response is either a
C<UserBasicCallLogsGetListResponse14sp4> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksAnywhereAddInstanceRequest

Add a C<BroadWorks> Anywhere instance to a group.
 The domain is required in
the C<serviceUserId>.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceUserId

=item serviceInstanceProfile

=item broadWorksAnywhereScope

=item promptForCLID

=item silentPromptMode

=item promptForPasscode

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksAnywhereDeleteInstanceRequest

Delete a C<BroadWorks> Anywhere instance from a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksAnywhereGetInstanceListRequest

Get a list of C<BroadWorks> Anywhere instances within a group.
 The response is
either C<GroupBroadWorksAnywhereGetInstanceListResponse> or C<ErrorResponse>.
It is possible to get the instances within a specified department.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksAnywhereGetInstanceRequest17

Request to get all the information of a C<BroadWorks> Anywhere instance.
 The
response is either C<GroupBroadWorksAnywhereGetInstanceResponse17> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksAnywhereModifyActiveInstanceListRequest

Request to set the active status of C<BroadWorks> Anywhere instances.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksAnywhereModifyInstanceRequest

Request to modify a C<BroadWorks> Anywhere instance.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksAnywhereAddPhoneNumberRequest

Add a broadworks Anywhere phone number.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksAnywhereAddSelectiveCriteriaRequest16

Add a criteria to the user's C<BroadWorks> Anywhere phone number.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item phoneNumber

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksAnywhereDeletePhoneNumberRequest

Delete a broadworks anywhere phone number. Also deletes all the selective
criteria for the phone number.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksAnywhereDeleteSelectiveCriteriaRequest

Delete a criteria from the user's C<BroadWorks> Anywhere phone number.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item phoneNumber

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksAnywhereGetAvailablePortalListRequest

Get a list of all the available C<BroadWorks> Anywhere portal instances for a
specific user
 The response is either
C<UserBroadWorksAnywhereGetAvailableListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksAnywhereGetPhoneNumberRequest

Get a broadworks anywhere phone number
 The response is
C<UserBroadWorksAnywhereGetPhoneNumberResponse>.

Fixed parameters are:-

=over 4

=item userId

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksAnywhereGetRequest16sp2

Get the list of all the C<BroadWorks> Anywhere phone numbers for the user.
 The
response is either a C<UserBroadWorksAnywhereGetResponse16sp2> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksAnywhereGetSelectiveCriteriaRequest16

Get a criteria for the user's C<BroadWorks> Anywhere phone number.
 The
response is either a C<UserBroadWorksAnywhereGetSelectiveCriteriaResponse16> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item phoneNumber

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksAnywhereModifyPhoneNumberRequest

Modify a C<BroadWorks> Anywhere phone number
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksAnywhereModifyRequest

Request to modify the user-level settings for the C<BroadWorks> Anywhere
service for a specified user.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksAnywhereModifySelectiveCriteriaRequest

Modify selective criteria for the user's C<BroadWorks> Anywhere phone number.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item phoneNumber

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksMobilityAddIMRNListRequest

Adds C<BroadWorks> Mobility IMRN numbers to the system. It is possible to add
either: 
 a single number, a list of numbers, or a range of numbers, or any
combination thereof.
 The response is either a C<SuccessResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksMobilityDeleteIMRNListRequest

Removes a C<BroadWorks> Mobility IMRN number from the system. 
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksMobilityGetIMRNListRequest

Request to get the list of C<BroadWorks> Mobility IMRN numbers defined in the
system.
 The response is either a
C<SystemBroadWorksMobilityIMRNGetListResponse>
 or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksMobilityServiceAccessCodeAddRequest

Add a system service access code.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceAccessCode

=item countryCode

=back

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksMobilityServiceAccessCodeDeleteRequest

Delete a system service access code.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item countryCode

=item serviceAccessCode

=back

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksMobilityServiceAccessCodeGetListRequest

Get a list of system service access codes.
 The response is either
C<SystemBroadWorksMobilityServiceAccessCodeGetListResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksMobilityServiceAccessCodeModifyRequest

Modify a system service access code.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item countryCode

=item serviceAccessCode

=back

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksMobilityGetRequest

Get the broadworks mobility system parameters.
 The response is either a
C<SystemBroadWorksMobilityGetResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksMobilityModifyRequest

Modify the C<BroadWorks> Mobility system parameters.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 ServiceProviderBroadWorksMobilityGetRequest

Get the service provider C<BroadWorks> Mobility service settings.
 The response
is either a C<ServiceProviderBroadWorksMobilityGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderBroadWorksMobilityModifyRequest

Modify the service provider level C<BroadWorks> Mobility service settings.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobilityGetRequest

Get the group s C<BroadWorks> Mobility settings.
 The response is either a
C<GroupBroadWorksMobilityGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupBroadWorksMobilityModifyRequest

Modify the group level broadworks mobility service settings.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksMobilityGetRequest

Get the user's broadworks mobility service settings.
 The response is either a
C<UserBroadWorksMobilityGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksMobilityModifyRequest

Modify the user's broadworks mobility service settings.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemBusyLampFieldGetRequest

Request the system level data associated with the Busy Lamp
 Field service. The
response is either a 
 C<SystemBusyLampFieldGetResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBusyLampFieldModifyRequest

Modify the system level data associated with the Busy Lamp Field
 Service. The
response is either a C<SuccessResponse> or an 
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserBusyLampFieldGetAvailableUserListRequest

Get a list of available users for the busy lamp field service.
 The response is
either C<UserBusyLampFieldGetAvailableUserListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBusyLampFieldGetRequest16sp2

Request the settings for the busy lamp field service.
 The response is either a
C<UserBusyLampFieldGetResponse16sp2> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBusyLampFieldModifyRequest

Modify the settings for the busy lamp field service.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCapacityManagementAddInstanceRequest

Adds a Call Capacity Management group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=item maxActiveCallsAllowed

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCapacityManagementDeleteInstanceListRequest

Deletes one or more Call Capacity Management groups.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCapacityManagementGetAvailableUserListRequest

Get a list of users that can be assigned to a Call Capacity Management group.
The available user list for a new Call Capacity Management group can be
obtained
 by not setting the name.
 The response is either
C<GroupCallCapacityManagementGetAvailableUserListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCapacityManagementGetInstanceListRequest

Request to get a list of Call Capacity Management instances within a group.
The response is either C<GroupCallCapacityManagementGetInstanceListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCapacityManagementGetInstanceRequest

Gets a Call Capacity Management group.
 The response is either
C<GroupCallCapacityManagementGetInstanceResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCapacityManagementModifyInstanceRequest

Modifies a Call Capacity Management group. Replaces the entire list of users in
the group.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCapacityManagementAddUserListRequest

Adds one or more users to a Call Capacity Management group.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCapacityManagementDeleteUserListRequest

Deletes one or more users from a Call Capacity Management group.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterAgentUnavailableCodeAddRequest

Add a Call Center Agent Unavailable Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item isActive

=item code

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterAgentUnavailableCodeDeleteRequest

Delete a Call Center Agent Unavailable Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item code

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterAgentUnavailableCodeGetListRequest

Get the list of Call Center Agent Unavailable Codes.
 The response is either
C<EnterpriseCallCenterAgentUnavailableCodeGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterAgentUnavailableCodeGetRequest

Get a Call Center Agent Unavailable Code.
 The response is either
C<EnterpriseCallCenterAgentUnavailableCodeGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item code

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterAgentUnavailableCodeModifyRequest

Modify a Call Center Agent Unavailable Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item code

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterAgentUnavailableCodeSettingsGetRequest

Request the enterprise level data associated with Call Center Agents
Unavailable Code Settings.
 The response is either an
C<EnterpriseCallCenterAgentUnavailableCodeSettingsGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterAgentUnavailableCodeSettingsModifyRequest

Modify the enterprise level data associated with Call Center Agents Unavailable
Code Settings.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterCallDispositionCodeAddRequest

Add a Call Center Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item code

=item isActive

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterCallDispositionCodeDeleteRequest

Delete a Call Center Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item code

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterCallDispositionCodeGetListRequest

Get the list of Call Center Call Disposition Codes.
 The response is either
C<EnterpriseCallCenterCallDispositionCodeGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterCallDispositionCodeGetRequest

Get a Call Center Call Disposition Code.
 The response is either
C<EnterpriseCallCenterCallDispositionCodeGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item code

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterCallDispositionCodeGetUsageListRequest

Get the list of Call Centers and Route Points using the specified disposition
code.
 The response is either
C<EnterpriseCallCenterCallDispositionCodeGetUsageListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item code

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterCallDispositionCodeModifyRequest

Modify a Call Center Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item code

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterCallDispositionCodeModifyActiveListRequest

Request to set the active status of Call Center Call Disposition Codes.      
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterCurrentAndPastAgentGetListRequest

Request to all the current and past agents in the enterprise.
 The response is
either C<EnterpriseCallCenterCurrentAndPastAgentGetListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterCurrentAndPastCallCenterGetListRequest

Request to get all the current and past call centers for the enterprise.
 The
response is either
C<EnterpriseCallCenterCurrentAndPastCallCenterGetListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterCurrentAndPastDNISGetListRequest

Request to get all the past and current DNIS for the Call Center for the
enterprise.
 The response is either
C<EnterpriseCallCenterCurrentAndPastDNISGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingBrandingGetRequest

Request to get the enterprise branding information.
 The response is either
C<EnterpriseCallCenterEnhancedReportingBrandingGetResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingBrandingModifyRequest

Request to modify the enterprise branding configuration.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingGetAvailableReportTemplateListRequest

Request to get all enabled call center report template for an enterprise.
 The
response is either an
C<EnterpriseCallCenterEnhancedReportingGetAvailableReportTemplateListResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingGetRequest

Request to get an enterprise level call center enhanced reporting setting.
 The
response is either an C<EnterpriseCallCenterEnhancedReportingGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingModifyRequest

Request to modify enterprise level call center enhanced reporting settings.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingReportTemplateAddRequest

Request to add an Enterprise level call center report template.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingReportTemplateDeleteRequest

Request to delete an enterprise level call center report template.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingReportTemplateGetListRequest

Request to get enterprise level call center report template list.
 The response
is either an
C<EnterpriseCallCenterEnhancedReportingReportTemplateGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingReportTemplateGetRequest

Request to get an enterprise level call center report template.
 The response
is either an C<EnterpriseCallCenterEnhancedReportingReportTemplateGetResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingReportTemplateModifyRequest

Request to modify an enterprise level call center report template.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingScheduledReportAddRequest

Request to add an enterprise level call center reporting scheduled report.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingScheduledReportDeleteRequest

Request to delete an enterprise level call center reporting scheduled report.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingScheduledReportGetActiveListRequest

Request to get a list of active enterprise level call center reporting
scheduled reports.
 The response is either an
C<EnterpriseCallCenterEnhancedReportingScheduledReportGetActiveListResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingScheduledReportGetCompletedListRequest

Request to get a list of completed enterprise level call center reporting
scheduled reports.
 The response is either an
C<EnterpriseCallCenterEnhancedReportingScheduledReportGetCompletedListResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingScheduledReportGetListRequest

Request to get a list of enterprise level call center reporting scheduled
reports.
 The response is either an
C<EnterpriseCallCenterEnhancedReportingScheduledReportGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingScheduledReportGetRequest

Request to get an enterprise level call center reporting scheduled report.
 The
response is either an
C<EnterpriseCallCenterEnhancedReportingScheduledReportGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest

Request to get all the call center reporting scheduled report in an enterprise
that uses a given enterprise level report template.
 The response is either a
C<EnterpriseCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterEnhancedReportingScheduledReportModifyRequest

Request to modify an enterprise level call center reporting scheduled report.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item name

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterGetRequest

Request the enterprise level data associated with Call Center.
 The response is
either an C<EnterpriseCallCenterGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterGetRoutingPolicyRequest

Request the enterprise call center routing policy.
 The response is either an
C<EnterpriseCallCenterGetRoutingPolicyResponse>
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterModifyRequest

Modify the enterprise level data associated with Call Center
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseCallCenterModifyRoutingPolicyRequest

Modify the enterprise call center routing policy.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterAddAgentListRequest

Add agent(s) to a call center.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterAddInstanceRequest17sp3

Add a Call Center instance to a group.
 The domain is required in the
C<serviceUserId>.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceUserId

=item serviceInstanceProfile

=item type

=item policy

=item enableVideo

=item queueLength

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterAddDNISRequest

Add a Call Center DNIS
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterAddSupervisorListRequest

Add supervisor(s) to a call center.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterAgentUnavailableCodeAddRequest

Add a Call Center Agent Unavailable Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item isActive

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterAgentUnavailableCodeDeleteRequest

Delete a Call Center Agent Unavailable Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterAgentUnavailableCodeGetListRequest

Get the list of Call Center Agent Unavailable Codes.
 The response is either
C<GroupCallCenterAgentUnavailableCodeGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterAgentUnavailableCodeGetRequest

Get a Call Center Agent Unavailable Code.
 The response is either
C<GroupCallCenterAgentUnavailableCodeGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterAgentUnavailableCodeModifyRequest

Modify a Call Center Agent Unavailable Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterAgentUnavailableCodeSettingsGetRequest

Request the group level data associated with Call Center Agents Unavailable
Code Settings.
 The response is either an
C<GroupCallCenterAgentUnavailableCodeSettingsGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterAgentUnavailableCodeSettingsModifyRequest

Modify the group level data associated with Call Center Agents Unavailable Code
Settings.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterBouncedCallGetRequest17

Get a call center's bounced call settings.
 The response is either a
C<GroupCallCenterBouncedCallGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterBouncedCallModifyRequest

Modify a call center's bounced call settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterCallDispositionCodeAddRequest

Add a Call Center Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item code

=item isActive

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterCallDispositionCodeDeleteRequest

Delete a Call Center Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterCallDispositionCodeGetListRequest

Get the list of Call Center Call Disposition  Codes.
 The response is either
C<GroupCallCenterCallDispositionCodeGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterCallDispositionCodeGetRequest

Get a Call Center Call Disposition Code.
 The response is either
C<GroupCallCenterCallDispositionCodeGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterCallDispositionCodeGetUsageListRequest

Get the list of Call Centers and Route Points using the specified disposition
code.
 The response is either
C<GroupCallCenterCallDispositionCodeGetUsageListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterCallDispositionCodeModifyRequest

Modify a Call Center Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterCallDispositionCodeModifyActiveListRequest

Request to set the active status of Call Center Call Disposition Codes.      
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterComfortMessageBypassGetRequest17

Get a call center's comfort message bypass settings.
 The response is either a
C<GroupCallCenterComfortMessageBypassGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterComfortMessageBypassModifyRequest17

Modify a call center's comfort message bypass settings.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterCurrentAndPastAgentGetListRequest

Request to get all the current and past agents for the group.
 The response is
either C<GroupCallCenterCurrentAndPastAgentGetListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterCurrentAndPastCallCenterGetListRequest

Request to get all the current and past call centers for the group.
 The
response is either C<GroupCallCenterCurrentAndPastCallCenterGetListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterCurrentAndPastDNISGetListRequest

Request to get all the past and current DNIS for the Call Center for the group.
 The response is either C<GroupCallCenterCurrentAndPastDNISGetListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterDeleteAgentListRequest

Delete agent(s) from a call center.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterDeleteDNISRequest

Delete a call center's DNIS.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterDeleteInstanceRequest

Delete a Call Center instance from a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterDeleteSupervisorListRequest

Delete supervisor(s) from a call center.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterDistinctiveRingingGetRequest

Get the distinctive ringing configuration values for call center.
 The response
is either a C<GroupCallCenterDistinctiveRingingGetResponse> 
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterDistinctiveRingingModifyRequest

Modify the distinctive ringing configuration values for call center.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingBrandingGetRequest

Request to get the group branding information.
 The response is either
C<GroupCallCenterEnhancedReportingBrandingGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingBrandingModifyRequest

Request to modify the group branding configuration.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingGetAvailableReportTemplateListRequest

Request to get all enabled call center report template for a group.
 The
response is either a
C<GroupCallCenterEnhancedReportingGetAvailableReportTemplateListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingGetRequest

Request to get a group level call center enhanced reporting setting.
 The
response is either an C<GroupCallCenterEnhancedReportingGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingModifyRequest

Request to modify group level call center enhanced reporting settings.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingReportTemplateAddRequest

Request to add a group level call center report template.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingReportTemplateDeleteRequest

Request to delete a group level call center report template.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingReportTemplateGetListRequest

Request to get group level call center report template list.
 The response is
either a C<GroupCallCenterEnhancedReportingReportTemplateGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingReportTemplateGetRequest

Request to get a group level call center report template.
 The response is
either a C<GroupCallCenterEnhancedReportingReportTemplateGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingReportTemplateModifyRequest

Request to modify a group level call center report template.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingScheduledReportAddRequest

Request to add a group level call center reporting scheduled report.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingScheduledReportDeleteRequest

Request to delete a group level call center reporting scheduled report.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingScheduledReportGetActiveListRequest

Request to get a list of active group level call center reporting scheduled
reports.
 The response is either an
C<GroupCallCenterEnhancedReportingScheduledReportGetActiveListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingScheduledReportGetCompletedListRequest

Request to get a list of completed group level call center reporting scheduled
reports.
 The response is either an
C<GroupCallCenterEnhancedReportingScheduledReportGetCompletedListResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingScheduledReportGetListRequest

Request to get a list of group level call center reporting scheduled reports.
The response is either an
C<GroupCallCenterEnhancedReportingScheduledReportGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest

Request to get all the call center reporting scheduled report in a group that
uses a given group level report template.
 The response is either a
C<GroupCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingScheduledReportGetRequest

Request to get a group level call center reporting scheduled report.
 The
response is either a
C<GroupCallCenterEnhancedReportingScheduledReportGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterEnhancedReportingScheduledReportModifyRequest

Request to modify a group level call center reporting scheduled report.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterForcedForwardingGetRequest17

Get a call center's forced forwarding settings.
 The response is either a
C<GroupCallCenterForcedForwardingGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterForcedForwardingModifyRequest17

Modify a call center's forced forwarding settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetAgentListRequest

Get a list of agents assigned to a call center.
 The response is either a
C<GroupCallCenterGetAgentListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetAnnouncementRequest17

Get a call center's announcement settings.
 The response is either a
C<GroupCallCenterGetAnnouncementResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetAvailableAgentListRequest

Get a list of users that can be assigned as agents to a given type of Call
Center.
 Searching for users by group only makes sense when the call center is
part of an Enterprise.
 The response is either
C<GroupCallCenterGetAvailableAgentListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item callCenterType

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetAvailableSupervisorListRequest

Get a list of users that can be assigned as supervisors to a Call Center.
Searching for users by group only makes sense when the call center is part of
an Enterprise.
 The response is either
C<GroupCallCenterGetAvailableSupervisorListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetDNISAgentListRequest

Get a list of agent who selected the DNIS as the outgoing call.
 The response
is either C<GroupCallCenterGetDNISAgentListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetDNISAnnouncementRequest

Get a call center's DNIS Annoucements
 The response is either a
C<GroupCallCenterGetDNISAnnouncementRequest> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetDNISListRequest

Get a list of DNIS that are configured for a Call Center.
 The response is
either C<GroupCallCenterGetDNISListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetDNISRequest

Get a call center's DNIS.
 The response is either a
C<GroupCallCenterGetDNISRequest> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetInstanceListRequest

Get a list of Call Center instances within a group.
 The response is either
C<GroupCallCenterGetInstanceListResponse> or C<ErrorResponse>.
 It is possible
to get the instances within a specified department.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetDistinctiveRingingRequest

Get the distinctive ringing configuration values for call center.
 The response
is either a C<GroupCallCenterGetDistinctiveRingingResponse> 
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetInstanceRequest17sp3

Request to get all the information of a Call Center instance.
 The response is
either C<GroupCallCenterGetInstanceResponse17sp3> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetInstanceStatisticsReportingRequest17sp1

Request to get the call center statistics reporting settings.
 The response is
either C<GroupCallCenterGetInstanceStatisticsReportingResponse17sp1> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetInstanceStatisticsRequest14sp9

Get Call Center queue and agent statistics.
 The response is either
C<GroupCallCenterGetInstanceStatisticsResponse14sp9> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=item statisticsRange

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetInstanceQueueStatusRequest

Get Call Center queue status.
 The response is either
C<GroupCallCenterGetInstanceQueueStatusResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetRequest

Request the Group level data associated with Call Center.
 The response is
either a C<GroupCallCenterGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetRoutingPolicyRequest

Request the group call center routing policy.
 The response is either a
C<GroupCallCenterGetRoutingPolicyResponse>
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetSupervisorListRequest16

Get a list of supervisors assigned to a call center.
 The response is either a
C<GroupCallCenterGetSupervisorListResponse16> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterGetUnlicensedAgentListRequest

Get a list of unlicensed users who are preventing the Call Center from
upgrading to another type.
 The response is either
C<GroupCallCenterGetUnlicensedAgentListRequest> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=item callCenterType

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterHolidayServiceGetRequest17sp1

Get a call center's holiday service settings.
 The response is either a
C<GroupCallCenterHolidayServiceGetResponse17sp1> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterHolidayServiceModifyRequest17sp1

Modify a call center's holiday service settings.
 Only Group and Enterprise
level schedules are accepted.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyActiveInstanceListRequest

Request to set the active status of Call Center instances.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyAgentListRequest

Request to modify the agent list for a call center.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyAnnouncementRequest17

Modify a call center's announcement settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyDNISAnnouncementRequest

Modify a call center DNIS announcement settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyDistinctiveRingingRequest

Modify the distinctive ringing configuration values for call center.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyDNISParametersRequest

Modify the setting that are configured for all the DNIS in a Call Center.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyDNISRequest

Modify a call center's DNIS settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyInstanceRequest17sp1

Request to modify a Call Center instance.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyInstanceStatisticsReportingRequest17sp1

Modify the Call Center statistics reporting frequency and destination.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyInstanceWeightedCallDistributionRequest

Request to modify the weighted call distribution of a Call Center instance.
The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyRequest

Modify the group level data associated with Call Center and
 the active status
of Call Center instances.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifyRoutingPolicyRequest

Modify the group call center routing policy.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterModifySupervisorListRequest16

Request to modify the supervisor list for a call center.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterNightServiceGetRequest17sp1

Get a call center's night service settings.
 The response is either a
C<GroupCallCenterNightServiceGetResponse17sp1> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterNightServiceModifyRequest17sp1

Modify a call center's night service settings.
 Only Group and Enterprise level
schedules are accepted.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterOverflowGetRequest17

Get a call center's overflow settings.
 The response is either a
C<GroupCallCenterOverflowGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterOverflowModifyRequest17

Modify a call center's overflow settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterQueueStatusNotificationGetRequest

Get the status configuration for a given call center.
 The response is either a
C<GroupCallCenterQueueStatusNotificationGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterQueueStatusNotificationModifyRequest

Set the status configuration for a given call center.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterQueueCallDispositionCodeAddRequest

Add a Call Center Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=item code

=item isActive

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterQueueCallDispositionCodeDeleteRequest

Delete a Call Center Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterQueueCallDispositionCodeGetListRequest

Get the list of Call Center Level and Organization Level Call Disposition
Codes.
 The response is either
C<GroupCallCenterQueueCallDispositionCodeGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterQueueCallDispositionCodeGetRequest

Get a Call Center Call Disposition Code.
 The response is either
C<GroupCallCenterQueueCallDispositionCodeGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterQueueCallDispositionCodeModifyRequest

Modify a Call Center Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterQueueCallDispositionCodeSettingsGetRequest

Request the user level data associated with Call Center Call Disposition Code
Settings.
 The response is either an
C<GroupCallCenterQueueCallDispositionCodeSettingsGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterQueueCallDispositionCodeSettingsModifyRequest

Modify the enterprise level data associated with Call Center Agents Unavailable
Code Settings.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterStrandedCallGetRequest17

Get a call center's stranded call settings.
 The response is either a
C<GroupCallCenterStrandedCallGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallCenterStrandedCallModifyRequest17

Modify a call center's stranded call settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingBrandingGetRequest

Request to get the system branding information.
 The response is either
C<SystemCallCenterEnhancedReportingBrandingGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingBrandingModifyRequest

Request to modify the system branding configuration.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingDataTemplateGetListRequest

Request to get the list of data template and the corresponding information in
the system.
 The response is either a
C<SystemCallCenterEnhancedReportingDataTemplateGetListResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingGetRequest

Request to get the call center enhanced reporting system settings.
 The
response is either a C<SystemCallCenterEnhancedReportingGetResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingModifyRequest

Modify the system settings for call center enhanced reporting.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingReportTemplateAddRequest

Request to add a system level call center report template.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingReportTemplateDeleteRequest

Request to delete a system level call center report template.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingReportTemplateGetListRequest

Request to get system level call center report template list.
 The response is
either a C<SystemCallCenterEnhancedReportingReportTemplateGetListResponse> or
an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingReportTemplateGetRequest

Request to get a system level call center report template.
 The response is
either a C<SystemCallCenterEnhancedReportingReportTemplateGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingReportTemplateModifyRequest

Request to modify a system level call center report template.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingScheduledReportGetActiveListRequest

Request to get the list of all active call center reporting scheduled reports
in the system.
 The response is either a
C<SystemCallCenterEnhancedReportingScheduledReportGetActiveListResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingScheduledReportGetCompletedListRequest

Request to get the list of all completed call center reporting scheduled
reports in the system.
 The response is either a
C<SystemCallCenterEnhancedReportingScheduledReportGetCompletedListResponse> or
an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingScheduledReportGetListRequest

Request to get the list of all call center reporting scheduled reports in the
system.
 The response is either an
C<SystemCallCenterEnhancedReportingScheduledReportGetListResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListRequest

Request to get all the call center reporting scheduled report in the system
that uses a 
 given system level report template. 
 The response is either a
C<SystemCallCenterEnhancedReportingScheduledReportGetReportTemplateUsageListResponse>
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingScheduledTaskParametersGetRequest

Request to get the system settings for the call center enhanced reporting
scheduling tasks.
 The response is either a
C<SystemCallCenterEnhancedReportingScheduledTaskParametersGetResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterEnhancedReportingScheduledTaskParametersModifyRequest

Modify the system settings for the call center enhanced reporting scheduling
tasks.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterGetRequest17

Request the system level data associated with Call Center.
 The response is
either a C<SystemCallCenterGetResponse17> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterModifyRequest

Modify the system level data associated with Call Center.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterReportingServerAddRequest

Add a call center reporting server.
 name - A unique name given to the CCR
inside the AS.
 CCR are associated to the Call Center through that name.
 url -
The Reporting Server URL used by the C<BroadWorks> Call Center
 client to
connect to the CCR.
 C<netAddress> - The address used by the CCR to connect to
the CAP-S-C<CallCenter> port on the AS.
 Only connections from configured CCR
are accepted.
 description - An optional description text.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=item url

=item netAddress

=back

Additionally there are generic tagged parameters.

=head3 SystemCallCenterReportingServerDeleteRequest

Delete a Call Center Reporting Server.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCallCenterReportingServerGetCallCenterListRequest

Get a list of Call Centers that are using the specified reporting
 server.  The
response is either a
C<SystemCallCenterReportingServerGetCallCenterListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item reportingServerName

=back

Additionally there are generic tagged parameters.

=head3 SystemCallCenterReportingServerGetListRequest

Request to get a list of Call Center Reporting Server.
 The response is either
C<SystemCallCenterReportingServerGetListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallCenterReportingServerModifyRequest

Modify a call center reporting server.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterAddSupervisedAgentListRequest

Assign agent(s) to a call center supervisor.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item supervisorUserId

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterAgentSignOutRequest

This request signs-out a call center agent. Administrator, supervisor and agent
itself can sign-out an agent. 
 An empty OCI table in OCI-P response indicates
success and the agent has been signed out. This sign-out 
 command will fail if
the agent is the last signed-in agent of any standard or premium call center to
 which she is currently joined. If the sign-out fails, the OCI-P response will
contain a list of 
 Call Centers for which the agent is the last signed-in
agent. 
 If this special logic is not needed, C<UserCallCenterModifyRequest>
can still be used to change 
 the agents ACD state without checking if the
agent is the last signed-in agent.
 The response is either a
C<UserCallCenterAgentSignOutResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item agentUserId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterAgentDetailsGetRequest

Request to get the detail information of a Call Center Agent. Administrator,
supervisor and agent
 itself can send this command.
 The response is either
C<UserCallCenterAgentDetailsGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item agentUserId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterCallDispositionCodeGetAvailableListRequest

Get the list of available Call Center Call Disposition Codes to be used by a
client.
 The response is either
C<UserCallCenterCallDispositionCodeGetAvailableListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterDeleteSupervisedAgentListRequest

Delete agent(s) from a call center supervisor.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item supervisorUserId

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterEnhancedReportingReportTemplateParamInfoGetRequest

Request to get the input parameter info for a call center report template.
 The
response is either a
C<UserCallCenterEnhancedReportingReportTemplateParamInfoGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item reportTemplate

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterEnhancedReportingScheduledReportDeleteRequest

Request to delete a call center reporting scheduled report created by a
supervisor.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item supervisorUserId

=item name

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterEnhancedReportingScheduledReportGetRequest

Request to get a call center reporting scheduled report created by supervisor.
The response is either a
C<UserCallCenterEnhancedReportingScheduledReportGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item supervisorUserId

=item name

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterEnhancedReportingScheduledReportModifyRequest

Request to modify a call center reporting scheduled report created by a
supervisor.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item supervisorUserId

=item name

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterGetAgentSupervisorListRequest

Get a list of supervisors for an agent on a given call center.
 The response is
either a C<UserCallCenterGetAgentSupervisorListResponse>
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item agentUserId

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterGetAvailableCallCenterListRequest

This request gets a list of all call centers which the user can be assigned to
as an agent. 
 Some of the call centers may already have the user as an agent. 
It is the clients 
 responsibility to discard the call centers that the user is
already an agent of.
 The response is either a
C<UserCallCenterGetAvailableCallCenterListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterGetAvailableDNISListRequest

Request a list of available DNIS for agent to select.
 The response is either
C<UserCallCenterGetAvailableDNISListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item agentUserId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterGetRequest17

Get the user's call center settings and the list of call centers the specified
user belongs to.
 The response is either a C<UserCallCenterGetResponse17> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterGetSupervisedAgentListRequest

Get a list of agents supervised by a supervisor on a given call
 center.  The
response is either a C<UserCallCenterGetSupervisedAgentListResponse>
 or an
C<ErrorResponse>.
 The search can be done using multiple criterias.
 If the
C<searchCriteriaModeOr> is present, any result matching any one criteria is
included in the results. Otherwise, only
 results matching all the search
criterias are included in the results. 
 If no search criteria is specified,
all results are returned.
 In all cases, if a C<responseSizeLimit> is specified
and the number of matching results is more than this limit, then an
C<ErrorResponse> is returned.
 Specifying C<searchCriteriaModeOr> without any
search criteria results in an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item supervisorUserId

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterGetSupervisorCallCenterListRequest

Get a list of call centers the user is assigned to as a supervisor.
 The
response is either a C<UserCallCenterGetSupervisorCallCenterListResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item supervisorUserId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterModifyCallCenterListRequest

Request to modify the call center list for an agent.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item agentUserId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterModifyRequest

Modifies the agents call center settings and the availability for an agent in
one or more Call Centers.
 Contains a list specifying the desired availability
status of one or more call centers.
 A default unavailable code will be used if
the parameter C<agentUnavailableCode> is not active, included or is invalid.
Changing the C<agentACDState> from unavailable to any other state will
automatically clear the unavailable code.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterModifySupervisedAgentListRequest

Modifies a list of users to be supervised by a supervisor on a call center.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item supervisorUserId

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 CallCenterAgentAvailability

Specifies an agent's login state (availability) for a particular Call Center.

Fixed parameters are:-

=over 4

=item serviceUserId

=item available

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterMonitoringGetRequest

Request the user's Call Center Monitoring settings.
 The response is either a
C<UserCallCenterMonitoringGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallCenterMonitoringModifyRequest

Modify the user's Call Center Monitoring settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingAlwaysGetRequest

Request the user level data associated with Call Forwarding Always.
 The
response is either a C<UserCallForwardingAlwaysGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingAlwaysModifyRequest

Modify the user level data associated with Call Forwarding Always.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.
 Engineering
Note: This command is used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingBusyGetRequest

Request the user level data associated with Call Forwarding Busy.
 The response
is either a C<UserCallForwardingBusyGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingBusyModifyRequest

Modify the user level data associated with Call Forwarding Busy.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.
 Engineering Note: This
command is used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingNoAnswerGetRequest13mp16

Request the user level data associated with Call Forwarding No Answer.
 The
response is either a C<UserCallForwardingNoAnswerGetResponse13mp16> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingNoAnswerModifyRequest

Modify the user level data associated with Call Forwarding No Answer.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.
 Engineering
Note: This command is used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingNotReachableGetRequest

Request the user level data associated with Call Forwarding Not Reachable.
 The
response is either a C<UserCallForwardingNotReachableGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingNotReachableModifyRequest

Modify the user level data associated with Call Forwarding Not Reachable.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.
 Engineering
Note: This command is used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingSelectiveAddCriteriaRequest16

Add a criteria to the user's call forwarding selective service.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingSelectiveDeleteCriteriaRequest

Delete a criteria from the user's call forwarding selective service.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingSelectiveGetCriteriaRequest16

Get a criteria for the user's call forwarding selective service.
 The response
is either a C<UserCallForwardingSelectiveGetCriteriaResponse16> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingSelectiveGetRequest16

Get the user's call forwarding selective service setting.
 The response is
either a C<UserCallForwardingSelectiveGetResponse16> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingSelectiveModifyCriteriaRequest

Modify a criteria for the user's call forwarding selective service.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallForwardingSelectiveModifyRequest

Modify the user's call forwarding selective service setting.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemCallMeNowGetRequest

Request the system level data associated with Call Me Now service.
 The
response is either a C<SystemCallMeNowGetResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallMeNowModifyRequest

Modify the system level data associated with Call me now service.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserCallMeNowAddCriteriaRequest

Add a criterion to the user's call me now service.  The criterion added is
automatically active.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallMeNowDeleteCriteriaRequest

Delete a criteria from the user's call me now service.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallMeNowGetCriteriaRequest

Get a criteria for the user's call me now service.
 The response is either a
C<UserCallMeNowGetCriteriaResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallMeNowGetRequest

Get the user's call me now service setting.
 The response is either a
C<UserCallMeNowGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallMeNowModifyCriteriaRequest

Modify a criteria for the user's call me now service.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallMeNowModifyRequest

Modify the user's call me now service setting.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemCallNotifyGetRequest

Request the system level data associated with Call Notify.
 The response is
either a C<SystemCallNotifyGetResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallNotifyModifyRequest

Modify the system level data associated with Call Notify.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserCallNotifyAddCriteriaRequest16

Add a criteria to the user's call notify service.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallNotifyGetCriteriaRequest16

Get a criteria for the user's call notify service.
 The response is either a
C<UserCallNotifyGetCriteriaResponse16> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallNotifyDeleteCriteriaRequest

Delete a criteria from the user's call notify service.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallNotifyModifyCriteriaRequest

Modify a criteria for the user's call notify service.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCallNotifyGetRequest

Get the user's call notify service setting.
 The response is either a
C<UserCallNotifyGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallNotifyModifyRequest

Modify the user's call notify service setting.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallParkAddInstanceRequest16sp2

Adds a Call Park group.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.
 The following elements are only used in AS data mode:
C<recallAlternateUserId>
 recallTo, use value  Parking User Only  in HSS data
mode

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallParkDeleteInstanceRequest

Deletes a Call Park group.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallParkGetAvailableAlternateRecallUserListRequest

Get a list of hunt groups that are available to select as an alternate recall
user.
 The response is either
C<GroupCallParkGetAvailableAlternateRecallUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallParkGetAvailableUserListRequest

Get a list of users that can be assigned to a Call Park group.
 The available
user list for a new Call Park group can be obtained
 by not setting the name.
The response is either C<GroupCallParkGetAvailableUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallParkGetInstanceListRequest

Request to get a list of Call Park group instances within a group.
 The
response is either C<GroupCallParkGetInstanceListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallParkGetInstanceRequest16sp2

Gets a Call Park group.
 The response is either
C<GroupCallParkGetInstanceResponse16sp2> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallParkGetRequest16sp2

Gets the Call Park Group settings.
 The response is either
C<GroupCallParkGetResponse16sp2> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallParkModifyInstanceRequest

Modifies a Call Park group. Replaces the entire list of users in the group.  
The users are in the list are in the order they will try to be parked on.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.
 The following
elements are only used in AS data mode:
 C<recallAlternateUserId>
 recallTo

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallParkModifyRequest

Modifies the Group's Call Park settings.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.
 The following elements are only used
in AS data mode:
 C<recallAlternateUserId>
 C<recallRingPattern>
 recallTo
C<alternateUserRecallTimerSeconds>

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 UserCallParkGetRequest

Identifies which Call Park group the user belongs to if any and the list of
users in the group.
 The response is either C<UserCallParkGetResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallPickupAddInstanceRequest

Adds a Call Pickup group.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallPickupDeleteInstanceRequest

Deletes a Call Pickup group.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallPickupGetAvailableUserListRequest

Get a list of users that can be assigned to a Call Pickup group.
 The available
user list for a new Call Pickup group can be obtained
 by not setting the name.
 The response is either C<GroupCallPickupGetAvailableUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallPickupGetInstanceListRequest

Request to get a list of Call Pickup instances within a group.
 The response is
either C<GroupCallPickupGetInstanceListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallPickupGetInstanceRequest

Gets a Call Pickup group.
 The response is either
C<GroupCallPickupGetInstanceResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupCallPickupModifyInstanceRequest

Modifies a Call Pickup group. Replaces the entire list of users in the group.
The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 UserCallPickupGetRequest

Gets the details of the Call Pickup group that a user belongs to (if any).
 Any
user can only belong to one Call Pickup group.
 The response is either
C<UserCallPickupGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallRecordingGetRequest

Get the Call Recording platform for a group.
 The response is either a
C<GroupCallRecordingGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallRecordingModifyRequest

Modify the Call Recording platform assignment for a group.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 SystemCallRecordingAddPlatformRequest

Add a Call Recording platform.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=item netAddress

=item port

=item mediaStream

=item transportType

=back

Additionally there are generic tagged parameters.

=head3 SystemCallRecordingDeletePlatformRequest

Delete a Call Recording platform.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCallRecordingGetPlatformListRequest

Get list of Call Recording platforms.
 The response is either
C<SystemCallRecordingGetPlatformListResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallRecordingGetPlatformUsageRequest

Get the list of groups currently associated to the specified Call Recording
platform.
 The response is either
C<SystemCallRecordingGetPlatformUsageResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 SystemCallRecordingModifyPlatformRequest

Modify the specified Call Recording platform.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item name

=back

Additionally there are generic tagged parameters.

=head3 UserCallRecordingGetRequest

Get the Call Recording attributes for a user.
 The response is either a
C<UserCallRecordingGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallRecordingModifyRequest

Modify the Call Recording attributes for a user. The recording option "On
Demand" is not accepted for service instances.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemCallReturnGetRequest

Request the system level data associated with Call Return.
 The response is
either a C<SystemCallReturnGetResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallReturnModifyRequest

Modify the system level data associated with Call Return.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserCallTransferGetRequest14sp4

Request the user level data associated with Call Transfer.
 The response is
either a C<UserCallTransferGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallTransferModifyRequest

Modify the user level data associated with Call Transfer.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallWaitingGetRequest17sp4

Request the user level data associated with Call Waiting.
 The response is
either a C<UserCallWaitingGetResponse17sp4> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallWaitingModifyRequest

Modify the user level data associated with Call Waiting.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.
 The following elements are
only used in AS data mode:
 C<disableCallingLineIdDelivery>

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemCallWaitingGetRequest

Request the system level data associated with Call Waiting.
 The response is
either a C<SystemCallWaitingGetResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallWaitingModifyRequest

Modify the system level data associated with Call Waiting.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserCallingLineIDBlockingOverrideGetRequest

Request the user level data associated with Calling Line ID Blocking Override.
The response is either a C<UserCallingLineIDBlockingOverrideGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallingLineIDBlockingOverrideModifyRequest

Modify the user level data associated with Calling Line ID Blocking Override.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallingLineIDDeliveryBlockingGetRequest

Request the user level data associated with Calling Line ID Delivery Blocking.
The response is either a C<UserCallingLineIDDeliveryBlockingGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallingLineIDDeliveryBlockingModifyRequest

Modify the user level data associated with Calling Line ID Delivery Blocking.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallingNameDeliveryGetRequest

Request the user level data associated with Calling
 Name Delivery. The
response is either a
 C<UserCallingNameDeliveryGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallingNameDeliveryModifyRequest

Modify the user level data associated with Calling Name Delivery.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemCallingNameRetrievalGetRequest17sp4

Request the system's calling name retrieval attributes.
 The response is either
a C<SystemCallingNameRetrievalGetResponse17sp4> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallingNameRetrievalModifyRequest16sp1

Modifies the system's calling name retrieval attributes.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserCallingNameRetrievalGetRequest

Request the user level data associated with Calling Name Retrieval.
 The
response is either a C<UserCallingNameRetrievalGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallingNameRetrievalModifyRequest

Modify the user level data associated with Calling Name Retrieval.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallingNumberDeliveryGetRequest

Request the user level data associated with Calling
 Name Delivery. The
response is either a
 C<UserCallingNumberDeliveryGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallingNumberDeliveryModifyRequest

Modify the user level data associated with Calling Number Delivery.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemCallingPartyCategoryAddRequest

Add a Calling Party Category to system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item category

=back

Additionally there are generic tagged parameters.

=head3 SystemCallingPartyCategoryDeleteRequest

Delete a Calling Party Category from system. The category cannot be deleted if
it is the default or is in use by any users.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item category

=back

Additionally there are generic tagged parameters.

=head3 SystemCallingPartyCategoryGetListRequest

Get the list of all Calling Party Category in system.
 The response is either a
C<SystemCallingPartyCategoryGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCallingPartyCategoryGetRequest

Get an existing Calling Party Category in system.
 The response is either a
C<SystemCallingPartyCategoryGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item category

=back

Additionally there are generic tagged parameters.

=head3 SystemCallingPartyCategoryModifyRequest

Modify a Calling Party Category in system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item category

=back

Additionally there are generic tagged parameters.

=head3 UserCallingPartyCategoryGetRequest16

Request the user level data associated with Calling Party Category.
 The
response is either a C<UserCallingPartyCategoryGetResponse16> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCallingPartyCategoryModifyRequest16

Modify the user level data associated with Calling Party Category.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallingPlanAddDigitPatternRequest

Add a new calling plan digit string.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=item digitPattern

=back

Additionally there are generic tagged parameters.

=head3 GroupCallingPlanDeleteDigitPatternListRequest

Delete one or more calling plan digit strings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallingPlanGetDigitPatternListRequest

Get the list of calling plan digit strings for a group.
 The response is either
a C<GroupCallingPlanGetDigitPatternListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCallingPlanModifyDigitPatternRequest

Modify a calling plan digit string. The name is a key; it cannot be changed.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 UserChargeNumberGetRequest14sp9

Request the user level data associated with Charge Number.
 The response is
either a C<UserChargeNumberGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserChargeNumberModifyRequest

Modify the user level data associated with Charge Number.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemClassmarkAddRequest

Add a Class Mark to system.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item classmark

=item value

=back

Additionally there are generic tagged parameters.

=head3 SystemClassmarkDeleteRequest

Delete a Class Mark from system. It cannot be deleted if it is in use by any
users.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item classmark

=back

Additionally there are generic tagged parameters.

=head3 SystemClassmarkGetListRequest

Get the list of all Class Mark in system.
 The response is either a
C<SystemClassmarkGetListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemClassmarkModifyRequest

Modify a Class Mark in system.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item classmark

=back

Additionally there are generic tagged parameters.

=head3 SystemClassmarkGetUtilizationListRequest

Get the list of all users associated with a Class Mark in system. It is
possible to search by various criteria.
 Multiple search criteria are logically
C<ANDed> together.
 The response is either a
C<SystemClassmarkGetUtilizationListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item classmark

=back

Additionally there are generic tagged parameters.

=head3 UserClassmarkGetRequest

Request the Class Mark data associated with User.
 The response is either a
C<UserClassmarkGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserClassmarkModifyRequest

Modify the user level data associated with Class Mark.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupCommPilotCallManagerGetRequest

Request the group level data associated with C<CommPilot> Call Manager.
 The
response is either a C<GroupCommPilotCallManagerGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCommPilotCallManagerModifyRequest

Modify the group level data associated with C<CommPilot> Call Manager.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 UserCommPilotCallManagerGetRequest

Request the user level data associated with C<CommPilot> Call Manager.
 The
response is either a C<UserCommPilotCallManagerGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCommPilotCallManagerModifyRequest

Modify the user level data associated with C<CommPilot> Call Manager.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCommPilotExpressGetRequest

Get the user's C<commPilot> express service setting.
 The response is either a
C<UserCommPilotExpressGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCommPilotExpressModifyRequest

Modify the user's C<commPilot> express service setting.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.
 Engineering Note: This command is
used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCommPilotExpressSRGetRequest13mp16

Get the user's C<commPilot> express SR service setting.
 The response is either
a C<UserCommPilotExpressSRGetResponse13mp16> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCommPilotExpressSRModifyRequest

Modify the user's C<commPilot> express SR service setting.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringUserControlGetRequest

Gets the Communication Barring system level settings.
 The response is either
C<SystemCommunicationBarringUserControlGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCommunicationBarringUserControlModifyRequest

Modifies the system's Communication Barring User-Control settings.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserCommunicationBarringUserControlGetRequest

Lists the Communication Barring profiles available to a user and
 indicates
which profile if any is currently active for the user..
 The response is either
C<UserCommunicationBarringUserControlGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCommunicationBarringUserControlModifyRequest

Enabling a profile automatically disables the currently active profile.
 Also
allows the passcode for the service to be modified and the lockout to be reset.
 Admins only need to populate the C<newPasscode> field when changing the
passcode.  
 Users must populate both the C<oldPasscode> and new Passcode
fields when changing the passcode.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderBroadWorksCommunicatorGetRequest

Request to get Configuration Server for a specified service
 provider. The
response is either a C<ServiceProviderBroadWorksCommunicatorGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderBroadWorksCommunicatorModifyRequest

Request to modify the Configuration URL. The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserBroadWorksCommunicatorGetRequest

Request to get the Configuration Server for a specified user.
 The response is
either a C<UserBroadWorksCommunicatorGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemConnectedLineIdentificationPresentationGetRequest

Request the system level data associated with the COLP service.
 The response
is either a 
 C<SystemConnectedLineIdentificationPresentationGetResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemConnectedLineIdentificationPresentationModifyRequest

Modify the system level data associated with the COLP Service.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserConnectedLineIdentificationRestrictionGetRequest

Request the user level data associated with Connected Line ID Restriction.
 The
response is either a C<UserConnectedLineIdentificationRestrictionGetResponse>
or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserConnectedLineIdentificationRestrictionModifyRequest

Modify the user level data associated with Connected Line ID Restriction.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupCustomRingbackGroupGetRequest16

Get the group's custom ring back service settings.
 The response is either a
C<GroupCustomRingbackGroupGetResponse16> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupCustomRingbackGroupModifyRequest16

Modify the group's custom ring back service settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 UserCustomRingbackUserAddCriteriaRequest16

Add a criteria to the user's custom ringback service.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCustomRingbackUserDeleteCriteriaRequest

Delete a criteria from the user's custom ringback service.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCustomRingbackUserGetCriteriaListRequest

Get the user's custom ringback service criteria listing.
 The response is
either a C<UserCustomRingbackUserGetCriteriaListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCustomRingbackUserGetCriteriaRequest16

Get a criteria for the user's custom ringback service.
 The response is either
a C<UserCustomRingbackUserGetCriteriaResponse16> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserCustomRingbackUserModifyActiveCriteriaListRequest

Modify the user's custom ringback service criteria's active setting.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserCustomRingbackUserModifyCriteriaRequest16

Modify a criteria for the user's custom ringback service.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 SystemCustomerOriginatedTraceGetRequest

Request the system level data associated with Customer Originated Trace.
 The
response is either a C<SystemCustomerOriginatedTraceGetResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemCustomerOriginatedTraceModifyRequest

Modify the system level data associated with Customer Originated Trace.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserDirectedCallPickupWithBargeInGetRequest14sp7

Request the user level data associated with Directed Call Pickup With Barge In.
 The response is either a C<UserDirectedCallPickupWithBargeInGetResponse14sp7>
or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserDirectedCallPickupWithBargeInModifyRequest

Modify the user level data associated with Directed Call Pickup With Barge In.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupDirectoryNumberHuntingGetAvailableUserListRequest

Request to get the agents of a call center or hunt group that are available
 to
be assigned to a directory number hunting group.  They are agents that
 are not
already assigned to any other directory number hunting group.
 The response is
either
 C<GroupDirectoryNumberHuntingGetAvailableUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupDirectoryNumberHuntingGetRequest

Request to get the properties of the DNH service for a specified
C<serviceUserId>.
 It gets the agents of a call center or hunt group that are
members
 of a directory number hunting group.  They are agents that are not
already
 assigned to any other directory number hunting group.
 The response is
either C<GroupDirectoryNumberHuntingGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupDirectoryNumberHuntingModifyRequest

Replaces a list of users as agents for a directory number hunting group.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserDoNotDisturbGetRequest

Request the user level data associated with Do Not Disturb.
 The response is
either a C<UserDoNotDisturbGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserDoNotDisturbModifyRequest

Modify the user level data associated with Do Not Disturb.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.
 Engineering Note: This
command is used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserDualModeVCCGetRequest

Request to get the user level Dual Mode VCC service attributes
 Response is
either C<UserDualModeVCCGetResponse> or C<ErrorResponse>

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserDualModeVCCModifyRequest

Request to modify the user level IN Integration service attributes
 Response is
either C<UserINIntegrationGetResponse> or C<ErrorResponse>

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupEmergencyZonesAddHomeZoneListRequest

Add a list of home zones and/or home zone ranges to the the group.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupEmergencyZonesDeleteHomeZoneListRequest

Delete a list of home zones and/or home zone ranges to the the group.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupEmergencyZonesGetHomeZoneListRequest

Request the group level data associated with Emergency Zones.
 The response is
either a C<GroupEmergencyZonesGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupEmergencyZonesGetRequest

Request the group level data associated with Emergency Zones.
 The response is
either a C<GroupEmergencyZonesGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupEmergencyZonesModifyHomeZoneListRequest

Modify a list of home zones and/or home zone ranges.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupEmergencyZonesModifyRequest

Modify the group level data associated with Emergency Zones.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 SystemEmergencyZonesGetRequest

Request the system level data associated with Emergency Zones.
 The response is
either a C<SystemEmergencyZonesGetResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemEmergencyZonesModifyRequest

Modify the system level data associated with Emergency Zones.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 EnterpriseEnhancedCallLogsGetListRequest

Request users' call logs within an enterprise
 If the C<callLogType> is not
specified, all types of calls logs (placed, received, missed) are returned.
 It
is possible to restrict the number of rows returned using
C<responsePagingControl>. If C<responsePagingControl>
 is not specified, the
value of Enhanced Call Logs system parameter C<maxNonPagedResponseSize> will
control
 the maximum number of call logs can be returned. 
 The response is
either an C<EnterpriseEnhancedCallLogsGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 GroupEnhancedCallLogsGetListRequest

Request users' call logs within a group
 If the C<callLogType> is not
specified, all types of calls logs (placed, received, missed) are returned.
 It
is possible to restrict the number of rows returned using
C<responsePagingControl>.If C<responsePagingControl>
 is not specified, the
value of Enhanced Call Logs system parameter C<maxNonPagedResponseSize> will
control
 the maximum number of call logs can be returned. 
 The response is
either a C<GroupEnhancedCallLogsGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderEnhancedCallLogsGetRequest17sp4

Get the service provider's enhanced call log settings.
 The response is either
a C<ServiceProviderEnhancedCallLogsGetResponse17sp4> or an C<ErrorResponse>.
This command will return an C<ErrorResponse> if DBS is used as the call log
server.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderEnhancedCallLogsModifyRequest

Modify the Service Provider level data associated with Enhanced Call Logs.
Configures the maximum number of logged calls and maximum age of your user's
call logs.
 Log entries are deleted when either of the two limits is reached.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 SystemEnhancedCallLogsGetRequest17sp4

Request the system level data associated with Enhanced Call Logs. The response
is either a 
 C<SystemEnhancedCallLogsGetResponse17sp4> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemEnhancedCallLogsModifyRequest

Modify the system level data associated with Enhanced Call Logs.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserEnhancedCallLogsGetListRequest17sp4

Request user's call logs.
 If the C<callLogType> is not specified, all types of
calls logs (placed, received, missed) are returned.
 The filters
"C<dateTimeRange>", "C<numberFilter>", "C<redirectedNumberFilter>",
C<accountAuthorizationCodeFilter>"
 and ""C<subscriberType>" are ignored if
call logs are stored in CDS. When "C<ReceivedOrMissed>" is specified
 as
"C<callLogType>" and call logs are stored in CDS, all call logs including
placed will be returned.
 It is possible to restrict the number of rows
returned using C<responsePagingControl>. If C<responsePagingControl>
 is not
specified, the value of Enhanced Call Logs system parameter
C<maxNonPagedResponseSize> will control
 the maximum number of call logs can be
returned. 
 The response is either a
C<UserEnhancedCallLogsGetListResponse17sp4> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserExternalCallingLineIDDeliveryGetRequest

Request the user level data associated with External Calling Line ID Delivery.
The response is either a C<UserExternalCallingLineIDDeliveryGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserExternalCallingLineIDDeliveryModifyRequest

Modify the user level data associated with External Calling Line ID Delivery.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderExternalCustomRingbackGetRequest

Request the service provider level data associated with External Custom
Ringback.
 The response is either a
C<ServiceProviderExternalCustomRingbackGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderExternalCustomRingbackModifyRequest

Modify the service provider level data associated with External Custom
Ringback.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 UserExternalCustomRingbackGetRequest

Request the user level data associated with External Custom Ringback.
 The
response is either a C<UserExternalCustomRingbackGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserExternalCustomRingbackModifyRequest

Modify the user level data associated with External Custom Ringback.  
 The
user SIP URI, when selected, it replaces the SP address, port and prefix.  
The user SIP URI, if selected, is the Request URI of the SIP INVITE sent 
 to
the external server.  When the service provider data is used instead, 
 the
Request URI is constructed using the prefix, address, port and the user DN.  
The timeout value is the only SP configuration used when the user SIP URI is
selected.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserFaxMessagingGetRequest17sp1

Request the user level data associated with Fax Messaging.
 The response is
either a C<UserFaxMessagingGetResponse17sp1> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserFaxMessagingModifyRequest

Modify the user level data associated with Fax Messaging.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingAddInstanceRequest

Add a Group Paging instance to a group.
 The domain is required in the
C<serviceUserId>.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceUserId

=item serviceInstanceProfile

=item confirmationToneTimeoutSeconds

=item deliverOriginatorCLIDInstead

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingAddOriginatorListRequest

Add originator(s) to a paging group.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingAddTargetListRequest

Add target(s) to a paging group.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingDeleteInstanceRequest

Delete a Group Paging instance from a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingDeleteOriginatorListRequest

Delete originator(s) from a paging group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingDeleteTargetListRequest

Delete target(s) from a paging group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingGetAvailableOriginatorListRequest

Get a list of users that can be assigned as originators to a given paging
group.
 Searching for users by group only makes sense when the paging group is
part of an Enterprise.
 The response is either
C<GroupGroupPagingGetAvailableOriginatorListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingGetAvailableTargetListRequest

Get a list of users that can be assigned as targets to a given paging group.
Searching for users by group only makes sense when the paging group is part of
an Enterprise.
 The response is either
C<GroupGroupPagingGetAvailableTargetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingGetInstanceListRequest

Get a list of Paging Groups instances within a group.
 The response is either
C<GroupGroupPagingGetInstanceListResponse> or C<ErrorResponse>.
 It is possible
to get the instances within a specified department.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingGetInstanceRequest17sp3

Request to get all the information of a Group Paging instance.
 The response is
either C<GroupGroupPagingGetInstanceResponse17sp3> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingGetOriginatorListRequest

Get a list of originators assigned to a paging group.
 The response is either a
 C<GroupGroupPagingGetOriginatorListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingGetTargetListRequest

Get a list of targets assigned to a paging group.
 The response is either a
C<GroupGroupPagingGetTargetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingModifyActiveInstanceListRequest

Request to set the active status of Group Paging instances.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingModifyInstanceRequest

Request to modify a Group Paging instance.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingModifyOriginatorListRequest

Request to modify the originator list for a paging group.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingModifyTargetListRequest

Request to modify the target list for a paging group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingTargetsCapacityGetRequest

Request the maximum number of target users per paging group configured for a
group.
 The response is either a C<GroupGroupPagingTargetsCapacityGetResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupGroupPagingTargetsCapacityModifyRequest

Modify the maximum number of target users per paging group configured for a
group.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderGroupPagingTargetsCapacityGetRequest

Request the maximum number of target users per paging group configured for a
service provider.
 The response is either a
C<ServiceProviderGroupPagingTargetsCapacityGetResponse>
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderGroupPagingTargetsCapacityModifyRequest

Modify the maximum number of target users per paging group configured for a
service provider.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 UserGroupPagingGetListRequest

Get the list of all the Paging Groups a user was assigned as an originator.
The response is either a C<UserGroupPagingGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserHotelingGuestGetAvailableUserListRequest

Get a list of users that can be assigned as Hoteling Guests.
 The response is
either C<UserHotelingGuestGetAvailableUserListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserHotelingGuestGetRequest14sp4

Request the user level data associated with Hoteling Guest.
 The response is
either a C<UserHotelingGuestGetResponse14sp4> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserHotelingGuestModifyRequest

Modify the user level data associated with Hoteling Guest.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserHotelingHostGetRequest17

Request the user level data associated with Hoteling Host.
 The response is
either a C<UserHotelingHostGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserHotelingHostModifyRequest

Modify the user level data associated with Hoteling Host.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupHuntGroupAddInstanceRequest17sp4

Add a Hunt Group instance to a group.
 The domain is required in the
C<serviceUserId>.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.
 The following elements are only used in AS data mode:
C<useSystemHuntGroupCLIDSetting>, use value "true" in HSS data mode
C<includeHuntGroupNameInCLID>, use value "true" in HSS data mode
C<enableNotReachableForwarding>, use value "false" in HSS data mode
C<notReachableForwardToPhoneNumber>
 C<makeBusyWhenNotReachable>, use value
"false" in HSS data mode

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceUserId

=item serviceInstanceProfile

=item policy

=item huntAfterNoAnswer

=item noAnswerNumberOfRings

=item forwardAfterTimeout

=item forwardTimeoutSeconds

=back

Additionally there are generic tagged parameters.

=head3 GroupHuntGroupDeleteInstanceRequest

Delete a Hunt Group instance from a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupHuntGroupGetAvailableUserListRequest

Get a list of users that can be assigned to a Hunt Group group.
 Searching for
users by group only makes sense when the hunt group is part of an Enterprise.
The response is either C<GroupHuntGroupGetAvailableUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupHuntGroupGetInstanceListRequest

Get a list of Hunt Group instances within a group.
 The response is either
C<GroupHuntGroupGetInstanceListResponse> or C<ErrorResponse>.
 It is possible
to get the instances within a specified department.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupHuntGroupGetInstanceRequest17sp4

Request to get all the information of a Hunt Group instance.
 The response is
either C<GroupHuntGroupGetInstanceResponse17sp4> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupHuntGroupModifyActiveInstanceListRequest

Request to set the active status of Hunt Group instances.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupHuntGroupModifyInstanceRequest

Request to modify a Hunt Group instance.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.
 The following elements are only used
in AS data mode:
 C<useSystemHuntGroupCLIDSetting>
C<includeHuntGroupNameInCLID>
 C<enableNotReachableForwarding>
C<notReachableForwardToPhoneNumber>
 C<makeBusyWhenNotReachable>

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupHuntGroupModifyInstanceWeightedCallDistributionRequest

Request to modify the weighted call distribution of a Hunt Group instance.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.
 NOTE: Prior to
release 14, any agents who were not in the list kept their
 existing weight
setting. In release 14, any agents who are not in the list
 will have their
weight set to 0.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 SystemHuntGroupGetRequest17

Request the system level data associated with Hunt Group.
 The response is
either a C<SystemHuntGroupGetResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemHuntGroupModifyRequest

Modify the system level data associated with Hunt Group.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserINIntegrationGetRequest

Request to get the user level IN Integration service attributes
 Response is
either C<UserINIntegrationGetResponse> or C<ErrorResponse>

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserINIntegrationModifyRequest

Request to modify the user level IN Integration service attributes
 Response is
either C<SuccessResponse> or C<ErrorResponse>

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInCallServiceActivationGetRequest

Request the user level data associated with In-Call Service Activation.
 The
response is either a C<UserInCallServiceActivationGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInCallServiceActivationModifyRequest

Modify the user level data associated with In-Call Service Activation.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderInCallServiceActivationGetRequest17

Request the service provider's DTMF based in-call service activation trigger
attributes.The response is either a
C<ServiceProviderInCallServiceActivationGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderInCallServiceActivationModifyRequest17

Modifies the service provider's DTMF based in-call service activation trigger
attributes.The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 SystemInCallServiceActivationGetRequest17

Request the system's DTMF based in-call service activation trigger attributes.
The response is either a C<SystemInCallServiceActivationGetResponse17> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemInCallServiceActivationModifyRequest17

Modifies the system's DTMF based in-call service activation trigger 
attributes.The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupIncomingCallingPlanGetListRequest

Request the group's incoming calling plan settings.
 The response is either a
C<GroupIncomingCallingPlanGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupIncomingCallingPlanModifyListRequest

Change the group's incoming calling plan settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 UserIncomingCallingPlanGetRequest

Request the user's incoming calling plan settings.
 The response is either a
C<UserIncomingCallingPlanGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserIncomingCallingPlanModifyRequest

Change the user's incoming calling plan settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantConferencingAddInstanceRequest14

Add a Instant Conferencing instance to a group.
 The domain is required in the
C<serviceUserId>.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceUserId

=item serviceInstanceProfile

=item conferenceBridgeLinePort

=item allocatedPorts

=item serviceProfileAppliedOnOutcall

=item allowOutdialInInvitation

=item allowDocumentDownload

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantConferencingDeleteInstanceRequest

Delete a Instant Conferencing instance from a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantConferencingGetAvailableUserListRequest

Get a list of users that can be assigned to a Instant Conferencing group.
Searching for users by group only makes sense when the Instant Conferencing is
part of an Enterprise.
 The response is either
C<GroupInstantConferencingGetAvailableUserListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantConferencingGetInstanceListRequest

Get a list of Instant Conferencing instances within a group.
 The response is
either C<GroupInstantConferencingGetInstanceListResponse> or C<ErrorResponse>.
It is possible to get the instances within a specified department.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantConferencingGetInstanceRequest17

Request to get all the information of an Instant Conferencing instance.
 The
response is either C<GroupInstantConferencingGetInstanceResponse17> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantConferencingGetRequest

Request the number of conference ports configured for a group.
 The response is
either a C<GroupInstantConferencingGetResponse>
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantConferencingModifyActiveInstanceListRequest

Request to set the active status of Instant Conferencing instances.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupInstantConferencingModifyInstanceRequest16

Request to modify a Instant Conferencing instance.
 The response is either
C<SuccessResponse> or
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantConferencingModifyRequest

Modify the number of conference ports configured for a group.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderInstantConferencingGetRequest

Request the number of conference ports configured for a service provider.
 The
response is either a C<ServiceProviderInstantConferencingGetResponse>
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderInstantConferencingModifyRequest

Modify the number of conference ports configured for a service provider.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 SystemInstantConferencingAddDeviceRequest14

Add an Instant Conferencing device to the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemInstantConferencingDeleteDeviceRequest

Request to delete an Instant Conferencing device from the system.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemInstantConferencingGetDeviceListRequest14

Request to get a list of Instant Conferencing devices defined in the system.
The response is either a C<SystemInstantConferencingGetDeviceListResponse14> or
an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemInstantConferencingGetDeviceRequest14

Request to get an Instant Conferencing devices settings.
 The response is
either a C<SystemInstantConferencingGetDeviceResponse14> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemInstantConferencingGetHoldPolicyRequest

Request the system level data associated with Instant Conferencing hold
functions.
 The response is either a
C<SystemInstantConferencingGetHoldPolicyResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemInstantConferencingGetRequest

Request the system level data associated with Instant Conferencing.
 The
response is either a C<SystemInstantConferencingGetResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemInstantConferencingModifyDeviceRequest14

Request to modify an Instant Conferencing device in the system.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemInstantConferencingModifyHoldPolicyRequest

Modify the system level data associated with Instant Conferencing hold
functions.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemInstantConferencingModifyRequest

Modify the system level data associated with Instant Conferencing.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemInstantConferencingResetUserPasswordsRequest

Regenerate new credentials for the conference bridges defined on the
 specified
device.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemInstantConferencingResynchronizeDeviceRequest

This command is used to resynchronize all the conference bridges and
administrators defined on the specified device, pushing data from the
Application Server to the Conferencing Server.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingAddConferenceDocumentRequest

Add a conference document.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item conferenceKey

=item documentFile

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingAddConferenceRequest

Add a conference.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item bridgeServiceUserId

=item conferenceOwnerUserId

=item title

=item leaderRequired

=item leaderReleaseDropsParticipants

=item announceCallers

=item conferenceType

=item conferenceSchedule

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingAddQuickConferenceRequest

Add a conference quickly.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item bridgeServiceUserId

=item leaderPhoneNumber

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingControlCallRequest

Control a conference call.
 The legId is given in the
C<UserInstantConferencingGetConferenceCallResponse>.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item conferenceKey

=item conferenceCallId

=item action

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingControlStandAloneCallRequest

Control a conference call from a stand alone user.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item conferenceOwnerUserId

=item conferenceKey

=item conferenceCallId

=item action

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingDeleteConferenceDocumentListRequest

Request to delete one or more conference documents.
 The documentId is obtained
from the C<UserInstantConferencingGetConferenceDocumentListResponse>.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item conferenceKey

=item conferenceCallId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingDeleteConferenceListRequest

Request to delete one or more conferences which are owned by the user or the
user's delegators.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingDeleteConferenceRecordingListRequest

Request to delete one or more conference recordings owned by the user or the
user's delegators.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingEndPresentationRequest

End the presentation of a conference document.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item bridgeServiceUserId

=item documentId

=item accessCode

=item slideName

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetAvailableBridgeDelegatesListRequest

Get a list of available bridge administrators who could be delegates of a user.
 The response is either
C<UserInstantConferencingGetAvailableBridgeDelegatesListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item bridgeServiceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetAvailableConferenceOwnerListRequest

Get the list of users who could are eligible to be owner of a conference.
Returns a list of instant conferencing bridges and the possible conference
owners for
 the bridges owned by the user or the user is delegated to.
 The
response is either
C<UserInstantConferencingGetAvailableConferenceOwnerListResponse> or
C<ErrorResponse>.
 It is possible to get the list of possible conference owners
for one conferencing bridge.
 If the C<bridgeServiceUserId> is specified, only
the possible conference owners for that bridge
 are returned, otherwise the
possible conference owners of all bridges are returned.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetBridgeDelegatesListRequest

Get a list of delegates of a bridge administrator.
 The response is either
C<UserInstantConferencingGetBridgeDelegatesListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item bridgeServiceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetConferenceBridgeReportRequest

Get conference details reports.
 The response is either
C<UserInstantConferencingGetConferenceBridgeReportResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item bridgeServiceUserId

=item reportStartDate

=item reportEndDate

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetConferenceCallRequest

Get the information of a conference call owned or delegated by the user.
 The
response is either C<UserInstantConferencingGetConferenceCallResponse>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item conferenceKey

=item conferenceCallId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetConferenceDocumentListRequest

Get the list of conference documents.
 The response is either
C<UserInstantConferencingGetConferenceDocumentListResponse>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item conferenceKey

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetConferenceRecordingListRequest

Get the list of recordings of a conference owned or delegated by the user.
 The
response is either C<UserInstantConferencingGetConferenceRecordingListResponse>
 or C<ErrorResponse>.
 If C<conferenceKey> is not in the request, the
recordings for all the conferences of the user will be returned.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetConferenceRecordingRequest14Sp9

Get the information of a conference recording owned or delegated by the user.
The response is either
C<UserInstantConferencingGetConferenceRecordingResponse14Sp9>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item recordingKey

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetConferenceRequest14Sp6

Get the information of a conference owned or delegated by the user.
 The
response is either C<UserInstantConferencingGetConferenceResponse14Sp6>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item conferenceKey

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetCurrentConferenceListRequest

Get the list of current conferences owned by the user or delegated by the
user's delegators.
 The response is either
C<UserInstantConferencingGetCurrentConferenceListResponse>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetExpiredConferenceListRequest

Get the list of expired conferences owned by the user or the user's delegators.
 The response is either
C<UserInstantConferencingGetExpiredConferenceListResponse>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetFutureConferenceListRequest

Get the list of future conferences owned by the user or the user's delegators.
The response is either
C<UserInstantConferencingGetFutureConferenceListResponse>
 or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetInstanceListRequest

Get a list of Instant Conferencing instances for which a user has administrator
privilege.
 The response is either
C<UserInstantConferencingGetInstanceListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetStandAloneConferenceCallRequest

Get the information of a conference call owned or delegated by the user.
 The
response is either
C<UserInstantConferencingGetStandAloneConferenceCallResponse>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item conferenceOwnerUserId

=item conferenceKey

=item conferenceCallId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetStandAloneConferenceDocumentListRequest14

Get the list of conference documents.
 The response is either
C<UserInstantConferencingGetStandAloneConferenceDocumentListResponse14>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item conferenceOwnerUserId

=item conferenceKey

=item isWebServerCollocated

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetStandAloneConferenceRecordingRequest

Get the information of a conference recording..
 The response is either
C<UserInstantConferencingGetStandAloneConferenceRecordingResponse>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item conferenceOwnerUserId

=item recordingKey

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetStandAloneConferenceRequest14Sp6

Get the information of a conference owned or delegated by the user.
 The
response is either
C<UserInstantConferencingGetStandAloneConferenceResponse14Sp6>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item conferenceOwnerUserId

=item conferenceKey

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingGetStandAloneSlideShowContentRequest

Get slide show content of a recorded conference.
 The response is either
C<UserInstantConferencingGetStandAloneSlideShowContentResponse>
 or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item bridgeServiceUserId

=item conferenceOwnerUserId

=item documentId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingLoginStandAloneRequest

Handles stand alone login. Return a set of information for the user.
 The
response is either C<UserInstantConferencingLoginStandAloneResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item bridgeServiceUserId

=item conferenceOwnerUserId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingModifyBridgeDelegatesRequest

Assign a bridge administrator to be a user's delegates.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item bridgeServiceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingModifyConferencePresentationPasswordRequest

Modify the presentation password.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item conferenceKey

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingModifyConferenceRecordingSlideShowPasswordRequest

Modify the conference recording slideshow password.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item recordingKey

=item recordingCallId

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingModifyConferenceRequest14

Modify an existing conference.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item conferenceKey

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingPlayRecordingToPhoneRequest

Play a recording to a specified phone.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item recordingKey

=item playBackPhoneNumber

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingPlayStandAloneRecordingToPhoneRequest

Play a recording to a specified phone.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item conferenceOwnerUserId

=item recordingKey

=item playBackPhoneNumber

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingSetPresentationSlideNameRequest

Set presentation slide name of a conference document.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item bridgeServiceUserId

=item documentId

=item accessCode

=item previousSlideName

=item newSlideName

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingSetPresentationSlideNumberRequest

Set presentation slide number of a conference document.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item bridgeServiceUserId

=item documentId

=item accessCode

=item slideName

=item slideNumber

=back

Additionally there are generic tagged parameters.

=head3 UserInstantConferencingStartPresentationRequest

Start presentation of a conference document.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item bridgeServiceUserId

=item accessCode

=item documentId

=item slideName

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantGroupCallAddInstanceRequest14

Request to add an Instant Group Call service instance to a group.
 The domain
is required in the C<serviceUserId>.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceUserId

=item serviceInstanceProfile

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantGroupCallDeleteInstanceRequest

Request to delete an Instant Group Call service instance from a group.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantGroupCallGetInstanceListRequest

Request to get a list of Instant Group Call service instances within a group.
The response is either C<GroupInstantGroupCallGetInstanceListResponse> or
C<ErrorResponse>.
 It is possible to get the service instances within a
specified department.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantGroupCallGetInstanceRequest17

Request to get all the information of an Instant Group Call service instance.
The response is either C<GroupInstantGroupCallGetInstanceResponse17> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupInstantGroupCallModifyActiveInstanceListRequest

Request to set the active status of Instant Group Call service instances.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupInstantGroupCallModifyInstanceRequest

Request to modify an Instant Group Call service instance.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 SystemIntelligentNetworkServiceControlGetRequest14

Request the system level data associated with Intelligent Network Service
Control.
 The response is either a
C<SystemIntelligentNetworkServiceControlGetResponse14>
 or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemIntelligentNetworkServiceControlModifyRequest

Modify the system level data associated with Intelligent Network Service
Control.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserIntelligentNetworkServiceControlGetRequest

Request the user level data associated with Intelligent Network Service
Control.
 The response is either a
C<UserIntelligentNetworkServiceControlGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserIntelligentNetworkServiceControlModifyRequest

Modify the user level data associated with Intelligent Network Service Control.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupInterceptGroupGetRequest16sp1

Get the group's intercept group service settings.
 The response is either a
C<GroupInterceptGroupGetResponse16sp1> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupInterceptGroupModifyRequest16

Modify the group's intercept group service settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 SystemInterceptUserAddDnListRequest

Request to add an Intercept User number(s) to the system.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemInterceptUserDeleteDnListRequest

Request to delete an Intercept User number(s) from the system.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemInterceptUserGetDnListRequest

Request to get a list of Intercept User dns defined in the system.
 The
response is either a C<SystemInterceptUserGetDnListResponse>
 or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemInterceptUserGetRequest

Get the system-level intercept user service settings.
 The response is either a
C<SystemInterceptUserGetResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemInterceptUserModifyDnRequest

Request to modify a Intercept User number's description in the system.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 SystemInterceptUserModifyRequest

Modify the system-level intercept user service settings.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserInterceptUserGetRequest16sp1

Get the user's intercept user service settings.
 The response is either a
C<UserInterceptUserGetResponse16sp1> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInterceptUserModifyRequest16

Modify the user's intercept user service settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInternalCallingLineIDDeliveryGetRequest

Request the user level data associated with Internal Calling Line ID Delivery.
The response is either a C<UserInternalCallingLineIDDeliveryGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserInternalCallingLineIDDeliveryModifyRequest

Modify the user level data associated with Internal Calling Line ID Delivery.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupInventoryReportGetRequest

Request the group's inventory report.
 The response is either a
C<GroupInventoryReportGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item includeUsers

=item includeServices

=item includeDns

=item includeAccessDevices

=item includeDepartments

=back

Additionally there are generic tagged parameters.

=head3 SystemInventoryReportGetRequest

Request the system level data associated with Inventory Report.
 The response
is either a C<SystemInventoryReportGetResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemInventoryReportModifyRequest

Modify the system level data associated with Inventory Report.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupLDAPIntegrationGetDirectoryRequest

Get the LDAP directory attributes for a group.
 The response is either a
C<GroupLDAPIntegrationGetDirectoryResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupLDAPIntegrationModifyDirectoryRequest

Modify the LDAP directory attributes for a group.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupLDAPIntegrationGetRequest

Request the group level data associated with LDAP Integration.
 The response is
either a C<GroupLDAPIntegrationGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupLDAPIntegrationModifyRequest

Modify the group level data associated with LDAP Integration.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderLDAPIntegrationGetDirectoryRequest

Get the LDAP directory attributes for a service provider.
 The response is
either a C<ServiceProviderLDAPIntegrationGetDirectoryResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderLDAPIntegrationModifyDirectoryRequest

Modify the LDAP directory attributes for a service provider.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 SystemLDAPIntegrationGetDirectoryRequest

Request the system level data associated with LDAP Integration.
 The response
is either a C<SystemLDAPIntegrationGetDirectoryResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemLDAPIntegrationModifyDirectoryRequest

Modify the system level data associated with LDAP Integration.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserLDAPIntegrationGetDirectoryListRequest

Request the LDAP entry lists for a user.
 The response is either a
C<UserLDAPIntegrationGetDirectoryListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserLDAPIntegrationGetDirectoryEntryRequest

Request one LDAP entry for a user.
 The response is either a
C<UserLDAPIntegrationGetDirectoryEntryResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item entryName

=back

Additionally there are generic tagged parameters.

=head3 SystemLegacyAutomaticCallbackGetLineTypeListRequest

Request the system's legacy automatic callback line type settings.
 The
response is either a C<SystemLegacyAutomaticCallbackGetTypeLineListResponse> or
 an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemLegacyAutomaticCallbackGetRequest

Request the system's legacy automatic callback attributes.
 The response is
either a C<SystemLegacyAutomaticCallbackGetResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemLegacyAutomaticCallbackModifyLineTypeRequest

Modifies the system's legacy automatic callback line type attributes.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item lineType

=back

Additionally there are generic tagged parameters.

=head3 SystemLegacyAutomaticCallbackModifyRequest

Modifies the system's legacy automatic callback attributes.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserLegacyAutomaticCallbackGetRequest

Request the user level data associated with Legacy Automatic Callback.
 The
response is either a C<UserLegacyAutomaticCallbackGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserLegacyAutomaticCallbackModifyRequest

Modify the user level data associated with Legacy Automatic Callback.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemLocationBasedCallingRestrictionsGetRequest17sp3

Gets system level the Location Based Calling Restrictions attributes.
 The
response is either a C<SystemLocationBasedCallingRestrictionsGetResponse17sp3>
or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemLocationBasedCallingRestrictionsModifyRequest

Modifies the system level Location Based Calling Restriction attributes.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserMWIDeliveryToMobileEndpointGetRequest

Request the user level data associated with MWI Delivery to Mobile Endpoint
service.
 The response is either a
C<UserMWIDeliveryToMobileEndpointGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserMWIDeliveryToMobileEndpointModifyRequest

Request to modify the user level data associated with MWI Delivery to Mobile
Endpoint service.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderMaliciousCallTraceGetRequest

Get the service provider's Malicious Call Trace settings.
 The response is
either a C<ServiceProviderMaliciousCallTraceGetResponse> 
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderMaliciousCallTraceModifyRequest

Modify the service provider's Malicious Call Trace settings.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 SystemMaliciousCallTraceGetRequest

Get Malicious Call Trace system parameters and the list of users that use the 
Malicious Call Trace feature.
 The response is either a
C<SystemMaliciousCallTraceGetResponse> or 
 an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMaliciousCallTraceModifyRequest

Modify a Malicious Call Trace system parameter.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserMaliciousCallTraceGetRequest

Request the user level data associated with Malicious Call Trace.
 The response
is either a C<UserMaliciousCallTraceGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserMaliciousCallTraceModifyRequest

Modify the user level data associated with Malicious Call Trace.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupMeetMeConferencingAddInstanceRequest

Add a Meet-Me Conferencing bridge to a group.
 The domain is required in the
C<serviceUserId>.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceUserId

=item serviceInstanceProfile

=item allocatedPorts

=back

Additionally there are generic tagged parameters.

=head3 GroupMeetMeConferencingDeleteInstanceRequest

Delete a Meet-Me Conferencing bridge from a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupMeetMeConferencingGetAvailableUserListRequest

Get a list of users that can be assigned to a Meet-Me Conferencing bridge.
Searching for users by group only makes sense when the Meet-Me Conferencing is
part of an Enterprise.
 The response is either
C<GroupMeetMeConferencingGetAvailableUserListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupMeetMeConferencingGetInstanceListRequest

Get a list of Meet-Me Conferencing instances within a group.
 The response is
either C<GroupMeetMeConferencingGetInstanceListResponse> or C<ErrorResponse>.
It is possible to get the instances within a specified department.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupMeetMeConferencingGetInstanceRequest17sp3

Request to get all the information of a Meet-Me Conferencing bridge.
 The
response is either C<GroupMeetMeConferencingGetInstanceResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupMeetMeConferencingGetRequest

Request the group level data associated with Meet-Me Conferencing functions.
The response is either a C<GroupMeetMeConferencingGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupMeetMeConferencingModifyActiveInstanceListRequest

Request to set the active status of Meet-Me Conferencing instances.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupMeetMeConferencingModifyInstanceRequest

Request to modify a Meet-Me Conferencing bridge.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupMeetMeConferencingModifyRequest

Modify the group level data associated with Meet-Me Conferencing functions.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderMeetMeConferencingGetRequest

Request the service provider/enterprise level data associated with Meet-Me
Conferencing functions.
 The response is either a
C<ServiceProviderMeetMeConferencingGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderMeetMeConferencingModifyRequest

Modify the service provider/enterprise level data associated with Meet-Me
Conferencing functions.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 SystemMeetMeConferencingGetRequest17sp3

Request the system level data associated with Meet-Me Conferencing functions.
The response is either a C<SystemMeetMeConferencingGetResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMeetMeConferencingModifyRequest

Modify the system level data associated with Meet-Me Conferencing.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserMeetMeConferencingAddConferenceRequest

Add a Meet-Me conference.
 The response is either
C<UserMeetMeConferencingAddConferenceResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item bridgeId

=item title

=back

Additionally there are generic tagged parameters.

=head3 UserMeetMeConferencingDeleteConferenceListRequest

Request to delete one or more conferences which are owned by the user.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserMeetMeConferencingDeleteConferenceRecordingListRequest

Request to delete one or more conference recordings owned by the user.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserMeetMeConferencingGetBridgeListRequest

Get the list of Meet-Me Conferencing bridges for which the user is a host.
 The
response is either C<UserMeetMeConferencingGetBridgeListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserMeetMeConferencingGetConferenceListRequest

Get the list of all conferences owned by the user.
 The response is either
C<UserMeetMeConferencingGetConferenceListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserMeetMeConferencingGetConferenceRecordingListRequest

Get the list of recordings of the conferences owned by the host.
 The response
is either C<UserMeetMeConferencingGetConferenceRecordingListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserMeetMeConferencingGetConferenceRequest

Get the information of a conference owned by the user.
 The response is either
C<UserMeetMeConferencingGetConferenceResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item conferenceKey

=back

Additionally there are generic tagged parameters.

=head3 UserMeetMeConferencingModifyConferenceRequest

Modify an existing conference.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item conferenceKey

=back

Additionally there are generic tagged parameters.

=head3 GroupMusicOnHoldAddInstanceRequest16

Add a Music on Hold Instance to a department.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item department

=item isActiveDuringCallHold

=item isActiveDuringCallPark

=item isActiveDuringBusyCampOn

=item source

=item useAlternateSourceForInternalCalls

=back

Additionally there are generic tagged parameters.

=head3 GroupMusicOnHoldDeleteInstanceRequest

Delete a Music On Hold department instance.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item department

=back

Additionally there are generic tagged parameters.

=head3 GroupMusicOnHoldGetInstanceRequest16

Get a Music On Hold data for a group or department instance.
 The response is
either C<GroupMusicOnHoldGetInstanceResponse16> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupMusicOnHoldGetDepartmentListRequest

Returns a list of all departments that have a Music On Hold instance.
 The
response is either C<GroupMusicOnHoldGetDepartmentListResponse> or
C<ErrorResponse>.
 It is possible to get the instances within a specified
department.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupMusicOnHoldModifyInstanceRequest16

Modify data for a group or department Music On Hold Instance.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 SystemMusicOnHoldGetRequest

Request the system level data associated with Music On Hold.
 The response is
either a C<SystemMusicOnHoldGetResponse> or an
 C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemMusicOnHoldModifyRequest

Modify the system level data associated with Music On Hold.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserMusicOnHoldGetRequest

Request the user level data associated with Music On Hold.
 The response is
either a C<UserMusicOnHoldGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserMusicOnHoldModifyRequest

Modify the user level data associated with Music On Hold.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserMusicOnHoldUserGetRequest16

Request the user level data associated with Music On Hold User.
 The response
is either a C<UserMusicOnHoldUserGetResponse16> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserMusicOnHoldUserModifyRequest16

Modify data for Music On Hold User.
 The response is either a
C<SuccessResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanAuthorizationCodeGetListRequest

Request the list of authorization codes for a group default and it's
departments.
 The response is either a
C<GroupOutgoingCallingPlanAuthorizationCodeGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanCallMeNowGetListRequest

Request the Call Me Now call permissions for a group default and it's
departments.
 The response is either a
C<GroupOutgoingCallingPlanCallMeNowGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanCallMeNowModifyListRequest

Modify the Call Me Now call permissions for a group default and it's
departments.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanDepartmentAuthorizationCodeAddListRequest

Add a list of authorization codes to the group's default or a department. When
department is not
 specified, it is for the group default.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanDepartmentAuthorizationCodeDeleteListRequest

Delete a list of authorization codes from the group's default or a department.
When department is not
 specified, it is for the group default.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanDepartmentAuthorizationCodeGetListRequest

Request the list of authorization codes for a group default or a department. 
When department is not
 specified, it is for the group default.
 The response
is either a
C<GroupOutgoingCallingPlanDepartmentAuthorizationCodeGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanDigitPlanCallMeNowGetListRequest

Request the Call Me Now call permissions for digit patterns for a group default
and it's departments.
 The response is either a
C<GroupOutgoingCallingPlanDigitPlanCallMeNowGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanDigitPlanCallMeNowModifyListRequest

Modify the Call Me Now call permissions for digit patterns for a group default
and it's departments.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanDigitPlanOriginatingGetListRequest

Request the originating permissions for digit patterns for a group default and
it's departments.
 The response is either a
C<GroupOutgoingCallingPlanDigitPlanOriginatingGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanDigitPlanOriginatingModifyListRequest

Modify the originating permissions for digit patterns for a group default and
it's departments.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanDigitPlanRedirectingGetListRequest

Request the redirecting permissions for digit patterns for a group default and
it's departments.
 The response is either a
C<GroupOutgoingCallingPlanDigitPlanRedirectingGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanDigitPlanRedirectingModifyListRequest

Modify the redirecting permissions for digit patterns for a group default and
it's departments.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanOriginatingGetListRequest

Request the originating permissions for a group default and it's departments.
The response is either a C<GroupOutgoingCallingPlanOriginatingGetListResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanOriginatingModifyListRequest

Modify the originating permissions for a group default and it's departments.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanPinholeDigitPatternAddRequest

Add a new calling plan Pinhole digit string.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=item digitPattern

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanPinholeDigitPatternDeleteListRequest

Delete one or more calling plan Pinhole digit strings.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanPinholeDigitPatternGetListRequest

Get the list of calling plan Pinhole digit strings for a group.
 The response
is either a C<GroupOutgoingCallingPlanPinholeDigitPatternGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanPinholeDigitPatternModifyRequest

Modify a calling plan Pinhole digit string. The name is a key; it cannot be
changed.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowGetListRequest

Request the Call Me Now permissions for Pinhole digit patterns for a group
default and its departments.
 The response is either a
C<GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanPinholeDigitPlanCallMeNowModifyListRequest

Modify the Call Me Now permissions for Pinhole digit patterns for a group
default and its departments.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanPinholeDigitPlanOriginatingGetListRequest

Request the originating permissions for Pinhole digit patterns for a group
default and its departments.
 The response is either a
C<GroupOutgoingCallingPlanPinholeDigitPlanOriginatingGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanPinholeDigitPlanOriginatingModifyListRequest

Modify the originating permissions for Pinhole digit patterns for a group
default and its departments.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanPinholeDigitPlanRedirectingGetListRequest

Request the redirecting permissions for Pinhole digit patterns for a group
default and its departments.
 The response is either a
C<GroupOutgoingCallingPlanPinholeDigitPlanRedirectingGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanPinholeDigitPlanRedirectingModifyListRequest

Modify the redirecting permissions for Pinhole digit patterns for a group
default and its departments.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanRedirectingGetListRequest

Request the initiating call forwards/transfer permissions for a group default
and it's departments.
 The response is either a
C<GroupOutgoingCallingPlanRedirectingGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanRedirectingModifyListRequest

Modify the initiating call forwards/transfer permissions for a group default
and it's departments.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanRedirectedGetListRequest

Request the call forwarded/transferred permissions for a group default and it's
departments.
 The response is either a
C<GroupOutgoingCallingPlanRedirectedGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanRedirectedModifyListRequest

Modify the call forwarded/transferred permissions for a group default and it's
departments.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanTransferNumbersGetListRequest

Request the list of transfer numbers for a group default and it's departments.
The response is either a
C<GroupOutgoingCallingPlanTransferNumbersGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupOutgoingCallingPlanTransferNumbersModifyListRequest

Modify the list of transfer numbers for a group default and it's departments.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 SystemOutgoingCallingPlanCallTypeAddMappingRequest

Add a system outgoing calling plan call type mapping.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item countryCode

=item digitMap

=item callType

=back

Additionally there are generic tagged parameters.

=head3 SystemOutgoingCallingPlanCallTypeDeleteMappingRequest

Delete a system outgoing calling plan call type mapping.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item countryCode

=item digitMap

=back

Additionally there are generic tagged parameters.

=head3 SystemOutgoingCallingPlanCallTypeGetListRequest

Request to get the list of call types of outgoing calling plan
 Response is
C<SystemOutgoingCallingPlanCallTypeGetListRequest> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemOutgoingCallingPlanCallTypeGetMappingListRequest

Get a list of system outgoing calling plan call type mappings.
 The response is
either C<SystemOutgoingCallingPlanCallTypeGetMappingListResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemOutgoingCallingPlanGetRequest17sp3

Request the system level data associated with Outgoing Calling Plan.
 The
response is either a C<SystemOutgoingCallingPlanGetResponse17sp3> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemOutgoingCallingPlanModifyRequest

Modify the system level data associated with Outgoing Calling Plan.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanAuthorizationCodeAddListRequest

Add a list of authorization codes to a user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item codeEntry

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanAuthorizationCodeDeleteListRequest

Delete a list of authorization codes from a user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item code

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanAuthorizationCodeGetListRequest

Request the list of authorization codes for a user.
 The response is either a
C<UserOutgoingCallingPlanAuthorizationCodeGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanAuthorizationCodeGetRequest

Request the authorization code setting for a user.
 The response is either a
C<UserOutgoingCallingPlanAuthorizationCodeGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanAuthorizationCodeModifyRequest

Modify the authorization setting for a user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanCallMeNowGetRequest

Request the Call Me Now call permissions for a user.
 The response is either a
C<UserOutgoingCallingPlanCallMeNowGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanCallMeNowModifyRequest

Modify the Call Me Now call permissions for a user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanDigitPlanCallMeNowGetRequest

Request the Call Me Now call permissions for digit patterns for a user.
 The
response is either a C<UserOutgoingCallingPlanDigitPlanCallMeNowGetResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanDigitPlanCallMeNowModifyRequest

Modify the Call Me Now call permissions for digit patterns for a user.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanDigitPlanOriginatingGetRequest

Request the originating permissions for digit patterns for a user.
 The
response is either a C<UserOutgoingCallingPlanDigitPlanOriginatingGetResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanDigitPlanOriginatingModifyRequest

Modify the originating permissions for digit patterns for a user.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanDigitPlanRedirectingGetRequest

Request the redirecting permissions for digit patterns for a user.
 The
response is either a C<UserOutgoingCallingPlanDigitPlanRedirectingGetResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanDigitPlanRedirectingModifyRequest

Modify the redirecting permissions for digit patterns for a user.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanOriginatingGetRequest

Request the originating permissions for a user.
 The response is either a
C<UserOutgoingCallingPlanOriginatingGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanOriginatingModifyRequest

Modify the originating permissions for a user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanPinholeDigitPlanCallMeNowGetRequest

Request the Call Me Now permissions for Pinhole digit patterns for a user.
 The
response is either a
C<UserOutgoingCallingPlanPinholeDigitPlanCallMeNowgGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanPinholeDigitPlanCallMeNowModifyRequest

Modify the Call Me Now permissions for Pinhole digit patterns for a user.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanPinholeDigitPlanOriginatingGetRequest

Request the originating permissions for Pinhole digit patterns for a user.
 The
response is either a
C<UserOutgoingCallingPlanPinholeDigitPlanOriginatingGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanPinholeDigitPlanOriginatingModifyRequest

Modify the originating permissions for Pinhole digit patterns for a user.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanPinholeDigitPlanRedirectingGetRequest

Request the redirecting permissions for Pinhole digit patterns for a user.
 The
response is either a
C<UserOutgoingCallingPlanPinholeDigitPlanRedirectingGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanPinholeDigitPlanRedirectingModifyRequest

Modify the redirecting permissions for Pinhole digit patterns for a user.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanRedirectingGetRequest

Request the initiating call forwards/transfer permissions for a user.
 The
response is either a C<UserOutgoingCallingPlanRedirectingGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanRedirectingModifyRequest

Modify the initiating call forwards/transfer permissions for a user.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanRedirectedGetRequest

Request the call forwarded/transferred permissions for a user.
 The response is
either a C<UserOutgoingCallingPlanRedirectedGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanRedirectedModifyRequest

Modify the call forwarded/transferred permissions for a user.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanSustainedAuthorizationCodeGetRequest

Request the sustained authorization code setting for a user.
 The response is
either a C<UserOutgoingCallingPlanSustainedAuthorizationCodeGetResponse> or an
C<ErrorResponse>.
 Engineering Note: This command is used internally by Call
Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanSustainedAuthorizationCodeModifyRequest

Modify or clear the sustained authorization code for a user.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.
 Engineering Note: This
command is used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanTransferNumbersGetRequest

Request the transfer numbers for a user.
 The response is either a
C<UserOutgoingCallingPlanTransferNumbersGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutgoingCallingPlanTransferNumbersModifyRequest

Modify the transfer numbers for a user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutlookIntegrationGetRequest

Request the user level data associated with Outlook Integration.
 The response
is either a C<UserOutlookIntegrationGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserOutlookIntegrationModifyRequest

Modify the user level data associated with Outlook Integration.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemPhysicalLocationGetRequest

Request to get the list of Physical Location system parameters.
 The response
is either C<SystemPhysicalLocationGetResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemPhysicalLocationModifyRequest

Request to modify Physical Location system parameters.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserPhysicalLocationGetRequest

Request the user level data associated with Physical Location.
 The response is
either a C<UserPhysicalLocationGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPhysicalLocationModifyRequest

Modify the user level data associated with Physical Location.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupPolycomPhoneServicesGetRequest

Request the group's Polycom Phone Services attributes.
 The response is either
a C<GroupPolycomPhoneServicesGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupPolycomPhoneServicesModifyRequest

Modify the group's Polycom Phone Services attributes.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 UserPolycomPhoneServicesGetRequest

Request the user's Polycom Phone Services attributes.
 The response is either a
C<UserPolycomPhoneServicesGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item accessDevice

=back

Additionally there are generic tagged parameters.

=head3 UserPolycomPhoneServicesModifyRequest

Modify the user's Polycom Phone Services attributes.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item accessDevice

=back

Additionally there are generic tagged parameters.

=head3 UserPolycomPhoneServicesGetPrimaryEndpointListRequest

Request the user's list of device profiles on which the user is the primary
user.
 The response is either a
C<UserPolycomPhoneServicesGetPrimaryEndpointListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 EnterprisePreAlertingAnnouncementGetRequest

Get the Enterprise pre-alerting service settings.
 The response is either a
C<EnterprisePreAlertingAnnouncementGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterprisePreAlertingAnnouncementModifyRequest

Modify the enterprise level pre-alerting service settings.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 GroupPreAlertingAnnouncementGetRequest

Get the group s C<PreAlertingservice> settings.
 The response is either a
C<GroupPreAlertingAnnouncementGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupPreAlertingAnnouncementModifyRequest

Modify the group level pre-alerting service settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 UserPreAlertingAnnouncementGetRequest

Get the user's pre-alerting service setting.
 The response is either a
C<UserPreAlertingAnnouncementGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPreAlertingAnnouncementModifyRequest

Modify the user's pre-alerting service setting.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPreAlertingAnnouncementAddCriteriaRequest

Add a criteria to the user's pre-alerting service.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserPreAlertingAnnouncementModifyCriteriaRequest

Modify a criteria for the user's pre-alerting service.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserPreAlertingAnnouncementDeleteCriteriaRequest

Delete a criteria from the user's pre-alerting service.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserPreAlertingAnnouncementGetCriteriaRequest

Get a criteria for the user's pre-alerting service.
 The response is either a
C<UserPreAlertingAnnouncementGetCriteriaResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 GroupPreferredCarrierGroupGetRequest

Requests the currently configured carriers for a group.
 The response is either
a C<GroupPreferredCarrierGroupGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupPreferredCarrierGroupModifyRequest

Modifies the currently configured carriers for a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderPreferredCarrierAddRequest

Add the country code preferred carriers for a service provider or enterprise.
For each
 combination of service provider and country code, you can assign an
intra-lata, inter-lata,
 and international carrier. Each of the three types of
carriers is optional.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.
 Note: At the system level, more than one carrier may be
assigned to each country code.
 At the service provider level, you must choose
from the carriers assigned at the system level.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item countryCode

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderPreferredCarrierDeleteRequest

Delete the country code preferred carriers for a service provider or
enterprise.
 Note that this is different from unassigning all 3 types of
carriers with
 the C<ServiceProviderPreferredCarrierModifyRequest>.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.
 An
C<ErrorResponse> will be returned if the country code preferred carriers were
never added or
 were already deleted.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item countryCode

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderPreferredCarrierGetAvailableCountryCodeListRequest

Requests the default country code and the list of unused country codes for a
service provider / enterprise.
 The response is either a
C<ServiceProviderPreferredCarrierGetAvailableCountryCodeListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderPreferredCarrierGetCarrierListRequest

Requests the lists of carriers for a specified country code for a service
provider / enterprise.
 The response is either a
C<ServiceProviderPreferredCarrierGetCarrierListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item countryCode

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderPreferredCarrierGetListRequest

Requests a table of all the carriers defined in a specified service provider or
enterprise.
 The response is either a
C<ServiceProviderPreferredCarrierGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderPreferredCarrierGetRequest

Requests the currently configured carriers for a specified country code for a
service provider / enterprise.
 The response is either a
C<ServiceProviderPreferredCarrierGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item countryCode

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderPreferredCarrierModifyRequest

Modify the country code preferred carriers for a service provider or
enterprise. For each
 combination of service provider and country code, you can
assign an intra-lata, inter-lata,
 and international carrier. Each of the 3
types of carriers is optional.
 If an optional carrier is not specified, the
assignment will not change.
 To clear a preferred carrier, set the value to an
empty string.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.
 Note: At the system level, more than one carrier may be
assigned to each country code.
 At the service provider level, you must choose
from the carriers assigned at the system level.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item countryCode

=back

Additionally there are generic tagged parameters.

=head3 SystemPreferredCarrierAddRequest

Add a carrier to the system.
 More than one carrier may be assigned to each
country code.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item carrier

=item cic

=item countryCode

=item isIntraLata

=item isInterLata

=item isInternational

=back

Additionally there are generic tagged parameters.

=head3 SystemPreferredCarrierDeleteRequest

Delete a carrier from the system.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.
 An C<ErrorResponse> is returned if the carrier is in
use, or if the carrier didn't exist prior to deletion..

Fixed parameters are:-

=over 4

=item carrier

=back

Additionally there are generic tagged parameters.

=head3 SystemPreferredCarrierGetGroupListRequest

Requests a list of groups using the specified carrier.  It is possible to
restrict the
 number of rows returned by specifying various search criteria.
Multiple search criteria
 are logically C<ANDed> together.
 The response is
either a C<SystemPreferredCarrierGetGroupListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item carrier

=back

Additionally there are generic tagged parameters.

=head3 SystemPreferredCarrierGetListRequest

Requests a table of all the carriers defined in the system.
 The response is
either a C<SystemPreferredCarrierGetListResponse>
 or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemPreferredCarrierGetRequest

Requests the attributes of carrier.
 The response is either a
C<SystemPreferreredCarrierGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item carrier

=back

Additionally there are generic tagged parameters.

=head3 SystemPreferredCarrierGetUserListRequest

Requests a list of users using the specified carrier.  It is possible to
restrict the
 number of rows returned by specifying various search criteria.
Multiple search criteria
 are logically C<ANDed> together.
 The response is
either a C<SystemPreferreredCarrierGetUserListResponse>
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item carrier

=back

Additionally there are generic tagged parameters.

=head3 SystemPreferredCarrierModifyRequest

Modify the attributes of a carrier.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.
 An C<ErrorResponse> is returned if
C<countryCode> modification is attempted while the carrier is assigned to a
service provider.
 An C<ErrorResponse> is returned if an attempt to set
C<isIntraLata> to false is made while the carrier is used as an intra-LATA
carrier.
 An C<ErrorResponse> is returned if an attempt to set
C<isInternational> to false is made while the carrier is used as an
international carrier.

Fixed parameters are:-

=over 4

=item carrier

=back

Additionally there are generic tagged parameters.

=head3 UserPreferredCarrierUserGetRequest

Requests the currently configured preferred carriers for a user.
 The response
is either a C<UserPreferredCarrierUserGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPreferredCarrierUserModifyRequest

Modifies the currently configured preferred carriers for a user.
 The response
is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPrepaidGetRequest

Request the user level data associated with Prepaid.
 The response is either a
C<UserPrepaidGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPrepaidModifyRequest

Modify the user level data associated with Prepaid.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.
 Engineering Note: This command is
used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPriorityAlertAddCriteriaRequest16

Add a criteria to the user's priority alert service.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserPriorityAlertDeleteCriteriaRequest

Delete a criteria from the user's priority alert service.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserPriorityAlertGetCriteriaListRequest

Get the user's priority alert criteria listing.
 The response is either a
C<UserPriorityAlertGetCriteriaListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPriorityAlertGetCriteriaRequest16

Get a criteria for the user's priority alert service.
 The response is either a
C<UserPriorityAlertGetCriteriaResponse16> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserPriorityAlertModifyActiveCriteriaListRequest

Activate the user's priority alert criteria list.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPriorityAlertModifyCriteriaRequest

Modify a criteria for the user's priority alert service.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceInstancePrivacyGetRequest17sp4

Request the data associated with Privacy for a service instance.
 The response
is either a C<GroupServiceInstancePrivacyGetResponse17sp4>
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceInstancePrivacyModifyRequest

Modify the data associated with Privacy for a service instance.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserPrivacyGetAvailableMonitorsUserListRequest

Retrieves a list of users in the enterprise or group available
 for phone
status monitoring the user specified in the userId
 element.  The response is
either
 C<UserPrivacyGetAvailableMonitorsUserListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPrivacyGetRequest13mp17

Request the user level data associated with Privacy.
 This command is supported
for regular users only.
 The response is either a
C<UserPrivacyGetResponse13mp17>
 or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPrivacyModifyRequest

Modify the user level data associated with Privacy.
 This command is supported
for regular users only.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPushToTalkGetAvailableUserListRequest

Get a list of available users for the push to talk service.
 The response is
either C<UserPushToTalkGetAvailableUserListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPushToTalkGetRequest

Request the push to talk service setting.
 The response is either a
C<UserPushToTalkGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserPushToTalkModifyRequest

Change the push to talk service settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksReceptionistEnterpriseGetRequest

Request to get the list of C<BroadWorks> Receptionist - Enterprise parameters.
The response is either C<SystemBroadWorksReceptionistEnterpriseGetResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemBroadWorksReceptionistEnterpriseModifyRequest

Request to modify C<BroadWorks> Receptionist - Enterprise settings.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserBroadWorksReceptionistEnterpriseAddUserListRequest

Add users to the C<BroadWorks> Receptionist - Enterprise monitored user list.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksReceptionistEnterpriseDeleteUserListRequest

Remove selected users from the C<BroadWorks> Receptionist - Enterprise
monitored user list.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksReceptionistEnterpriseGetAvailableUserListRequest

Get a list of available users for C<BroadWorks> Receptionist - Enterprise
monitoring.
 The response is either
C<UserBroadWorksReceptionistEnterpriseGetAvailableUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksReceptionistEnterpriseGetRequest

Request the monitored users list for the C<BroadWorks> Receptionist -
Enterprise service.
 The response is either a
C<UserBroadWorksReceptionistEnterpriseGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksReceptionistEnterpriseModifyRequest

Replace the C<BroadWorks> Receptionist - Enterprise monitored user list.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksReceptionistOfficeGetAvailableUserListRequest

Get the Receptionist Office available user list.
 The response is either
C<UserBroadWorksReceptionistOfficeGetAvailableUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksReceptionistOfficeGetRequest

Request the Receptionist Office parameters.
 The response is either a
C<UserBroadWorksReceptionistOfficeGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksReceptionistOfficeModifyRequest

Replace the Receptionist Office monitored user list.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksReceptionistSmallBusinessGetAvailableUserListRequest

Get a list of available users for the Receptionist Small Business service.
 The
response is either
C<UserBroadWorksReceptionistSmallBusinessGetAvailableUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksReceptionistSmallBusinessGetRequest

Request the Receptionist Small Business parameters.
 The response is either a
C<UserBroadWorksReceptionistSmallBusinessGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserBroadWorksReceptionistSmallBusinessModifyRequest

Replace the Receptionist Small Business monitored user list.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserRemoteOfficeGetRequest

Request the user level data associated with Remote Office.
 The response is
either a C<UserRemoteOfficeGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserRemoteOfficeModifyRequest

Modify the user level data associated with Remote Office.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointAddDNISRequest

Add a Route Point DNIS.        
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointAddInstanceRequest

Add a Route Point instance to a group.
 The Route Point is a Call Center queue
that performs the same function but 
 allows an external system to perform the
distribution of calls instead of making 
 those decisions itself.
 The domain
is required in the C<serviceUserId>.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item serviceUserId

=item serviceInstanceProfile

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointBouncedCallGetRequest

Get a route point's bounced call settings.
 The response is either a
C<GroupRoutePointBouncedCallGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointBouncedCallModifyRequest

Modify a route point's bounced call settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointDeleteDNISRequest

Delete a route point's DNIS.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointDeleteInstanceRequest

Delete a Route Point instance from a group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointDistinctiveRingingGetRequest

Get the distinctive ringing configuration values for route point.
 The response
is either a C<GroupRoutePointDistinctiveRingingGetResponse> 
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointDistinctiveRingingModifyRequest

Modify the distinctive ringing configuration values for route point.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointGetAnnouncementRequest

Get a route point's announcement settings.
 The response is either a
C<GroupRoutePointGetAnnouncementResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointGetDNISAgentListRequest

Get a list of agent who selected the DNIS as the outgoing call.
 The response
is either C<GroupRoutePointGetDNISAgentListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointGetDNISAnnouncementRequest

Get a route point's DNIS Announcements
 The response is either a
C<GroupRoutePointGetDNISAnnouncementResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointGetDNISListRequest

Get a list of DNIS that are configured for a Route Point.
 The response is
either C<GroupRoutePointGetDNISListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointGetDNISRequest

Get a route point's DNIS.
 The response is either a
C<GroupRoutePointGetDNISResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointGetFailoverPolicyRequest

Get the route point failover policy. 
 The response is either a
C<GroupRoutePointGetFailoverPolicyResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointGetInstanceListRequest

Get a list of Route Point instances within a group. 
 It is possible to search
by various criteria to restrict the number of rows returned.
 The response is
either C<GroupRoutePointGetInstanceListResponse> or C<ErrorResponse>.
 It is
possible to get the instances within a specified department.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointGetInstanceRequest

Request to get all the information of a Route Point instance.
 The response is
either C<GroupRoutePointGetInstanceResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointForcedForwardingGetRequest

Get a route point's forced forwarding settings.
 The response is either a
C<GroupRoutePointForcedForwardingGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointForcedForwardingModifyRequest

Modify a route point's forced forwarding settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointHolidayServiceGetRequest17sp1

Get a route point's holiday service settings.
 The response is either a
C<GroupRoutePointHolidayServiceGetResponse17sp1> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointHolidayServiceModifyRequest17sp1

Modify a route point's holiday service settings.
 Only Group and Enterprise
level schedules are accepted.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointModifyActiveInstanceListRequest

Request to set the active status of Route Point instances.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 GroupRoutePointModifyAnnouncementRequest

Modify a route point's announcement settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointModifyDNISAnnouncementRequest

Modify a route point DNIS announcement settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointModifyDNISParametersRequest

Modify the setting that are configured for all the DNIS in a Route Point.
 The
response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointModifyDNISRequest

Modify a route point's DNIS settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item dnisKey

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointManualFailoverRequest

Initiate manual failover for the Route Point.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointModifyFailoverPolicyRequest

Modify the route point failover policy. 
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointModifyInstanceRequest

Request to modify a Route Point instance.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointNightServiceGetRequest17sp1

Get a route point's night service settings.
 The response is either a
C<GroupRoutePointNightServiceGetResponse17sp1> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointNightServiceModifyRequest17sp1

Modify a route point's night service settings.
 Only Group and Enterprise level
schedules are accepted.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointOverflowGetRequest

Get a route point's overflow settings.
 The response is either a
C<GroupRoutePointOverflowGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointOverflowModifyRequest

Modify a route point's overflow settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointQueueCallDispositionCodeAddRequest

Add a Route Point Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=item code

=item isActive

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointQueueCallDispositionCodeDeleteRequest

Delete a Route Point Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointQueueCallDispositionCodeGetListRequest

Get the list of Route Point Level and Organization Level Call Disposition
Codes.
 The response is either
C<GroupRoutePointQueueCallDispositionCodeGetListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointQueueCallDispositionCodeGetRequest

Get a Route Point Call Disposition Code.
 The response is either
C<GroupRoutePointQueueCallDispositionCodeGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointQueueCallDispositionCodeModifyRequest

Modify a Route Point Call Disposition Code.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=item code

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointQueueCallDispositionCodeSettingsGetRequest

Request the queue level data associated with Route Point Call Disposition Code
Settings.
 The response is either an
C<GroupRoutePointQueueCallDispositionCodeSettingsGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 GroupRoutePointQueueCallDispositionCodeSettingsModifyRequest

Modify the queue level data associated with Route Point Agents Unavailable Code
Settings.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserRoutePointCallDispositionCodeGetAvailableListRequest

Get the list of available Route Point Call Disposition Codes to be used by a
client.
 The response is either
C<UserRoutePointCallDispositionCodeGetAvailableListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceUserId

=back

Additionally there are generic tagged parameters.

=head3 UserRoutePointSupervisorGetListRequest

Get a list of Route Point supervisors assigned to a user.
 The response is
either a
 C<UserRoutePointSupervisorGetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserRoutePointSupervisorModifyListRequest

Request to modify the Route Point supervisor list for a user.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemSMDIMessageDeskAddServerRequest

Request to add a SMDI Server to the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=item netAddress

=item port

=back

Additionally there are generic tagged parameters.

=head3 SystemSMDIMessageDeskDeleteServerRequest

Request to delete a SMDI Server from the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemSMDIMessageDeskGetServerListRequest

Request to get a list of SMDI Servers defined in the system.
 The response is
either a C<SystemSMDIMessageDeskGetServerListResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSMDIMessageDeskModifyServerRequest

Request to modify a SMDI Server in the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemSMDIMessageDeskAddServerRouteRequest

Request to add a SMDI Server route to the system.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item routeDestination

=item deviceName

=back

Additionally there are generic tagged parameters.

=head3 SystemSMDIMessageDeskDeleteServerRouteRequest

Request to delete a SMDI Server route from the system.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item routeDestination

=back

Additionally there are generic tagged parameters.

=head3 SystemSMDIMessageDeskGetServerRouteListRequest

Request to get a list of SMDI Servers routes in the system.
 The response is
either a C<SystemSMDIMessageDeskGetServerRouteListResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSMDIMessageDeskModifyServerRouteRequest

Replace the list of devices associated with a SMDI server route destination.
There must be at least one device in the list.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item routeDestination

=back

Additionally there are generic tagged parameters.

=head3 UserSMDIMessageDeskAddServerRequest

Request to add a SMDI Server for a user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item deviceName

=item netAddress

=item port

=back

Additionally there are generic tagged parameters.

=head3 UserSMDIMessageDeskDeleteServerListRequest

Request to delete a list of SMDI Servers for a user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSMDIMessageDeskGetRequest

Get the user's SMDI Message Desk service personal setting.
 The response is
either a C<UserSMDIMessageDeskGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSMDIMessageDeskGetServerListRequest

Request to get a list of SMDI Servers defined for a user.
 The response is
either a C<UserSMDIMessageDeskGetServerListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSMDIMessageDeskModifyRequest

Modify the user's SMDI Message Desk service setting.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallAcceptanceAddCriteriaRequest16

Add a criteria to the user's selective call acceptance service.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallAcceptanceDeleteCriteriaRequest

Delete a criteria from the user's selective call acceptance service.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallAcceptanceGetCriteriaListRequest

Get the user's selective call acceptance criteria listing.
 The response is
either a C<UserSelectiveCallAcceptanceGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallAcceptanceGetCriteriaRequest16

Get a criteria for the user's selective call acceptance service.
 The response
is either a C<UserSelectiveCallAcceptanceGetCriteriaResponse16> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallAcceptanceModifyActiveCriteriaListRequest

Activate the user's selective call acceptance criteria list.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallAcceptanceModifyCriteriaRequest

Modify a criteria for the user's selective call acceptance service.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallRejectionAddCriteriaRequest16

Add a criteria to the user's selective call rejection service.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallRejectionDeleteCriteriaRequest

Delete a criteria from the user's selective call rejection service.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallRejectionGetCriteriaListRequest

Get the user's selective call rejection criteria listing.
 The response is
either a C<UserSelectiveCallRejectionGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallRejectionGetCriteriaRequest16sp1

Get a criteria for the user's selective call rejection service.
 The response
is either a C<UserSelectiveCallRejectionGetCriteriaResponse16sp1> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallRejectionModifyActiveCriteriaListRequest

Activate the user's selective call rejection criteria list.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSelectiveCallRejectionModifyCriteriaRequest16

Modify a criteria for the user's selective call rejection service.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSequentialRingAddCriteriaRequest16

Add a criteria to the user's sequential ring service.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSequentialRingDeleteCriteriaRequest

Delete a criteria from the user's sequential ring service.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSequentialRingGetCriteriaRequest16

Get a criteria for the user's sequential ring service.
 The response is either
a C<UserSequentialRingGetCriteriaResponse16> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSequentialRingGetRequest14sp4

Get the user's sequential ring service setting.
 The response is either a
C<UserSequentialRingGetResponse14sp4> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSequentialRingModifyCriteriaRequest

Modify a criteria for the user's sequential ring service.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSequentialRingModifyRequest

Modify the user's sequential ring service setting.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupSeriesCompletionAddInstanceRequest

Adds a Series Completion group.
 The response is either C<SuccessResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupSeriesCompletionDeleteInstanceRequest

Deletes a Series Completion group.
 The response is either C<SuccessResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupSeriesCompletionGetAvailableUserListRequest

Get a list of users that can be assigned to a Series Completion group.
 The
available user list for a new Series Completion group can be obtained
 by not
setting the name.
 The response is either
C<GroupSeriesCompletionGetAvailableUserListResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupSeriesCompletionGetInstanceListRequest

Request to get a list of Series Completion instances within a group.
 The
response is either C<GroupSeriesCompletionGetInstanceListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupSeriesCompletionGetInstanceRequest

Gets a Series Completion group.
 The response is either
C<GroupSeriesCompletionGetInstanceResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupSeriesCompletionModifyInstanceRequest

Modifies a Series Completion group. Replaces the entire list of users in the
group.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 UserSeriesCompletionGetRequest

Gets the details of the Series Completion group that a user belongs to (if
any).
 Any user can only belong to one Series Completion group.
 The response
is either C<UserSeriesCompletionGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceScriptsGroupClearLogRequest

Clear the Service Script Group Log.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceScriptsGroupGetLogRequest

Request the group level data associated with Service Scripts Group Log.
 The
response is either a C<GroupServiceScriptsGroupGetLogResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceScriptsGroupGetRequest

Request the group level data associated with Service Scripts Group
Configuration.
 The response is either a C<GroupServiceScriptsGroupGetResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupServiceScriptsGroupModifyRequest

Modify the group level data associated with Service Scripts Configuration.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 UserServiceScriptsUserClearLogRequest

Clear the Service Script User Log.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserServiceScriptsUserGetLogRequest

Request the user level data associated Service Scripts User Log.
 The response
is either a C<UserServiceScriptsGetUserLogResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserServiceScriptsUserGetRequest

Request the user level data associated with Service Scripts User Configuration.
 The response is either a C<UserServiceScriptsUserGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserServiceScriptsUserModifyRequest

Modify the user level data associated with Service Scripts User Configuration.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSharedCallAppearanceAddEndpointRequest14sp2

Associate an access device instance to the user's Shared Call Appearance.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item accessDeviceEndpoint

=item isActive

=item allowOrigination

=item allowTermination

=back

Additionally there are generic tagged parameters.

=head3 UserSharedCallAppearanceDeleteEndpointListRequest14

Disassociate one or more of a user's Shared Call Appearance endpoints.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSharedCallAppearanceGetEndpointRequest

Get the user's Shared Call Appearance endpoint setting.
 The response is either
a C<UserSharedCallAppearanceGetEndpointResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item accessDeviceEndpoint

=back

Additionally there are generic tagged parameters.

=head3 UserSharedCallAppearanceGetRequest16sp2

Get the user's Shared Call Appearance service setting.
 The response is either
a C<UserSharedCallAppearanceGetResponse16sp2> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSharedCallAppearanceModifyEndpointRequest

Associate/Disassociate an access device instance to the user's Shared Call
Appearance.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item accessDeviceEndpoint

=back

Additionally there are generic tagged parameters.

=head3 UserSharedCallAppearanceModifyRequest

Modify the user's Shared Call Appearance service setting.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.
 The following elements are
only used in AS data mode:
 C<enableCallParkNotification>

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingFamilyAddCriteriaRequest

Add a criteria to the user's simultaneous ring family service.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingFamilyDeleteCriteriaRequest

Delete a criteria from the user's simultaneous ring family service.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingFamilyGetCriteriaRequest

Get a criteria for the user's simultaneous ring family service.
 The response
is either a C<UserSimultaneousRingFamilyGetCriteriaResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingFamilyGetRequest17

Get the user's simultaneous ring family service setting.
 The response is
either a C<UserSimultaneousRingFamilyGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingFamilyModifyCriteriaRequest

Modify a criteria for the user's simultaneous ring family service.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingFamilyModifyRequest17

Modify the user's simultaneous ring family service setting.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingPersonalAddCriteriaRequest

Add a criteria to the user's simultaneous ring personal service.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingPersonalDeleteCriteriaRequest

Delete a criteria from the user's simultaneous ring personal service.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingPersonalGetCriteriaRequest

Get a criteria for the user's simultaneous ring personal service.
 The response
is either a C<UserSimultaneousRingPersonalGetCriteriaResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingPersonalGetRequest17

Get the user's simultaneous ring personal service setting.
 The response is
either a C<UserSimultaneousRingPersonalGetResponse17> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingPersonalModifyCriteriaRequest

Modify a criteria for the user's simultaneous ring personal service.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item criteriaName

=back

Additionally there are generic tagged parameters.

=head3 UserSimultaneousRingPersonalModifyRequest17

Modify the user's simultaneous ring personal service setting.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupSpeedDial100GetRequest17sp1

Get the speed dial 100 service settings for a group.
 The response is either a
C<GroupSpeedDial100GetResponse17sp1> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupSpeedDial100ModifyRequest

Modify the speed dial 100 prefix setting for a group.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 SystemSpeedDial100GetRequest17sp1

Get the speed dial 100 system-wide default setting.
 The response is either a
C<SystemSpeedDial100GetResponse17sp1> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemSpeedDial100ModifyRequest

Modify the speed dial 100 system-wide default prefix setting.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserSpeedDial100AddListRequest

Add one or more speed dial 100 settings for a user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSpeedDial100DeleteListRequest

Delete one or more speed dial 100 settings for a user.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSpeedDial100GetListRequest17sp1

Get the speed dial 100 settings for a user.
 The response is either a
C<UserSpeedDial100GetListResponse17sp1> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSpeedDial100GetRequest

Get speed dial 100 settings for a speed code.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item speedCode

=back

Additionally there are generic tagged parameters.

=head3 UserSpeedDial100ModifyListRequest

Modify the speed dial 100 settings for a user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.
 Engineering Note: This command is
used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSpeedDial8GetListRequest

Get the speed dial 8 settings for a user.
 The response is either a
C<UserSpeedDial8GetListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserSpeedDial8ModifyListRequest

Modify the speed dial 8 settings for a user.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.
 Engineering Note: This command is
used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserThirdPartyVoiceMailSupportGetRequest17

Request the user level data associated with Third-Party Voice Mail Support.
The response is either a C<UserThirdPartyVoiceMailSupportGetResponse17> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserThirdPartyVoiceMailSupportModifyRequest

Modify the Third Party Voice Mail Support settings for a user.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 GroupThirdPartyVoiceMailSupportGetRequest

Request the group level data associated with Third-Party Voice Mail Support.
The response is either a C<GroupThirdPartyVoiceMailSupportGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupThirdPartyVoiceMailSupportModifyRequest

Modify the Third Party Voice Mail Support settings for a group.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 SystemThirdPartyVoiceMailSupportGetRequest

Request the system level data associated with Third-party Voice Mail Support.
The response is either a C<SystemThirdPartyVoiceMailSupportGetResponse> or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemThirdPartyVoiceMailSupportModifyRequest

Modify the system level data associated with Third-party Voice Mail Support.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 EnterpriseEnterpriseTrunkAddRequest

Request to add an enterprise trunk in an enterprise.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item enterpriseTrunkName

=item maximumRerouteAttempts

=item routeExhaustionAction

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseEnterpriseTrunkAddUserListRequest

Request to add users to an enterprise trunk in an enterprise.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseEnterpriseTrunkDeleteRequest

Request to delete an enterprise trunk in an enterprise.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseEnterpriseTrunkDeleteUserListRequest

Request to delete users from an enterprise trunk in an enterprise.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseEnterpriseTrunkGetAvailableTrunkGroupListRequest

Request to get the list of all available trunk groups defined in an enterprise.
 It is possible to search by various criteria to restrict the number of rows
returned.
 Multiple search criteria are logically C<ANDed> together.
 The
response is either a
C<EnterpriseEnterpriseTrunkGetAvailableTrunkGroupListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseEnterpriseTrunkGetAvailableUserListRequest

Request the list of users that are available to be added to an enterprise
trunk.  This list contains users in the enterprise that are trunk users and not
already assigned to an enterprise trunk.
 It is possible to search by various
criteria to restrict the number of rows returned.
 Multiple search criteria are
logically C<ANDed> together.
 The response is either an
C<EnterpriseEnterpriseTrunkGetAvailableUserListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseEnterpriseTrunkGetListRequest

Request to get the list of all enterprise trunks defined in an enterprise.
 The
response is either a C<EnterpriseEnterpriseTrunkGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseEnterpriseTrunkGetRequest

Request to get an enterprise trunk
 The response is either an
C<EnterpriseEnterpriseTrunkGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseEnterpriseTrunkGetUserListRequest

Request the list of users in an enterprise trunk.
 It is possible to search by
various criteria to restrict the number of rows returned.
 Multiple search
criteria are logically C<ANDed> together.
 The response is either a
C<EnterpriseEnterpriseTrunkGetUserListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseEnterpriseTrunkModifyRequest

Request to modify an enterprise trunk in an enterprise.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 GroupEnterpriseTrunkAddRequest

Request to add an enterprise trunk in a group.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item enterpriseTrunkName

=item maximumRerouteAttempts

=item routeExhaustionAction

=back

Additionally there are generic tagged parameters.

=head3 GroupEnterpriseTrunkAddUserListRequest

Request to add users to an enterprise trunk in a group.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 GroupEnterpriseTrunkDeleteRequest

Request to delete an enterprise trunk in a group.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 GroupEnterpriseTrunkDeleteUserListRequest

Request to delete users from an enterprise trunk in a group.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 GroupEnterpriseTrunkGetAvailableTrunkGroupListRequest

Request to get the list of all available trunk groups defined in a group.
 It
is possible to search by various criteria to restrict the number of rows
returned.
 Multiple search criteria are logically C<ANDed> together.
 The
response is either a C<GroupEnterpriseTrunkGetAvailableTrunkGroupListResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupEnterpriseTrunkGetAvailableUserListRequest

Request the list of users that are available to be added to an enterprise
trunk.  This list contains users in the group that are trunk users and not
already assigned to an enterprise trunk.
 It is possible to search by various
criteria to restrict the number of rows returned.
 Multiple search criteria are
logically C<ANDed> together.
 The response is either a
C<GroupEnterpriseTrunkGetAvailableUserListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupEnterpriseTrunkGetListRequest

Request to get the list of all enterprise trunks defined in a group.
 The
response is either a C<GroupEnterpriseTrunkGetListResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupEnterpriseTrunkGetRequest

Request to get an enterprise trunk
 The response is either an
C<GroupEnterpriseTrunkGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 GroupEnterpriseTrunkGetUserListRequest

Request the list of users in an enterprise trunk.
 It is possible to search by
various criteria to restrict the number of rows returned.
 Multiple search
criteria are logically C<ANDed> together.
 The response is either a
C<GroupEnterpriseTrunkGetUserListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 GroupEnterpriseTrunkModifyRequest

Request to modify an enterprise trunk in a group.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item enterpriseTrunkName

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupAddInstanceRequest17sp4

Add a Trunk Group instance to a group.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item name

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupDeleteInstanceRequest14sp4

Delete a Trunk Group Instance from a group.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item trunkGroupKey

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupGetInstanceListRequest14sp4

Get a list of Trunk Groups for the group or enterprise.
 It is possible to
restrict the results to a particular department, or expand the list to the
entire enterprise.
 The response is either a
C<GroupTrunkGroupGetInstanceListResponse14sp4> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupGetInstanceRequest17sp4

Get a Trunk Group Instance's profile.
 The response is either a
C<GroupTrunkGroupGetInstanceResponse17sp4> or an C<ErrorResponse>.
 The
response contains a hosted user table with column headings: "User Id", "Last
Name",
 "First Name", "Hiragana Last Name", "Hiragana First Name".

Fixed parameters are:-

=over 4

=item trunkGroupKey

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupGetAvailableHostedUserListRequest

Get a list of hosted users that can be assigned to a Trunk Group.
 The response
is either C<GroupTrunkGroupGetAvailableHostedUserListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item trunkGroupKey

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupGetInstanceUserListRequest14sp4

Get a list of user's on a Trunk Group Instance.
 The response is either a
C<GroupTrunkGroupGetInstanceUserListResponse14sp4> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item trunkGroupKey

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupGetRequest14sp9

Get the maximum and bursting maximum permissible active trunk group calls for
the group.
 The response is either a C<GroupTrunkGroupGetResponse14sp9> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupModifyInstanceRequest15

Modify a Trunk Group Instance in a group.
 The access device cannot be modified
or cleared if there are any users assigned to the Trunk Group.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item trunkGroupKey

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupModifyRequest14sp9

Modify the maximum and bursting maximum permissible active Trunk Group calls
for the group.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupUserCreationTaskAddRequest14sp4

Add a user creation task for a trunk group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item trunkGroupKey

=item taskName

=item userIdFormat

=item userIdDomain

=item populateExtension

=item linePortFormat

=item linePortDomain

=item populateContact

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupUserCreationTaskDeleteRequest14sp4

Delete a user creation task for a trunk group.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item trunkGroupKey

=item taskName

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupUserCreationTaskGetListRequest14sp4

Get the list of user creation tasks for a trunk group.
 The response is either
C<GroupTrunkGroupUserCreationTaskGetListResponse14sp4> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item trunkGroupKey

=back

Additionally there are generic tagged parameters.

=head3 GroupTrunkGroupUserCreationTaskGetRequest14sp4

Request the details of a specified user creation task for a trunk group.
 The
response is either C<GroupTrunkGroupUserCreationTaskGetResponse14sp4> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item trunkGroupKey

=item taskName

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderTrunkGroupGetRequest14sp1

Get the maximum and bursting maximum permissible active Trunk Group calls for
the service provider.
 The response is either a
C<ServiceProviderTrunkGroupGetResponse14sp1> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderTrunkGroupModifyRequest

Modify the maximum and bursting maximum permissible active Trunk Group calls
for the service provider.
 The response is either a C<SuccessResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 SystemTrunkGroupUserCreationTaskGetListRequest14sp4

Get the list of user creation tasks in the system.
 The response is either
C<SystemTrunkGroupUserCreationTaskGetListResponse14sp4> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserTwoStageDialingGetRequest13Mp20

Request the user level data associated with Two Stage Dialing.
 The response is
either a C<UserTwoStageDialingGetResponse13Mp20> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserTwoStageDialingModifyRequest

Modify the user level data associated with Two Stage Dialing.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 SystemTwoStageDialingAddDnRequest

Request to add Two Stage Dialing number to the system.
 The response is either
a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 SystemTwoStageDialingDeleteDnRequest

Request to delete a Two Stage Dialing number from the system.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 SystemTwoStageDialingGetDnListRequest

Request to get a list of Two Stage Dialing dns defined in the system.
 The
response is either a C<SystemTwoStageDialingGetDnListResponse>
 or an
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemTwoStageDialingModifyDnRequest

Request to modify a Two Stage Dialing number's description in the system.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 UserVideoAddOnGetRequest14

Get the user's Video Add-On service setting.
 The response is either a
C<UserVideoAddOnGetResponse14> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVideoAddOnModifyRequest14

Modify the user's Video Add-On service setting.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 EnterpriseVirtualOnNetEnterpriseExtensionsGetUserListRequest

Request the list of Virtual On-Net users in an Enterprise.
 It is possible to
search by various criteria to restrict the number of rows returned.
 Multiple
search criteria are logically C<ANDed> together.
 The response is either a 
C<EnterpriseVirtualOnNetEnterpriseExtensionsGetUserListResponse> or 
 an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 GroupVirtualOnNetEnterpriseExtensionsAddUserRequest

Adds Virtual On-Net users to a Group. It is possible to add 
 either: a single
user,  or a list of users, or a range of users, 
 or any combination thereof.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupVirtualOnNetEnterpriseExtensionsDeleteUserRequest

Delete an existing Virtual On-Net user from a Group.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 GroupVirtualOnNetEnterpriseExtensionsGetUserListRequest

Request the list of Virtual On-Net users in a Group.
 It is possible to search
by various criteria to restrict the number 
 of rows returned.
 Multiple search
criteria are logically C<ANDed> together.
 The response is either a 
C<GroupVirtualOnNetEnterpriseExtensionsGetUserListResponse> or an 
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupVirtualOnNetEnterpriseExtensionsGetUserRequest

Get an existing Virtual On-Net user from a Group.
 The response is either a 
C<GroupVirtualOnNetEnterpriseExtensionsGetUserResponse>
 or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 GroupVirtualOnNetEnterpriseExtensionsModifyUserRequest

Modify an existing Virtual On-Net user of a Group.
 The C<serviceProviderId>,
groupId and C<phoneNumber> combination uniquely 
 identifies a Virtual On-Net
User. 
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=item phoneNumber

=back

Additionally there are generic tagged parameters.

=head3 SystemVirtualOnNetCallTypeAddRequest

Add a Virtual On-Net Call Type.
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item virtualOnNetCallTypeName

=item virtualOnNetCallTypeCdrValue

=back

Additionally there are generic tagged parameters.

=head3 SystemVirtualOnNetCallTypeDeleteRequest

Delete a Virtual On-Net Call Type.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item virtualOnNetCallTypeName

=back

Additionally there are generic tagged parameters.

=head3 SystemVirtualOnNetCallTypeGetListRequest

Get the list Virtual On-Net Call Types in the system.
 The response is either a
C<SystemVirtualOnNetCallTypeGetListResponse> 
 or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemVirtualOnNetCallTypeModifyRequest

Modify a Virtual On-Net Call Type.
 The response is either a C<SuccessResponse>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item virtualOnNetCallTypeName

=back

Additionally there are generic tagged parameters.

=head3 GroupVoiceMessagingGroupGetRequest

Requests the group's Voice Messaging settings.
 The response is either
C<GroupVoiceMessagingGroupGetResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupVoiceMessagingGroupGetVoicePortalBrandingRequest16

Get the group's voice portal branding settings.
 The response is either a
C<GroupVoiceMessagingGroupGetVoicePortalBrandingResponse16> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupVoiceMessagingGroupGetVoicePortalRequest17

Request to get the group voice portal information for a voice messaging group.
The response is either C<GroupVoiceMessagingGroupGetVoicePortalResponse17> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupVoiceMessagingGroupModifyRequest

Request to modify the group's voice messaging settings.
 The response is either
C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupVoiceMessagingGroupModifyVoicePortalBrandingRequest16

Modify the group's voice portal branding settings.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 GroupVoiceMessagingGroupModifyVoicePortalRequest

Request to modify the group voice portal information for a voice messaging
group.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=item groupId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderVoiceMessagingGroupGetRequest

Requests the service provider's or enterprise's voice messaging settings.
 The
response is either C<ServiceProviderVoiceMessagingGroupGetResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingRequest16

Get the service provider's voice portal branding settings.
 The response is
either a C<ServiceProviderVoiceMessagingGroupGetVoicePortalBrandingResponse16>
or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderVoiceMessagingGroupGetVoicePortalRequest

Requests the service provider's or enterprise's voice portal settings.
 The
response is either C<ServiceProviderVoiceMessagingGroupGetVoicePortalResponse>
or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderVoiceMessagingGroupModifyRequest

Request to modify a service provider's or enterprise's voice messaging
settings.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderVoiceMessagingGroupModifyVoicePortalBrandingRequest16

Modify the service provider's voice portal branding settings.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderVoiceMessagingGroupModifyVoicePortalRequest

Request to change the service provider's or enterprise's voice portal settings.
 The response is either C<SuccessResponse> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 SystemVoiceMessageSummaryUpdateGetRequest

Requests system voice mail message summary update parameter settings.
 The
response is either C<SystemVoiceMessageSummaryUpdateGetResponse> or
C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemVoiceMessageSummaryUpdateModifyRequest

Modify the system level data associated with Voice Messaging.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemVoiceMessagingGroupGetRequest16sp2

Request the system level data associated with Voice Messaging.
 The response is
either a C<SystemVoiceMessagingGroupGetResponse16sp2> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemVoiceMessagingGroupGetVoicePortalMenusRequest14

Requests the system voice portal Menus setting.
 The response is either
C<SystemVoiceMessagingGroupGetVoicePortalMenusResponse14> or C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item getDefaultMenuKeys

=back

Additionally there are generic tagged parameters.

=head3 SystemVoiceMessagingGroupModifyRequest16

Modify the system level data associated with Voice Messaging.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 SystemVoiceMessagingGroupModifyVoicePortalMenusRequest

Request to modify the system voice portal menus setting.
 The response is
either C<SuccessResponse> or C<ErrorResponse>.

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserAddAliasListRequest

Add one or more voice mail aliases to a users voice message.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserDeleteAliasListRequest

Delete one or more voice mail aliases from a users voice message.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserGetAdvancedVoiceManagementRequest14sp3

Get the user's voice messaging advanced voice management service setting.
 The
response is either a
C<UserVoiceMessagingUserGetAdvancedVoiceManagementResponse14sp3> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserGetAliasListRequest

Get the voice mail aliases for a users voice message.
 The response is either a
C<UserVoiceMessagingUserGetAliasListResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserGetDistributionListRequest

Get a voice mail distribution list for a users voice message.
 The response is
either C<UserVoiceMessagingUserGetDistributionListResponse> or
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item listId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserGetGreetingRequest16

Get the user's voice messaging greeting information.
 The response is either a
C<UserVoiceMessagingUserGetGreetingResponse16> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserGetOutgoingSMDIMWIRequest

Get the user's voice messaging outgoing SMDI message waiting indicator service
setting.
 The response is either a
C<UserVoiceMessagingUserGetOutgoingSMDIMWIResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserGetVoiceManagementRequest17

Get the user's voice messaging voice management service settings.
 The response
is either a C<UserVoiceMessagingUserGetVoiceManagementResponse17> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserGetVoicePortalRequest16

Get the user's voice messaging voice portal settings.
 The response is either a
C<UserVoiceMessagingUserGetVoicePortalResponse16> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserModifyAdvancedVoiceManagementRequest

Modify the user's voice messaging advanced voice management service setting.
The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserModifyDistributionListRequest

Modify a voice mail distribution list for a users voice message.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=item listId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserModifyGreetingRequest16

Modify the user's voice messaging greeting.
 The response is either a
C<SuccessResponse> or an C<ErrorResponse>.
 Engineering Note: This command is
used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserModifyOutgoingSMDIMWIRequest

Modify the user's voice messaging outgoing message waiting indicator service
setting.
 The response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserModifyVoiceManagementRequest

Modify the user's voice messaging voice management service setting.
 The
response is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoiceMessagingUserModifyVoicePortalRequest16

Modify the user's voice messaging voice portal settings.
 The response is
either a C<SuccessResponse> or an C<ErrorResponse>.
 Engineering Note: This
command is used internally by Call Processing.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoicePortalCallingGetRequest

Request the user level data associated with Voice Portal Calling.
 The response
is either a C<UserVoicePortalCallingGetResponse> or an
 C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserVoicePortalCallingModifyRequest

Modify the user level data associated with Voice Portal Calling.
 The response
is either a C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderZoneCallingRestrictionsGetRequest

Gets the Service Provider/Enterprise level Zone Calling Restrictions Policies.
The response is C<ServiceProviderZoneCallingRestrictionsGetResponse> or an
C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 ServiceProviderZoneCallingRestrictionsModifyRequest

Modifies the Service Provider/Enterprise level Zone Calling Restrictions
Policies.
 The response is C<SuccessResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item serviceProviderId

=back

Additionally there are generic tagged parameters.

=head3 UserZoneCallingRestrictionsGetRequest

Gets the home zone for a user
 The response is either a
C<UserZoneCallingRestrictionsGetResponse> or an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

=head3 UserZoneCallingRestrictionsModifyRequest

Modify the home zone for a user
 The response is either a C<SuccessResponse> or
an C<ErrorResponse>.

Fixed parameters are:-

=over 4

=item userId

=back

Additionally there are generic tagged parameters.

